{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE DeriveDataTypeable         #-}
{-# LANGUAGE DeriveGeneric              #-}
{-# LANGUAGE DuplicateRecordFields      #-}
{-# OPTIONS_GHC -fno-warn-unused-binds -fno-warn-unused-imports #-}

module JourneysApp.Types (
  APITriggeredBroadcast (..),
  APITriggeredBroadcast1 (..),
  APNS (..),
  APNSCIO (..),
  APNSCIOPush (..),
  ActionObject (..),
  ActionWidget (..),
  ActivityObject (..),
  ActivityTypes (..),
  AddCollection200Response (..),
  AddCollectionRequest (..),
  AddDevice (..),
  AddDeviceAllOfDevice (..),
  AddRelationships (..),
  AllAndroidProps (..),
  And (..),
  And1 (..),
  And2 (..),
  And2AndInner (..),
  AndAndInner (..),
  AndAndInnerNot (..),
  AndAndInnerOrInner (..),
  AndAudienceFilter (..),
  AnonymousEventsRequest (..),
  ApnsWithSdk (..),
  ApnsWithoutSdk (..),
  ApsBasicPush (..),
  ApsBasicPushAps (..),
  ApsBasicPushApsAlert (..),
  ArchivedMessageObject (..),
  Attachments (..),
  Attempted (..),
  Attempted1 (..),
  Attempted2 (..),
  Attempted2AllOfData (..),
  Attempted3 (..),
  Attempted4 (..),
  Attempted5 (..),
  Attempted6 (..),
  Attempted7 (..),
  Attempted8 (..),
  Attempted9 (..),
  AttemptedAllOfData (..),
  Attribute (..),
  Attribute1 (..),
  AttributeAudienceFilter (..),
  AttributeChangeAction (..),
  AttributeChangeValue (..),
  Audience (..),
  AudienceFilter (..),
  AudienceFilter1 (..),
  BlockWidget (..),
  Bounced (..),
  Bounced1 (..),
  Bounced1AllOfData (..),
  Bounced1AllOfDataAllOfRecipientsInner (..),
  Bounced2 (..),
  Bounced2AllOfData (..),
  BouncedAllOfData (..),
  BroadcastActionLinks200Response (..),
  BroadcastActionObject (..),
  BroadcastActions200Response (..),
  BroadcastActions200ResponseActionsInner (..),
  BroadcastErrors200Response (..),
  BroadcastLinks200Response (..),
  BroadcastLinks200ResponseLinksInner (..),
  BroadcastLinks200ResponseLinksInnerLink (..),
  BroadcastLinks200ResponseLinksInnerMetric (..),
  BroadcastLinks200ResponseLinksInnerMetricSeries (..),
  BroadcastMessages200Response (..),
  BroadcastMessages200ResponseMessagesInner (..),
  BroadcastMessages200ResponseMessagesInnerMetrics (..),
  BroadcastMetrics200Response (..),
  BroadcastMetrics200ResponseMetric (..),
  BroadcastMetrics200ResponseMetricSeries (..),
  BroadcastObject (..),
  BroadcastStatus200Response (..),
  BroadcastTriggerObject (..),
  CIOObjectID (..),
  CIOObjectIDUpdatesOnly (..),
  Campaign (..),
  Campaign1 (..),
  CampaignActionLinks200Response (..),
  CampaignJourneyMetrics200Response (..),
  CampaignJourneyMetrics200ResponseJourneyMetric (..),
  CampaignMetricsDeprecated200Response (..),
  CampaignMetricsDeprecated200ResponseMetric (..),
  CampaignMetricsDeprecated200ResponseMetricSeries (..),
  CampaignObject (..),
  CampaignRequest (..),
  ChangedSubscriptionPreferences (..),
  ChangedSubscriptionPreferencesData (..),
  CioId1 (..),
  CioId2 (..),
  CioId3 (..),
  CioSubscriptionPreferences (..),
  Clicked (..),
  Clicked1 (..),
  Clicked1AllOfData (..),
  Clicked1AllOfDataAllOfRecipientsInner (..),
  Clicked2 (..),
  Clicked2AllOfData (..),
  Clicked3 (..),
  Clicked3AllOfData (..),
  Clicked4 (..),
  Clicked4AllOfData (..),
  Clicked5 (..),
  Clicked5AllOfData (..),
  ClickedAllOfData (..),
  CollectionResponse (..),
  CommonTriggerProps (..),
  ComplexAlert (..),
  ComplexAudienceFilter (..),
  ConditionalWidget (..),
  ContentObject (..),
  Converted (..),
  Converted1 (..),
  Converted1AllOfData (..),
  Converted2 (..),
  Converted2AllOfData (..),
  Converted3 (..),
  CreateManSegment200Response (..),
  CreateManSegmentRequest (..),
  CreateManSegmentRequestSegment (..),
  CriticalAlert (..),
  CustomAndroidProps (..),
  CustomIntegration (..),
  CustomRecipients (..),
  Customer (..),
  CustomerAttributesObject (..),
  CustomerEvent (..),
  CustomerEventCommon (..),
  CustomerEvents (..),
  CustomerIdentifiers (..),
  DataByURL (..),
  DataByURL1 (..),
  DataFileURL (..),
  DataObjectOnly (..),
  DataObjectOnlyAndroid (..),
  DataObjectOnlyData (..),
  DataToProcess (..),
  Date (..),
  DefaultAudience (..),
  Delete (..),
  DeleteDevice (..),
  DeleteDeviceAllOfDevice (..),
  DeleteRelationships (..),
  DeleteSnippet400Response (..),
  DeleteSnippet400ResponseErrorsInner (..),
  Delivered (..),
  Delivered1 (..),
  Delivered1AllOfData (..),
  Delivered1AllOfDataAllOfRecipientsInner (..),
  Delivered2 (..),
  Delivered2AllOfData (..),
  DeliveryOperations (..),
  DeliveryOperationsAttributes (..),
  DeliveryOperationsIdentifiers (..),
  DeviceObject (..),
  DeviceObjectCdp (..),
  DeviceObjectCdpCommon (..),
  DeviceObjectCdpCommonAttributes (..),
  DeviceObjectCommon (..),
  DevicePlatform (..),
  Drafted (..),
  Drafted1 (..),
  Drafted1AllOfData (..),
  Drafted2 (..),
  Drafted2AllOfData (..),
  Drafted3 (..),
  Drafted4 (..),
  Drafted5 (..),
  Drafted6 (..),
  Drafted7 (..),
  Drafted8 (..),
  DraftedAllOfData (..),
  Dropped (..),
  Dropped1 (..),
  Email (..),
  Email1 (..),
  Email2 (..),
  EmailAttempted (..),
  EmailAttemptedAllOfData (..),
  EmailBounced (..),
  EmailBouncedAllOfData (..),
  EmailClicked (..),
  EmailClickedAllOfData (..),
  EmailConverted (..),
  EmailConvertedAllOfData (..),
  EmailDelivered (..),
  EmailDeliveredAllOfData (..),
  EmailDrafted (..),
  EmailDraftedAllOfData (..),
  EmailDropped (..),
  EmailDroppedAllOfData (..),
  EmailEvent (..),
  EmailEventCommon (..),
  EmailEvents (..),
  EmailFailed (..),
  EmailFailedAllOfData (..),
  EmailMessage (..),
  EmailMessage1 (..),
  EmailOpened (..),
  EmailOpenedAllOfData (..),
  EmailOrId (..),
  EmailSent (..),
  EmailSentAllOfData (..),
  EmailSpammed (..),
  EmailSpammedAllOfData (..),
  EmailUndeliverable (..),
  EmailUndeliverableAllOfData (..),
  EmailUnsubscribed (..),
  EmailUnsubscribedAllOfData (..),
  Emails (..),
  ErrorsInner (..),
  EspSuppression (..),
  Event (..),
  EventCommonData (..),
  EventsRequest (..),
  ExportObject (..),
  ExportSharedProps (..),
  ExportType (..),
  FCM (..),
  FCMMessage (..),
  FCMMessageApns (..),
  FCMMessageApnsPayload (..),
  FCMMessageApnsPayloadAps (..),
  FCMMessageApnsPayloadApsAlert (..),
  FCMMessageApnsPayloadApsSound (..),
  FCMMessageApnsPayloadCIO (..),
  FCMMessageApnsPayloadCIOPush (..),
  Failed (..),
  Failed1 (..),
  Failed10 (..),
  Failed11 (..),
  Failed12 (..),
  Failed13 (..),
  Failed14 (..),
  Failed15 (..),
  Failed16 (..),
  Failed2 (..),
  Failed3 (..),
  Failed4 (..),
  Failed5 (..),
  Failed6 (..),
  Failed7 (..),
  Failed8 (..),
  Failed9 (..),
  FailedAllOfData (..),
  FcmAndroid (..),
  FcmAndroidWithSdk (..),
  FcmAndroidWithSdkMessage (..),
  FcmAndroidWithoutSdk (..),
  FcmBasicPush (..),
  FcmBasicPushMessage (..),
  FcmBasicPushMessageData (..),
  FcmBasicPushMessageNotification (..),
  FcmIosWithSdk (..),
  FcmIosWithoutSdk (..),
  FcmIosWithoutSdkMessage (..),
  FcmIosWithoutSdkMessageApns (..),
  FcmIosWithoutSdkMessageApnsPayload (..),
  FixedGridWidget (..),
  FixedHorizontalListWidget (..),
  FixedHorizontalScrollWidget (..),
  FixedListWidget (..),
  Form (..),
  GetArchivedMessage200Response (..),
  GetArchivedMessage200ResponseArchivedMessage (..),
  GetBroadcast200Response (..),
  GetBroadcastAction200Response (..),
  GetCampaignAction200Response (..),
  GetCampaignMessages200Response (..),
  GetCampaigns200Response (..),
  GetCampaigns200ResponseCampaign (..),
  GetCioAllowlist200Response (..),
  GetCollections200Response (..),
  GetCollections200ResponseCollectionsInner (..),
  GetMessage200Response (..),
  GetNewsletterMsgMeta200Response (..),
  GetNewsletterTestGroups200Response (..),
  GetNewsletterTestGroups200ResponseTestGroupsInner (..),
  GetNewsletterVariant200Response (..),
  GetNewsletters200Response (..),
  GetObjectAttributes200Response (..),
  GetObjectAttributes200ResponseObject (..),
  GetObjectAttributes200ResponseObjectIdentifiers (..),
  GetObjectRelationships200Response (..),
  GetObjectTypes200Response (..),
  GetObjectTypes200ResponseTypesInner (..),
  GetObjectsFilter200Response (..),
  GetObjectsFilter200ResponseIdentifiersInner (..),
  GetObjectsFilterRequest (..),
  GetPeopleById200Response (..),
  GetPeopleByIdRequest (..),
  GetPeopleEmail200Response (..),
  GetPeopleEmail200ResponseResultsInner (..),
  GetPeopleFilter200Response (..),
  GetPeopleFilterRequest (..),
  GetPersonActivities200Response (..),
  GetPersonAttributes200Response (..),
  GetPersonAttributes200ResponseCustomer (..),
  GetPersonAttributes200ResponseCustomerAttributes (..),
  GetPersonAttributes200ResponseCustomerDevicesInner (..),
  GetPersonAttributes200ResponseCustomerTimestamps (..),
  GetPersonMessages200Response (..),
  GetPersonMessages200ResponseMessagesInner (..),
  GetPersonMessages200ResponseMessagesInnerMetrics (..),
  GetPersonRelationships200Response (..),
  GetPersonRelationships200ResponseCioRelationshipsInner (..),
  GetPersonRelationships200ResponseCioRelationshipsInnerIdentifiers (..),
  GetPersonSegments200Response (..),
  GetPersonSegments200ResponseSegmentsInner (..),
  GetPersonSubscriptionPreferences200Response (..),
  GetPersonSubscriptionPreferences200ResponseCustomer (..),
  GetPersonSubscriptionPreferences200ResponseCustomerHeader (..),
  GetPersonSubscriptionPreferences200ResponseCustomerTopicsInner (..),
  GetPersonSubscriptionPreferences400Response (..),
  GetPersonSubscriptionPreferences400ResponseMeta (..),
  GetSegmentCount200Response (..),
  GetSegmentDependencies200Response (..),
  GetSegmentDependencies200ResponseUsedBy (..),
  GetSegmentMembership200Response (..),
  GetSender200Response (..),
  GetSenderUsage200Response (..),
  GetSuppression200Response (..),
  GetSuppression200ResponseSuppressionsInner (..),
  GetTopics200Response (..),
  GetTopics200ResponseTopicsInner (..),
  GetTransactional200Response (..),
  GetTransactionalVariant200Response (..),
  GetVariantLinks200Response (..),
  IDs (..),
  IconWidget (..),
  Id (..),
  Id1 (..),
  Id2 (..),
  IdOnly (..),
  IdOnlyIdentifiersInner (..),
  Identify (..),
  Identify1 (..),
  Identify1AllOfAttributes (..),
  Identify1AllOfAttributesCioSubscriptionPreferences (..),
  Identify1AllOfCioRelationshipsInner (..),
  Identify1AllOfIdentifiers (..),
  IdentifyAllOfCioRelationshipsInner (..),
  IdentifyAllOfCioRelationshipsInnerIdentifiers (..),
  IdentifyAllOfIdentifiers (..),
  IdentifyAnonymous (..),
  IdentifyAnonymousAllOfCioRelationshipsInner (..),
  IdentifyAnonymousAllOfCioRelationshipsInnerIdentifiers (..),
  IdentifyPerson (..),
  IdentifyPersonAllOfAttributes (..),
  IdentifyPersonAllOfAttributesCioSubscriptionPreferences (..),
  IdentifyPersonAllOfCioRelationships (..),
  IdentifyPersonAllOfIdentifiers (..),
  Ids (..),
  ImageWidget (..),
  ImportIdentifier (..),
  ImportObject (..),
  ImportRequest (..),
  ImportState (..),
  ImportType (..),
  InAppAttempted (..),
  InAppAttemptedAllOfData (..),
  InAppClicked (..),
  InAppClickedAllOfData (..),
  InAppConverted (..),
  InAppConvertedAllOfData (..),
  InAppDrafted (..),
  InAppDraftedAllOfData (..),
  InAppEvent (..),
  InAppEventCommon (..),
  InAppFailed (..),
  InAppFailedAllOfData (..),
  InAppMessageActionEvent (..),
  InAppMessageActionEventDetail (..),
  InAppMessageDismissedEvent (..),
  InAppMessageErrorEvent (..),
  InAppMessageEventDetail (..),
  InAppMessageOpenedEvent (..),
  InAppMessageOpenedEventDetail (..),
  InAppMessages (..),
  InAppOpened (..),
  InAppOpenedAllOfData (..),
  InAppSent (..),
  InAppSentAllOfData (..),
  InAppUndeliverable (..),
  InAppUndeliverableAllOfData (..),
  IosFcmAndApns (..),
  IosSharedOptions (..),
  LinkMetrics (..),
  ListActivities200Response (..),
  ListActivities200ResponseActivitiesInner (..),
  ListActivities200ResponseActivitiesInnerCustomerIdentifiers (..),
  ListActivities200ResponseActivitiesInnerData (..),
  ListBroadcastTriggers200Response (..),
  ListBroadcasts200Response (..),
  ListBroadcasts200ResponseBroadcastsInner (..),
  ListBroadcasts200ResponseBroadcastsInnerActionsInner (..),
  ListBroadcasts200ResponseBroadcastsInnerMsgTemplateIdsInner (..),
  ListCampaignActions200Response (..),
  ListCampaignActions200ResponseActionsInner (..),
  ListCampaigns200Response (..),
  ListCampaigns200ResponseCampaignsInner (..),
  ListMessages200Response (..),
  ListNewsletterVariants200Response (..),
  ListNewsletterVariants200ResponseContentsInner (..),
  ListNewsletters200Response (..),
  ListNewsletters200ResponseNewslettersInner (..),
  ListSegments200Response (..),
  ListSegments200ResponseSegmentsInner (..),
  ListSenders200Response (..),
  ListSenders200ResponseSenderIdentitiesInner (..),
  ListSnippets200Response (..),
  ListSnippets200ResponseSnippetsInner (..),
  ListTransactional200Response (..),
  ListTransactional200ResponseMessagesInner (..),
  ListTransactionalVariants200Response (..),
  ListTransactionalVariants200ResponseContentsInner (..),
  ListWebhooks200Response (..),
  ListWebhooks200ResponseReportingWebhooksInner (..),
  ListWorkspaces200Response (..),
  ListWorkspaces200ResponseWorkspacesInner (..),
  LocalData (..),
  LocalData1 (..),
  MessageDelivery (..),
  MessageMetrics (..),
  MessageObject (..),
  MessageTotalMetrics (..),
  MessageType (..),
  Metric (..),
  MobileScreenView (..),
  MobileScreenView1 (..),
  Newsletter (..),
  Newsletter1 (..),
  NewsletterObject (..),
  Not (..),
  Not1 (..),
  Not1Not (..),
  NotAudienceFilter (..),
  NotificationAndDataObject (..),
  NotificationAndDataObjectNotification (..),
  Object (..),
  ObjectAttribute (..),
  ObjectAttribute1 (..),
  ObjectAudience (..),
  ObjectCommon (..),
  ObjectCommonAllOfIdentifiers (..),
  ObjectCommonIdentify (..),
  ObjectFilter (..),
  ObjectFilterAnd (..),
  ObjectFilterNot (..),
  ObjectFilterOr (..),
  ObjectID (..),
  ObjectIDCreateAndUpdate (..),
  ObjectIdentifiers (..),
  ObjectIdentifiersIdentifiers (..),
  ObjectIdentify (..),
  ObjectIdentifyAllOfCioRelationships (..),
  ObjectIdentifyAllOfIdentifiers (..),
  ObjectIdentifyAllOfIdentifiers1 (..),
  ObjectIdentifyAnonymous (..),
  ObjectIdentifyAnonymousAllOfCioRelationships (..),
  ObjectIdentifyAnonymousAllOfIdentifiers (..),
  ObjectOperations (..),
  ObjectattributeFilter (..),
  Opened (..),
  Opened1 (..),
  Opened1AllOfData (..),
  Opened1AllOfDataAllOfRecipientsInner (..),
  Opened2 (..),
  Opened3 (..),
  OpenedAllOfData (..),
  Or (..),
  Or1 (..),
  Or1OrInner (..),
  Or2 (..),
  Or3 (..),
  OrAudienceFilter (..),
  OtherEventCommonData (..),
  PageView (..),
  PageView1 (..),
  People (..),
  PeopleFilter (..),
  PeriodMessageMetrics (..),
  PeriodMessageMetricsDeprecated (..),
  PeriodWebhookMetrics (..),
  PeriodWebhookMetricsDeprecated (..),
  PersonAddDevice (..),
  PersonAddDeviceAllOfDevice (..),
  PersonAddDeviceAllOfIdentifiers (..),
  PersonAddRelationships (..),
  PersonAddRelationshipsAllOfCioRelationships (..),
  PersonAddRelationshipsAllOfIdentifiers (..),
  PersonAttributes (..),
  PersonCioSubscriptionPreferencesChanged (..),
  PersonCioSubscriptionPreferencesCommon (..),
  PersonCommon (..),
  PersonDelete (..),
  PersonDeleteAllOfIdentifiers (..),
  PersonDeleteDevice (..),
  PersonDeleteDeviceAllOfIdentifiers (..),
  PersonDeleteRelationships (..),
  PersonDeleteRelationshipsAllOfCioRelationships (..),
  PersonDeleteRelationshipsAllOfIdentifiers (..),
  PersonEvent (..),
  PersonEventAllOfIdentifiers (..),
  PersonMerge (..),
  PersonOperations (..),
  PersonOperationsOneOf (..),
  PersonOperationsOneOf1 (..),
  PersonOperationsOneOf2 (..),
  PersonOperationsOneOf3 (..),
  PersonOperationsOneOf3Primary (..),
  PersonOperationsOneOf3Secondary (..),
  PersonOperationsOneOfAllOfAttributes (..),
  PersonPage (..),
  PersonPageAllOfIdentifiers (..),
  PersonScreen (..),
  PersonScreenAllOfIdentifiers (..),
  PersonSubscribed (..),
  PersonSuppress (..),
  PersonSuppressAllOfIdentifiers (..),
  PersonUnsubscribed (..),
  PersonUnsuppress (..),
  PersonUnsuppressAllOfIdentifiers (..),
  Preprocessor (..),
  Push (..),
  PushAttempted (..),
  PushAttemptedAllOfData (..),
  PushBounced (..),
  PushBouncedAllOfData (..),
  PushClicked (..),
  PushClickedAllOfData (..),
  PushConverted (..),
  PushConvertedAllOfData (..),
  PushDelivered (..),
  PushDeliveredAllOfData (..),
  PushDrafted (..),
  PushDraftedAllOfData (..),
  PushDropped (..),
  PushDroppedAllOfData (..),
  PushEvent (..),
  PushEventCommon (..),
  PushEvents (..),
  PushFailed (..),
  PushFailedAllOfData (..),
  PushOpened (..),
  PushOpenedAllOfData (..),
  PushSent (..),
  PushSentAllOfData (..),
  PushUndeliverable (..),
  PushUndeliverableAllOfData (..),
  Relationship (..),
  RelationshipAudience (..),
  ReportingWebhook (..),
  RequestMethod (..),
  SDKIntegration (..),
  SDKIntegrationMessage (..),
  SMS (..),
  SMSMMS (..),
  Segment (..),
  Segment1 (..),
  SegmentActionsInner (..),
  SegmentAudienceFilter (..),
  SegmentMsgTemplatesInner (..),
  SegmentResponseObject (..),
  SendEmail200Response (..),
  SendEmail400Response (..),
  SendEmail400ResponseMeta (..),
  SendEmail403Response (..),
  SendEmail403ResponseMeta (..),
  SendEmail413Response (..),
  SendEmail413ResponseMeta (..),
  SendEmailRequest (..),
  SendPush400Response (..),
  SendPush400ResponseMeta (..),
  SendPushRequest (..),
  SendPushRequestAllOfCustomDevice (..),
  SendPushRequestAllOfCustomDeviceAllOfAttributes (..),
  SendPushRequestAllOfCustomPayload (..),
  SendPushRequestAllOfCustomPayloadAndroid (..),
  SendPushRequestAllOfCustomPayloadAndroidMessage (..),
  SendPushRequestAllOfCustomPayloadAndroidMessageAndroid (..),
  SendPushRequestAllOfCustomPayloadAndroidMessageAndroidNotification (..),
  SendPushRequestAllOfCustomPayloadAndroidMessageNotification (..),
  SendPushRequestAllOfCustomPayloadIos (..),
  Sendemail (..),
  SenderIdentityObject (..),
  SendingState (..),
  Sendpush (..),
  SendpushAllOfCustomDevice (..),
  SendpushAllOfCustomPayload (..),
  SendpushAllOfCustomPayloadIos (..),
  SendpushAllOfIdentifiers (..),
  SendpushAllOfTransactionalMessageId (..),
  Sent (..),
  Sent1 (..),
  Sent1AllOfData (..),
  Sent1AllOfDataAllOfRecipientsInner (..),
  Sent2 (..),
  Sent2AllOfData (..),
  Sent3 (..),
  Sent3AllOfData (..),
  Sent4 (..),
  Sent4AllOfData (..),
  Sent5 (..),
  Sent5AllOfData (..),
  SentAllOfData (..),
  SimpleAudienceFilter (..),
  Slack (..),
  SlackAttempted (..),
  SlackAttemptedAllOfData (..),
  SlackClicked (..),
  SlackClickedAllOfData (..),
  SlackDrafted (..),
  SlackDraftedAllOfData (..),
  SlackEvent (..),
  SlackEventCommon (..),
  SlackEvents (..),
  SlackFailed (..),
  SlackFailedAllOfData (..),
  SlackSent (..),
  SlackSentAllOfData (..),
  SlackUndeliverable (..),
  SlackUndeliverableAllOfData (..),
  SmsActionObject (..),
  SmsAttempted (..),
  SmsAttemptedAllOfData (..),
  SmsBounced (..),
  SmsBouncedAllOfData (..),
  SmsClicked (..),
  SmsClickedAllOfData (..),
  SmsConverted (..),
  SmsConvertedAllOfData (..),
  SmsDelivered (..),
  SmsDeliveredAllOfData (..),
  SmsDrafted (..),
  SmsDraftedAllOfData (..),
  SmsEvent (..),
  SmsEventCommon (..),
  SmsEvents (..),
  SmsFailed (..),
  SmsFailedAllOfData (..),
  SmsSent (..),
  SmsSentAllOfData (..),
  SmsUndeliverable (..),
  SmsUndeliverableAllOfData (..),
  Snippet (..),
  Spammed (..),
  StandardAnonymousEvent (..),
  StandardAnonymousEventData (..),
  StandardEvent (..),
  StandardEventData (..),
  State (..),
  Subscribed (..),
  SubscribedAllOfData (..),
  SubscribedAllOfDataIdentifiers (..),
  Suppress (..),
  TextWidget (..),
  TrackMetrics (..),
  TransactionalActionObject (..),
  TransactionalMessage (..),
  TransactionalMessages200Response (..),
  TransactionalMetrics200Response (..),
  TransactionalMetrics200ResponseMetric (..),
  TransactionalMetrics200ResponseMetricSeries (..),
  TransactionalObject (..),
  TransactionalSharedEmailObject (..),
  TransactionalSharedObject (..),
  TransactionalSharedPushObject (..),
  TriggerBroadcast200Response (..),
  TriggerBroadcast422Response (..),
  TriggerBroadcast422ResponseErrorsInner (..),
  TriggerBroadcast422ResponseErrorsInnerSource (..),
  TriggerBroadcastRequest (..),
  Undeliverable (..),
  Undeliverable1 (..),
  Unsubscribed (..),
  Unsubscribed1 (..),
  Unsuppress (..),
  UpdateCollectionRequest (..),
  UpdateSnippets200Response (..),
  UpdateTransactional200Response (..),
  UpdateTransactionalVariant200Response (..),
  UserMaps (..),
  UserMapsAllOfPerUserDataInner (..),
  V1CioRelationships (..),
  V1CioRelationshipsRelationshipsInner (..),
  Webhook (..),
  Webhook1 (..),
  Webhook2 (..),
  Webhook3 (..),
  WebhookAttempted (..),
  WebhookAttemptedAllOfData (..),
  WebhookClicked (..),
  WebhookClickedAllOfData (..),
  WebhookDrafted (..),
  WebhookDraftedAllOfData (..),
  WebhookEvent (..),
  WebhookEventCommon (..),
  WebhookEvents (..),
  WebhookFailed (..),
  WebhookFailedAllOfData (..),
  WebhookIdentifiers (..),
  WebhookMetrics (..),
  WebhookSent (..),
  WebhookSentAllOfData (..),
  WebhookUndeliverable (..),
  WebhookUndeliverableAllOfData (..),
  WidgetCrossAxisAlignment (..),
  WidgetMainAxisAlignment (..),
  WithTemplate (..),
  WithTemplate1 (..),
  WithTemplateAllOfAttachments (..),
  WithTemplateAllOfIdentifiers (..),
  WithTemplateAllOfTransactionalMessageId (..),
  WithoutTemplate (..),
  WithoutTemplate1 (..),
  Workspace (..),
  ) where

import Data.Data (Data)
import Data.UUID (UUID)
import Data.List (lookup)
import Data.Maybe (fromMaybe)
import Data.Aeson (Value, FromJSON(..), ToJSON(..), genericToJSON, genericParseJSON)
import Data.Aeson.Types (Options(..), defaultOptions)
import Data.Set (Set)
import Data.Text (Text)
import Data.Time
import Data.Swagger (ToSchema, declareNamedSchema)
import qualified Data.Swagger as Swagger
import qualified Data.Char as Char
import qualified Data.Text as T
import qualified Data.Map as Map
import GHC.Generics (Generic)


-- | 
data APITriggeredBroadcast = APITriggeredBroadcast
  { aPITriggeredBroadcastTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , aPITriggeredBroadcastCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , aPITriggeredBroadcastDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , aPITriggeredBroadcastActionUnderscoreid :: Int -- ^ The identifier for an action.
  , aPITriggeredBroadcastBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , aPITriggeredBroadcastJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , aPITriggeredBroadcastParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  } deriving (Show, Eq, Generic, Data)

instance FromJSON APITriggeredBroadcast where
  parseJSON = genericParseJSON optionsAPITriggeredBroadcast
instance ToJSON APITriggeredBroadcast where
  toJSON = genericToJSON optionsAPITriggeredBroadcast

optionsAPITriggeredBroadcast :: Options
optionsAPITriggeredBroadcast =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("aPITriggeredBroadcastTriggerUnderscoreid", "trigger_id")
      , ("aPITriggeredBroadcastCustomerUnderscoreid", "customer_id")
      , ("aPITriggeredBroadcastDeliveryUnderscoreid", "delivery_id")
      , ("aPITriggeredBroadcastActionUnderscoreid", "action_id")
      , ("aPITriggeredBroadcastBroadcastUnderscoreid", "broadcast_id")
      , ("aPITriggeredBroadcastJourneyUnderscoreid", "journey_id")
      , ("aPITriggeredBroadcastParentUnderscoreactionUnderscoreid", "parent_action_id")
      ]


-- | 
data APITriggeredBroadcast1 = APITriggeredBroadcast1
  { aPITriggeredBroadcast1TriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , aPITriggeredBroadcast1CustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , aPITriggeredBroadcast1DeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , aPITriggeredBroadcast1ActionUnderscoreid :: Int -- ^ The identifier for an action.
  , aPITriggeredBroadcast1BroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , aPITriggeredBroadcast1JourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , aPITriggeredBroadcast1ParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , aPITriggeredBroadcast1Identifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON APITriggeredBroadcast1 where
  parseJSON = genericParseJSON optionsAPITriggeredBroadcast1
instance ToJSON APITriggeredBroadcast1 where
  toJSON = genericToJSON optionsAPITriggeredBroadcast1

optionsAPITriggeredBroadcast1 :: Options
optionsAPITriggeredBroadcast1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("aPITriggeredBroadcast1TriggerUnderscoreid", "trigger_id")
      , ("aPITriggeredBroadcast1CustomerUnderscoreid", "customer_id")
      , ("aPITriggeredBroadcast1DeliveryUnderscoreid", "delivery_id")
      , ("aPITriggeredBroadcast1ActionUnderscoreid", "action_id")
      , ("aPITriggeredBroadcast1BroadcastUnderscoreid", "broadcast_id")
      , ("aPITriggeredBroadcast1JourneyUnderscoreid", "journey_id")
      , ("aPITriggeredBroadcast1ParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("aPITriggeredBroadcast1Identifiers", "identifiers")
      ]


-- | 
data APNS = APNS
  { aPNSCIO :: Maybe APNSCIO -- ^ 
  , aPNSAps :: Maybe FCMMessageApnsPayloadAps -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON APNS where
  parseJSON = genericParseJSON optionsAPNS
instance ToJSON APNS where
  toJSON = genericToJSON optionsAPNS

optionsAPNS :: Options
optionsAPNS =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("aPNSCIO", "CIO")
      , ("aPNSAps", "aps")
      ]


-- | Contains options supported by the Customer.io SDK.
data APNSCIO = APNSCIO
  { aPNSCIOPush :: APNSCIOPush -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON APNSCIO where
  parseJSON = genericParseJSON optionsAPNSCIO
instance ToJSON APNSCIO where
  toJSON = genericToJSON optionsAPNSCIO

optionsAPNSCIO :: Options
optionsAPNSCIO =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("aPNSCIOPush", "push")
      ]


-- | Describes push notification options supported by the CIO SDK.
data APNSCIOPush = APNSCIOPush
  { aPNSCIOPushLink :: Maybe Text -- ^ A deep link (to a page in your app), or a link to a web page.
  , aPNSCIOPushImage :: Maybe Text -- ^ The URL of an HTTPS image that you want to use for your message.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON APNSCIOPush where
  parseJSON = genericParseJSON optionsAPNSCIOPush
instance ToJSON APNSCIOPush where
  toJSON = genericToJSON optionsAPNSCIOPush

optionsAPNSCIOPush :: Options
optionsAPNSCIOPush =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("aPNSCIOPushLink", "link")
      , ("aPNSCIOPushImage", "image")
      ]


-- | 
data ActionObject = ActionObject
  { actionObjectId :: Maybe Int -- ^ The identifier for an action.
  , actionObjectCampaignUnderscoreid :: Maybe Int -- ^ The identifier for a campaign.
  , actionObjectParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , actionObjectDeduplicateUnderscoreid :: Maybe Text -- ^ An identifier in the format `id:timestamp` where the id is the id of the object you are working with (Campaigns, Deliveries, Exports, Identities, Newsletters, Segments, and Templates), and the timestamp is the last time the object was updated.
  , actionObjectName :: Maybe Text -- ^ The name of the action, if it exists.
  , actionObjectLayout :: Maybe Text -- ^ The layout used for the action, if it exists.
  , actionObjectCreated :: Maybe Int -- ^ The date time when the referenced ID was created.
  , actionObjectUpdated :: Maybe Int -- ^ The date time when the referenced ID was last updated.
  , actionObjectBody :: Maybe Text -- ^ The payload for your webhook.
  , actionObjectBodyUnderscoreamp :: Maybe Text -- ^ If your message is an email, this is the AMP-enabled body of your message. If your recipient's email client doesn't support AMP, the `body` represents your fallback message.
  , actionObjectLanguage :: Maybe Text -- ^ The language variant for your message. If you don't use our [localization feature](/localization), or this is the default message, this value is an empty string.
  , actionObjectType :: Maybe Text -- ^ The type of action.
  , actionObjectSendingUnderscorestate :: Maybe Text -- ^ Determines the sending behavior for the action. `automatic` sends the action automatically when triggered; `draft` queues drafts when the action is triggered; or `off` to disable the action.
  , actionObjectFrom :: Maybe Text -- ^ The address that the message is from, relevant if the action `type` is `email`.
  , actionObjectFromUnderscoreid :: Maybe Int -- ^ The identifier of the `from` address, commonly known as the \"sender\". You can [list your sender identities](#operation/listSenders) to match the ID to a specific address.
  , actionObjectReplyUnderscoreto :: Maybe Text -- ^ The address that receives replies for the message, if applicable.
  , actionObjectReplyUnderscoretoUnderscoreid :: Maybe Int -- ^ The identifier for the `reply_to` address, if applicable. You can [list your sender identities](#operation/listSenders) to match the ID to a specific address.
  , actionObjectPreprocessor :: Maybe Text -- ^ By default, we process CSS before emails leave Customer.io using Premailer. If your message included CSS and pre-processing is not disabled, this key indicates the pre-processor.
  , actionObjectRecipient :: Maybe Text -- ^ The recipient value. In general, your recipient is an attribute that you reference using liquid, like `{{customer.phone}}`, instead of a hard-coded value. If you set this field to a liquid statement like `{{customer.phone}}`, the field returns blank in `GET` requests because we populate the recipient from your liquid statement at send time.
  , actionObjectSubject :: Maybe Text -- ^ The subject line for an `email` action.
  , actionObjectBcc :: Maybe Text -- ^ The blind-copy address(es) for this action.
  , actionObjectFakeUnderscorebcc :: Maybe Bool -- ^ If true, rather than sending true copies to BCC addresses, Customer.io sends a copy of the message with the subject line containing the recipient address(es). 
  , actionObjectPreheaderUnderscoretext :: Maybe Text -- ^ Also known as \"preview text\", this specifies the small block of text shown in an end-user's email inbox, next to, or underneath, the subject line.
  , actionObjectHeaders :: Maybe (Map.Map String Text) -- ^ An object containing headers, where the key is the header name and the value is the header value. Header names and values must be strings and cannot contain any non-ASCII characters or empty spaces. Some headers are reserved and cannot be overwritten.
  , actionObjectImageUnderscoreurl :: Maybe Text -- ^ The URL of the image in your SMS (MMS) message.
  , actionObjectUrl :: Maybe Text -- ^ The URL to send a webhook to, applies to `webhook` type actions.
  , actionObjectMethod :: Maybe Text -- ^ The HTTP method for your webhook.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ActionObject where
  parseJSON = genericParseJSON optionsActionObject
instance ToJSON ActionObject where
  toJSON = genericToJSON optionsActionObject

optionsActionObject :: Options
optionsActionObject =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("actionObjectId", "id")
      , ("actionObjectCampaignUnderscoreid", "campaign_id")
      , ("actionObjectParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("actionObjectDeduplicateUnderscoreid", "deduplicate_id")
      , ("actionObjectName", "name")
      , ("actionObjectLayout", "layout")
      , ("actionObjectCreated", "created")
      , ("actionObjectUpdated", "updated")
      , ("actionObjectBody", "body")
      , ("actionObjectBodyUnderscoreamp", "body_amp")
      , ("actionObjectLanguage", "language")
      , ("actionObjectType", "type")
      , ("actionObjectSendingUnderscorestate", "sending_state")
      , ("actionObjectFrom", "from")
      , ("actionObjectFromUnderscoreid", "from_id")
      , ("actionObjectReplyUnderscoreto", "reply_to")
      , ("actionObjectReplyUnderscoretoUnderscoreid", "reply_to_id")
      , ("actionObjectPreprocessor", "preprocessor")
      , ("actionObjectRecipient", "recipient")
      , ("actionObjectSubject", "subject")
      , ("actionObjectBcc", "bcc")
      , ("actionObjectFakeUnderscorebcc", "fake_bcc")
      , ("actionObjectPreheaderUnderscoretext", "preheader_text")
      , ("actionObjectHeaders", "headers")
      , ("actionObjectImageUnderscoreurl", "image_url")
      , ("actionObjectUrl", "url")
      , ("actionObjectMethod", "method")
      ]


-- | An action is either a link or a way to dismiss your message. The &#x60;behaviour&#x60; property determines how your app treats the action.
data ActionWidget = ActionWidget
  { actionWidgetType :: Text -- ^ Defines the widget type.
  , actionWidgetAction :: Text -- ^ The link or place you want to send a person. This is either a deep link in your app, a web address, a `mailto` link, or a way to close the message (`gist://close`).
  , actionWidgetBehaviour :: Maybe Text -- ^ * `push`: pushes a new route into the navigation stack. * `system`: offloads the action onto the operating system. Actions like `mailto:support@bourbon.sh` will open the default email client. * `back`: pops the navigation stack one step back. * `retain`: retain replaces the current view with a new route. 
  , actionWidgetComponent :: Value -- ^ The component a person taps to perform the action defined in this widget.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ActionWidget where
  parseJSON = genericParseJSON optionsActionWidget
instance ToJSON ActionWidget where
  toJSON = genericToJSON optionsActionWidget

optionsActionWidget :: Options
optionsActionWidget =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("actionWidgetType", "type")
      , ("actionWidgetAction", "action")
      , ("actionWidgetBehaviour", "behaviour")
      , ("actionWidgetComponent", "component")
      ]


-- | 
data ActivityObject = ActivityObject
  { activityObjectCustomerUnderscoreid :: Maybe Text -- ^ The ID of a customer profile, analogous to a \"person\" in the UI. If your workspace supports multiple identifiers (email and ID), this value can be null.
  , activityObjectCustomerUnderscoreidentifiers :: Maybe ListActivities200ResponseActivitiesInnerCustomerIdentifiers -- ^ 
  , activityObjectData :: Maybe ListActivities200ResponseActivitiesInnerData -- ^ 
  , activityObjectDeliveryUnderscoreid :: Maybe Text -- ^ The message ID.
  , activityObjectDeliveryUnderscoretype :: Maybe Text -- ^ The recipient device, if applicable.
  , activityObjectId :: Maybe Text -- ^ The identifier for the action.
  , activityObjectTimestamp :: Maybe Int -- ^ The date and time when the action occurred.
  , activityObjectType :: Maybe Text -- ^ The type of activity. Types with `_o:<object_type_id>` are for objects and types with `_r:<object_type_id>` are for relationships.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ActivityObject where
  parseJSON = genericParseJSON optionsActivityObject
instance ToJSON ActivityObject where
  toJSON = genericToJSON optionsActivityObject

optionsActivityObject :: Options
optionsActivityObject =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("activityObjectCustomerUnderscoreid", "customer_id")
      , ("activityObjectCustomerUnderscoreidentifiers", "customer_identifiers")
      , ("activityObjectData", "data")
      , ("activityObjectDeliveryUnderscoreid", "delivery_id")
      , ("activityObjectDeliveryUnderscoretype", "delivery_type")
      , ("activityObjectId", "id")
      , ("activityObjectTimestamp", "timestamp")
      , ("activityObjectType", "type")
      ]


-- | The type of activity. Types with &#x60;_o:&lt;object_type_id&gt;&#x60; are for objects and types with &#x60;_r:&lt;object_type_id&gt;&#x60; are for relationships.
data ActivityTypes = ActivityTypes
  { 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ActivityTypes where
  parseJSON = genericParseJSON optionsActivityTypes
instance ToJSON ActivityTypes where
  toJSON = genericToJSON optionsActivityTypes

optionsActivityTypes :: Options
optionsActivityTypes =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ 
      ]


-- | 
data AddCollection200Response = AddCollection200Response
  { addCollection200ResponseCollection :: Maybe GetCollections200ResponseCollectionsInner -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON AddCollection200Response where
  parseJSON = genericParseJSON optionsAddCollection200Response
instance ToJSON AddCollection200Response where
  toJSON = genericToJSON optionsAddCollection200Response

optionsAddCollection200Response :: Options
optionsAddCollection200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("addCollection200ResponseCollection", "collection")
      ]


-- | 
data AddCollectionRequest = AddCollectionRequest
  { addCollectionRequestName :: Text -- ^ The name of the collection. This is how you'll reference your collection in messages—`{{collection_name.data-property}}`.
  , addCollectionRequestData :: [(Map.Map String Value)] -- ^ An array of data objects that you want to reference in this collection.
  , addCollectionRequestUrl :: Text -- ^ The URL for your CSV or JSON data. If your URL does not return a `Content-Type`, we use the file extension; otherwise, Customer.io assumes your data is JSON. 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON AddCollectionRequest where
  parseJSON = genericParseJSON optionsAddCollectionRequest
instance ToJSON AddCollectionRequest where
  toJSON = genericToJSON optionsAddCollectionRequest

optionsAddCollectionRequest :: Options
optionsAddCollectionRequest =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("addCollectionRequestName", "name")
      , ("addCollectionRequestData", "data")
      , ("addCollectionRequestUrl", "url")
      ]


-- | Assign devices to a person.
data AddDevice = AddDevice
  { addDeviceType :: Text -- ^ The operation modifies a person in Customer.io
  , addDeviceIdentifiers :: Identify1AllOfIdentifiers -- ^ 
  , addDeviceAction :: Text -- ^ Add a mobile device to a person's profile.
  , addDeviceDevice :: AddDeviceAllOfDevice -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON AddDevice where
  parseJSON = genericParseJSON optionsAddDevice
instance ToJSON AddDevice where
  toJSON = genericToJSON optionsAddDevice

optionsAddDevice :: Options
optionsAddDevice =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("addDeviceType", "type")
      , ("addDeviceIdentifiers", "identifiers")
      , ("addDeviceAction", "action")
      , ("addDeviceDevice", "device")
      ]


-- | The properties representing an individual device. [Our SDK&#39;s](/sdk/) gather all the properties defined below automatically, unless you disable the &#x60;autoTrackDeviceAttributes&#x60; setting. You can reference the properties outside the &#x60;attributes&#x60; object in segments.
data AddDeviceAllOfDevice = AddDeviceAllOfDevice
  { addDeviceAllOfDeviceToken :: Text -- ^ The device token.
  , addDeviceAllOfDeviceLastUnderscoreused :: Maybe Int -- ^ The `timestamp` when you last identified this device. If you don't pass a timestamp when you add or update a device, we use the time of the request itself. Our SDKs identify a device when a person launches their app.
  , addDeviceAllOfDevicePlatform :: Text -- ^ The device/messaging platform.
  , addDeviceAllOfDeviceAttributes :: Maybe SendPushRequestAllOfCustomDeviceAllOfAttributes -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON AddDeviceAllOfDevice where
  parseJSON = genericParseJSON optionsAddDeviceAllOfDevice
instance ToJSON AddDeviceAllOfDevice where
  toJSON = genericToJSON optionsAddDeviceAllOfDevice

optionsAddDeviceAllOfDevice :: Options
optionsAddDeviceAllOfDevice =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("addDeviceAllOfDeviceToken", "token")
      , ("addDeviceAllOfDeviceLastUnderscoreused", "last_used")
      , ("addDeviceAllOfDevicePlatform", "platform")
      , ("addDeviceAllOfDeviceAttributes", "attributes")
      ]


-- | Associate multiple objects with a person.
data AddRelationships = AddRelationships
  { addRelationshipsType :: Text -- ^ The operation modifies a person in Customer.io
  , addRelationshipsIdentifiers :: Identify1AllOfIdentifiers -- ^ 
  , addRelationshipsAction :: Text -- ^ This operation associates a person with one or more objects.
  , addRelationshipsCioUnderscorerelationships :: [Identify1AllOfCioRelationshipsInner] -- ^ Each object in the array represents a relationship you want to add to, or remove from, a person.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON AddRelationships where
  parseJSON = genericParseJSON optionsAddRelationships
instance ToJSON AddRelationships where
  toJSON = genericToJSON optionsAddRelationships

optionsAddRelationships :: Options
optionsAddRelationships =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("addRelationshipsType", "type")
      , ("addRelationshipsIdentifiers", "identifiers")
      , ("addRelationshipsAction", "action")
      , ("addRelationshipsCioUnderscorerelationships", "cio_relationships")
      ]


-- | 
data AllAndroidProps = AllAndroidProps
  { allAndroidPropsTitle :: Maybe Text -- ^ The title of your push notification.
  , allAndroidPropsBody :: Maybe Text -- ^ The body of your push notification.
  , allAndroidPropsIcon :: Maybe Text -- ^ Sets the notification icon to `myicon` for drawable resource `myicon`. If you don't send this key, FCM displays the launcher icon from your app manifest.
  , allAndroidPropsSound :: Maybe Text -- ^ The sound that plays when the device receives the notification. Supports `\"default\"` or the filename of a sound resource bundled in your app. Sound files must reside in `/res/raw/`.
  , allAndroidPropsTag :: Maybe Text -- ^ Identifier to replace existing notifications in the notification drawer. If empty, each request creates a new notification.  If you specify a tag, and a notification with the same tag is already being shown, the new notification replaces the existing one in the notification drawer.  
  , allAndroidPropsColor :: Maybe Text -- ^ The notification's icon color in `#rrggbb` format.
  , allAndroidPropsClickUnderscoreaction :: Maybe Text -- ^ The action that occurs when a user taps on the notification. Launches an activity with a matching intent filter when a person taps the notification.
  , allAndroidPropsBodyUnderscorelocUnderscorekey :: Maybe Text -- ^ The key to the body string in the app's string resources that you want to use to localize the body text to the user's current localization. See [String Resources](https://developer.android.com/guide/topics/resources/string-resource/) for more information.
  , allAndroidPropsBodyUnderscorelocUnderscorearg :: Maybe Text -- ^ Variable string values used in place of the format specifiers in `body_loc_key` to localize the body text to the user's current localization. See Formatting and Styling for more information.
  , allAndroidPropsTitleUnderscorelocUnderscorekey :: Maybe Text -- ^ The key to the title string in the app's string resources that you want to use to localize the title text to the user's current localization. See [String Resources](https://developer.android.com/guide/topics/resources/string-resource/) for more information.
  , allAndroidPropsTitleUnderscorelocUnderscorearg :: Maybe Text -- ^ Variable string values used in place of the format specifiers in `title_loc_key` to localize the title text to the user's current localization. See Formatting and Styling for more information.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON AllAndroidProps where
  parseJSON = genericParseJSON optionsAllAndroidProps
instance ToJSON AllAndroidProps where
  toJSON = genericToJSON optionsAllAndroidProps

optionsAllAndroidProps :: Options
optionsAllAndroidProps =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("allAndroidPropsTitle", "title")
      , ("allAndroidPropsBody", "body")
      , ("allAndroidPropsIcon", "icon")
      , ("allAndroidPropsSound", "sound")
      , ("allAndroidPropsTag", "tag")
      , ("allAndroidPropsColor", "color")
      , ("allAndroidPropsClickUnderscoreaction", "click_action")
      , ("allAndroidPropsBodyUnderscorelocUnderscorekey", "body_loc_key")
      , ("allAndroidPropsBodyUnderscorelocUnderscorearg", "body_loc_arg")
      , ("allAndroidPropsTitleUnderscorelocUnderscorekey", "title_loc_key")
      , ("allAndroidPropsTitleUnderscorelocUnderscorearg", "title_loc_arg")
      ]


-- | 
data And = And
  { andAnd :: Maybe [AndAndInner] -- ^ Match *all* conditions to return results.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON And where
  parseJSON = genericParseJSON optionsAnd
instance ToJSON And where
  toJSON = genericToJSON optionsAnd

optionsAnd :: Options
optionsAnd =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("andAnd", "and")
      ]


-- | 
data And1 = And1
  { and1And :: Maybe [PeopleFilter] -- ^ Match *all* conditions to return results.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON And1 where
  parseJSON = genericParseJSON optionsAnd1
instance ToJSON And1 where
  toJSON = genericToJSON optionsAnd1

optionsAnd1 :: Options
optionsAnd1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("and1And", "and")
      ]


-- | 
data And2 = And2
  { and2And :: Maybe [And2AndInner] -- ^ Match *all* conditions to return results.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON And2 where
  parseJSON = genericParseJSON optionsAnd2
instance ToJSON And2 where
  toJSON = genericToJSON optionsAnd2

optionsAnd2 :: Options
optionsAnd2 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("and2And", "and")
      ]


-- | 
data And2AndInner = And2AndInner
  { and2AndInnerObjectUnderscoreattribute :: Maybe ObjectAttribute -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON And2AndInner where
  parseJSON = genericParseJSON optionsAnd2AndInner
instance ToJSON And2AndInner where
  toJSON = genericToJSON optionsAnd2AndInner

optionsAnd2AndInner :: Options
optionsAnd2AndInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("and2AndInnerObjectUnderscoreattribute", "object_attribute")
      ]


-- | 
data AndAndInner = AndAndInner
  { andAndInnerOr :: Maybe [AndAndInnerOrInner] -- ^ Returns results matching *any* conditions.
  , andAndInnerNot :: Maybe AndAndInnerNot -- ^ 
  , andAndInnerSegment :: Maybe Segment -- ^ 
  , andAndInnerAttribute :: Maybe Attribute -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON AndAndInner where
  parseJSON = genericParseJSON optionsAndAndInner
instance ToJSON AndAndInner where
  toJSON = genericToJSON optionsAndAndInner

optionsAndAndInner :: Options
optionsAndAndInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("andAndInnerOr", "or")
      , ("andAndInnerNot", "not")
      , ("andAndInnerSegment", "segment")
      , ("andAndInnerAttribute", "attribute")
      ]


-- | Returns results if a condition is false. While and/or support an array of items, &#x60;not&#x60; supports a single filter object.
data AndAndInnerNot = AndAndInnerNot
  { andAndInnerNotAnd :: Maybe [AndAndInner] -- ^ Match *all* conditions to return results.
  , andAndInnerNotOr :: Maybe [AndAndInnerOrInner] -- ^ Match *any* condition to return results.
  , andAndInnerNotSegment :: Maybe Segment -- ^ 
  , andAndInnerNotAttribute :: Maybe Attribute -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON AndAndInnerNot where
  parseJSON = genericParseJSON optionsAndAndInnerNot
instance ToJSON AndAndInnerNot where
  toJSON = genericToJSON optionsAndAndInnerNot

optionsAndAndInnerNot :: Options
optionsAndAndInnerNot =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("andAndInnerNotAnd", "and")
      , ("andAndInnerNotOr", "or")
      , ("andAndInnerNotSegment", "segment")
      , ("andAndInnerNotAttribute", "attribute")
      ]


-- | 
data AndAndInnerOrInner = AndAndInnerOrInner
  { andAndInnerOrInnerSegment :: Maybe Segment -- ^ 
  , andAndInnerOrInnerAttribute :: Maybe Attribute -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON AndAndInnerOrInner where
  parseJSON = genericParseJSON optionsAndAndInnerOrInner
instance ToJSON AndAndInnerOrInner where
  toJSON = genericToJSON optionsAndAndInnerOrInner

optionsAndAndInnerOrInner :: Options
optionsAndAndInnerOrInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("andAndInnerOrInnerSegment", "segment")
      , ("andAndInnerOrInnerAttribute", "attribute")
      ]


-- | 
data AndAudienceFilter = AndAudienceFilter
  { andAudienceFilterAnd :: Maybe [AndAndInner] -- ^ Match *all* conditions to return results.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON AndAudienceFilter where
  parseJSON = genericParseJSON optionsAndAudienceFilter
instance ToJSON AndAudienceFilter where
  toJSON = genericToJSON optionsAndAudienceFilter

optionsAndAudienceFilter :: Options
optionsAndAudienceFilter =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("andAudienceFilterAnd", "and")
      ]


-- | An event attributed to an unknown person. If you provide an &#x60;anonymous_id&#x60; with the event, you can associate the event with a person later (using the anonymous ID).
data AnonymousEventsRequest = AnonymousEventsRequest
  { anonymousEventsRequestAnonymousUnderscoreid :: Maybe Text -- ^ An identifier for an anonymous event, like a cookie. If set as an attribute on a person, any events bearing the same anonymous value are associated with this person. This value must be unique and is not reusable.
  , anonymousEventsRequestName :: Text -- ^ The name of the event. In general, this should be the name of the screen or deep link path that a person viewed, making it easy to segment your audience or trigger campaigns using this event. Make sure you trim leading and trailing spaces from this field.
  , anonymousEventsRequestId :: Maybe Text -- ^ An identifier used to deduplicate events. This value must be a [ULID](https://github.com/ulid/spec). If an event has the same value as an event we previously received, we won't show or process the duplicate. Note - our Python and Ruby libraries do not pass this id.
  , anonymousEventsRequestType :: Text -- ^ Sets the event type. If your event isn't a `page` or `screen` type event, we automatically set this property to `event`.
  , anonymousEventsRequestTimestamp :: Maybe Int -- ^ The unix timestamp when the event took place. If you don't provide this value, we use the date-time when we receive the event. 
  , anonymousEventsRequestData :: Maybe (Map.Map String Value) -- ^ Additional information that you might want to reference in a message using liquid or use to set attributes on your customer (referenced by `customer_id`).
  } deriving (Show, Eq, Generic, Data)

instance FromJSON AnonymousEventsRequest where
  parseJSON = genericParseJSON optionsAnonymousEventsRequest
instance ToJSON AnonymousEventsRequest where
  toJSON = genericToJSON optionsAnonymousEventsRequest

optionsAnonymousEventsRequest :: Options
optionsAnonymousEventsRequest =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("anonymousEventsRequestAnonymousUnderscoreid", "anonymous_id")
      , ("anonymousEventsRequestName", "name")
      , ("anonymousEventsRequestId", "id")
      , ("anonymousEventsRequestType", "type")
      , ("anonymousEventsRequestTimestamp", "timestamp")
      , ("anonymousEventsRequestData", "data")
      ]


-- | 
data ApnsWithSdk = ApnsWithSdk
  { apnsWithSdkCIO :: Maybe APNSCIO -- ^ 
  , apnsWithSdkAps :: Maybe FCMMessageApnsPayloadAps -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ApnsWithSdk where
  parseJSON = genericParseJSON optionsApnsWithSdk
instance ToJSON ApnsWithSdk where
  toJSON = genericToJSON optionsApnsWithSdk

optionsApnsWithSdk :: Options
optionsApnsWithSdk =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("apnsWithSdkCIO", "CIO")
      , ("apnsWithSdkAps", "aps")
      ]


-- | 
data ApnsWithoutSdk = ApnsWithoutSdk
  { apnsWithoutSdkAps :: Maybe FCMMessageApnsPayloadAps -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ApnsWithoutSdk where
  parseJSON = genericParseJSON optionsApnsWithoutSdk
instance ToJSON ApnsWithoutSdk where
  toJSON = genericToJSON optionsApnsWithoutSdk

optionsApnsWithoutSdk :: Options
optionsApnsWithoutSdk =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("apnsWithoutSdkAps", "aps")
      ]


-- | 
data ApsBasicPush = ApsBasicPush
  { apsBasicPushAps :: ApsBasicPushAps -- ^ 
  , apsBasicPushCIO :: Maybe APNSCIO -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ApsBasicPush where
  parseJSON = genericParseJSON optionsApsBasicPush
instance ToJSON ApsBasicPush where
  toJSON = genericToJSON optionsApsBasicPush

optionsApsBasicPush :: Options
optionsApsBasicPush =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("apsBasicPushAps", "aps")
      , ("apsBasicPushCIO", "CIO")
      ]


-- | A push payload intended for an iOS device.
data ApsBasicPushAps = ApsBasicPushAps
  { apsBasicPushApsAlert :: ApsBasicPushApsAlert -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ApsBasicPushAps where
  parseJSON = genericParseJSON optionsApsBasicPushAps
instance ToJSON ApsBasicPushAps where
  toJSON = genericToJSON optionsApsBasicPushAps

optionsApsBasicPushAps :: Options
optionsApsBasicPushAps =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("apsBasicPushApsAlert", "alert")
      ]


-- | An object containing the push title and body
data ApsBasicPushApsAlert = ApsBasicPushApsAlert
  { apsBasicPushApsAlertTitle :: Maybe Text -- ^ The title of your push notification.
  , apsBasicPushApsAlertBody :: Text -- ^ The body of your push notification.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ApsBasicPushApsAlert where
  parseJSON = genericParseJSON optionsApsBasicPushApsAlert
instance ToJSON ApsBasicPushApsAlert where
  toJSON = genericToJSON optionsApsBasicPushApsAlert

optionsApsBasicPushApsAlert :: Options
optionsApsBasicPushApsAlert =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("apsBasicPushApsAlertTitle", "title")
      , ("apsBasicPushApsAlertBody", "body")
      ]


-- | An archived message, including a complete message body. 
data ArchivedMessageObject = ArchivedMessageObject
  { archivedMessageObjectId :: Maybe Text -- ^ The identifier for a delivery—the instance of a message intended for an individual recipient.
  , archivedMessageObjectBody :: Maybe Text -- ^ The body of the variant. You cannot modify the body if you created it with our drag-and-drop editor.
  , archivedMessageObjectFrom :: Maybe Text -- ^ The address that the message is from, relevant if the action `type` is `email`.
  , archivedMessageObjectReplyUnderscoreto :: Maybe Text -- ^ The address that receives replies for the message, if applicable.
  , archivedMessageObjectRecipient :: Maybe Text -- ^ The recipient address for an action.
  , archivedMessageObjectSubject :: Maybe Text -- ^ The subject line for an `email` action.
  , archivedMessageObjectBcc :: Maybe Text -- ^ The blind-copy address(es) for this action.
  , archivedMessageObjectFakeUnderscorebcc :: Maybe Bool -- ^ If true, rather than sending true copies to BCC addresses, Customer.io sends a copy of the message with the subject line containing the recipient address(es). 
  , archivedMessageObjectPreheaderUnderscoretext :: Maybe Text -- ^ Also known as \"preview text\", this specifies the small block of text shown in an end-user's email inbox, next to, or underneath, the subject line.
  , archivedMessageObjectUrl :: Maybe Text -- ^ The URL of a webhook or action.
  , archivedMessageObjectRequestUnderscoremethod :: Maybe Text -- ^ The method used in conjunction with a webhook `url`.
  , archivedMessageObjectHeaders :: Maybe (Map.Map String Text) -- ^ An object containing headers, where the key is the header name and the value is the header value. Header names and values must be strings and cannot contain any non-ASCII characters or empty spaces. Some headers are reserved and cannot be overwritten.
  , archivedMessageObjectForgotten :: Maybe Bool -- ^ If true, Customer.io does not retain the message content.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ArchivedMessageObject where
  parseJSON = genericParseJSON optionsArchivedMessageObject
instance ToJSON ArchivedMessageObject where
  toJSON = genericToJSON optionsArchivedMessageObject

optionsArchivedMessageObject :: Options
optionsArchivedMessageObject =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("archivedMessageObjectId", "id")
      , ("archivedMessageObjectBody", "body")
      , ("archivedMessageObjectFrom", "from")
      , ("archivedMessageObjectReplyUnderscoreto", "reply_to")
      , ("archivedMessageObjectRecipient", "recipient")
      , ("archivedMessageObjectSubject", "subject")
      , ("archivedMessageObjectBcc", "bcc")
      , ("archivedMessageObjectFakeUnderscorebcc", "fake_bcc")
      , ("archivedMessageObjectPreheaderUnderscoretext", "preheader_text")
      , ("archivedMessageObjectUrl", "url")
      , ("archivedMessageObjectRequestUnderscoremethod", "request_method")
      , ("archivedMessageObjectHeaders", "headers")
      , ("archivedMessageObjectForgotten", "forgotten")
      ]


-- | A dictionary of attachments where the filename is the key and the value is the base64-encoded contents. The filename must include the extension (i.e. &#x60;name.csv&#x60;). The total size of all attachments must be less than 2 MB.
data Attachments = Attachments
  { attachmentsLessThanfileDashnameGreaterThan :: Maybe Text -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Attachments where
  parseJSON = genericParseJSON optionsAttachments
instance ToJSON Attachments where
  toJSON = genericToJSON optionsAttachments

optionsAttachments :: Options
optionsAttachments =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("attachmentsLessThanfileDashnameGreaterThan", "<file-name>")
      ]


-- | 
data Attempted = Attempted
  { attemptedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , attemptedObjectUnderscoretype :: Text -- ^ The event relates to an email action.
  , attemptedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , attemptedMetric :: Text -- ^ An email could not be sent to the delivery provider and will be retried. The `failure_message` provides the reason for the failure.
  , attemptedData :: AttemptedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Attempted where
  parseJSON = genericParseJSON optionsAttempted
instance ToJSON Attempted where
  toJSON = genericToJSON optionsAttempted

optionsAttempted :: Options
optionsAttempted =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("attemptedEventUnderscoreid", "event_id")
      , ("attemptedObjectUnderscoretype", "object_type")
      , ("attemptedTimestamp", "timestamp")
      , ("attemptedMetric", "metric")
      , ("attemptedData", "data")
      ]


-- | 
data Attempted1 = Attempted1
  { attempted1EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , attempted1ObjectUnderscoretype :: Text -- ^ The event relates to an push notification.
  , attempted1Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , attempted1Metric :: Text -- ^ A push notification was attempted but unsuccessful. This generally means that we'll try again.
  , attempted1Data :: AttemptedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Attempted1 where
  parseJSON = genericParseJSON optionsAttempted1
instance ToJSON Attempted1 where
  toJSON = genericToJSON optionsAttempted1

optionsAttempted1 :: Options
optionsAttempted1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("attempted1EventUnderscoreid", "event_id")
      , ("attempted1ObjectUnderscoretype", "object_type")
      , ("attempted1Timestamp", "timestamp")
      , ("attempted1Metric", "metric")
      , ("attempted1Data", "data")
      ]


-- | 
data Attempted2 = Attempted2
  { attempted2EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , attempted2ObjectUnderscoretype :: Text -- ^ The event relates to an in-app message.
  , attempted2Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , attempted2Metric :: Text -- ^ An in-app message failed to send, but will be retried.
  , attempted2Data :: Attempted2AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Attempted2 where
  parseJSON = genericParseJSON optionsAttempted2
instance ToJSON Attempted2 where
  toJSON = genericToJSON optionsAttempted2

optionsAttempted2 :: Options
optionsAttempted2 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("attempted2EventUnderscoreid", "event_id")
      , ("attempted2ObjectUnderscoretype", "object_type")
      , ("attempted2Timestamp", "timestamp")
      , ("attempted2Metric", "metric")
      , ("attempted2Data", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data Attempted2AllOfData = Attempted2AllOfData
  { attempted2AllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , attempted2AllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , attempted2AllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , attempted2AllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , attempted2AllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , attempted2AllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , attempted2AllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , attempted2AllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , attempted2AllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , attempted2AllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , attempted2AllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , attempted2AllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , attempted2AllOfDataFailureUnderscoremessage :: Text -- ^ Indicates the reason that an attempted message failed.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Attempted2AllOfData where
  parseJSON = genericParseJSON optionsAttempted2AllOfData
instance ToJSON Attempted2AllOfData where
  toJSON = genericToJSON optionsAttempted2AllOfData

optionsAttempted2AllOfData :: Options
optionsAttempted2AllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("attempted2AllOfDataTriggerUnderscoreid", "trigger_id")
      , ("attempted2AllOfDataCustomerUnderscoreid", "customer_id")
      , ("attempted2AllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("attempted2AllOfDataActionUnderscoreid", "action_id")
      , ("attempted2AllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("attempted2AllOfDataJourneyUnderscoreid", "journey_id")
      , ("attempted2AllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("attempted2AllOfDataIdentifiers", "identifiers")
      , ("attempted2AllOfDataCampaignUnderscoreid", "campaign_id")
      , ("attempted2AllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("attempted2AllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("attempted2AllOfDataContentUnderscoreid", "content_id")
      , ("attempted2AllOfDataFailureUnderscoremessage", "failure_message")
      ]


-- | 
data Attempted3 = Attempted3
  { attempted3EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , attempted3ObjectUnderscoretype :: Text -- ^ The event relates to an SMS message.
  , attempted3Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , attempted3Metric :: Text -- ^ An SMS could not be sent to the delivery provider, but will retry.
  , attempted3Data :: Attempted2AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Attempted3 where
  parseJSON = genericParseJSON optionsAttempted3
instance ToJSON Attempted3 where
  toJSON = genericToJSON optionsAttempted3

optionsAttempted3 :: Options
optionsAttempted3 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("attempted3EventUnderscoreid", "event_id")
      , ("attempted3ObjectUnderscoretype", "object_type")
      , ("attempted3Timestamp", "timestamp")
      , ("attempted3Metric", "metric")
      , ("attempted3Data", "data")
      ]


-- | 
data Attempted4 = Attempted4
  { attempted4EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , attempted4ObjectUnderscoretype :: Text -- ^ The event relates to a Slack message.
  , attempted4Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , attempted4Metric :: Text -- ^ A slack message failed and will be retried.
  , attempted4Data :: Attempted2AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Attempted4 where
  parseJSON = genericParseJSON optionsAttempted4
instance ToJSON Attempted4 where
  toJSON = genericToJSON optionsAttempted4

optionsAttempted4 :: Options
optionsAttempted4 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("attempted4EventUnderscoreid", "event_id")
      , ("attempted4ObjectUnderscoretype", "object_type")
      , ("attempted4Timestamp", "timestamp")
      , ("attempted4Metric", "metric")
      , ("attempted4Data", "data")
      ]


-- | 
data Attempted5 = Attempted5
  { attempted5EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , attempted5ObjectUnderscoretype :: Text -- ^ The event relates to a webhook.
  , attempted5Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , attempted5Metric :: Text -- ^ A webhook failed to send, but will be retried.
  , attempted5Data :: Attempted2AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Attempted5 where
  parseJSON = genericParseJSON optionsAttempted5
instance ToJSON Attempted5 where
  toJSON = genericToJSON optionsAttempted5

optionsAttempted5 :: Options
optionsAttempted5 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("attempted5EventUnderscoreid", "event_id")
      , ("attempted5ObjectUnderscoretype", "object_type")
      , ("attempted5Timestamp", "timestamp")
      , ("attempted5Metric", "metric")
      , ("attempted5Data", "data")
      ]


-- | 
data Attempted6 = Attempted6
  { attempted6EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , attempted6ObjectUnderscoretype :: Text -- ^ The event relates to an push notification.
  , attempted6Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , attempted6Metric :: Text -- ^ A push notification was attempted but unsuccessful. This generally means that we'll try again.
  , attempted6Data :: EmailAttemptedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Attempted6 where
  parseJSON = genericParseJSON optionsAttempted6
instance ToJSON Attempted6 where
  toJSON = genericToJSON optionsAttempted6

optionsAttempted6 :: Options
optionsAttempted6 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("attempted6EventUnderscoreid", "event_id")
      , ("attempted6ObjectUnderscoretype", "object_type")
      , ("attempted6Timestamp", "timestamp")
      , ("attempted6Metric", "metric")
      , ("attempted6Data", "data")
      ]


-- | 
data Attempted7 = Attempted7
  { attempted7EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , attempted7ObjectUnderscoretype :: Text -- ^ The event relates to a Slack message.
  , attempted7Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , attempted7Metric :: Text -- ^ A slack message failed and will be retried.
  , attempted7Data :: SmsUndeliverableAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Attempted7 where
  parseJSON = genericParseJSON optionsAttempted7
instance ToJSON Attempted7 where
  toJSON = genericToJSON optionsAttempted7

optionsAttempted7 :: Options
optionsAttempted7 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("attempted7EventUnderscoreid", "event_id")
      , ("attempted7ObjectUnderscoretype", "object_type")
      , ("attempted7Timestamp", "timestamp")
      , ("attempted7Metric", "metric")
      , ("attempted7Data", "data")
      ]


-- | 
data Attempted8 = Attempted8
  { attempted8EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , attempted8ObjectUnderscoretype :: Text -- ^ The event relates to a webhook.
  , attempted8Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , attempted8Metric :: Text -- ^ A webhook failed to send, but will be retried.
  , attempted8Data :: SlackUndeliverableAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Attempted8 where
  parseJSON = genericParseJSON optionsAttempted8
instance ToJSON Attempted8 where
  toJSON = genericToJSON optionsAttempted8

optionsAttempted8 :: Options
optionsAttempted8 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("attempted8EventUnderscoreid", "event_id")
      , ("attempted8ObjectUnderscoretype", "object_type")
      , ("attempted8Timestamp", "timestamp")
      , ("attempted8Metric", "metric")
      , ("attempted8Data", "data")
      ]


-- | 
data Attempted9 = Attempted9
  { attempted9EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , attempted9ObjectUnderscoretype :: Text -- ^ The event relates to an in-app message.
  , attempted9Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , attempted9Metric :: Text -- ^ An in-app message failed to send, but will be retried.
  , attempted9Data :: WebhookUndeliverableAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Attempted9 where
  parseJSON = genericParseJSON optionsAttempted9
instance ToJSON Attempted9 where
  toJSON = genericToJSON optionsAttempted9

optionsAttempted9 :: Options
optionsAttempted9 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("attempted9EventUnderscoreid", "event_id")
      , ("attempted9ObjectUnderscoretype", "object_type")
      , ("attempted9Timestamp", "timestamp")
      , ("attempted9Metric", "metric")
      , ("attempted9Data", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data AttemptedAllOfData = AttemptedAllOfData
  { attemptedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , attemptedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , attemptedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , attemptedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , attemptedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , attemptedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , attemptedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , attemptedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , attemptedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , attemptedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , attemptedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , attemptedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , attemptedAllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , attemptedAllOfDataFailureUnderscoremessage :: Text -- ^ Indicates the reason that an attempted message failed.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON AttemptedAllOfData where
  parseJSON = genericParseJSON optionsAttemptedAllOfData
instance ToJSON AttemptedAllOfData where
  toJSON = genericToJSON optionsAttemptedAllOfData

optionsAttemptedAllOfData :: Options
optionsAttemptedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("attemptedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("attemptedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("attemptedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("attemptedAllOfDataActionUnderscoreid", "action_id")
      , ("attemptedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("attemptedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("attemptedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("attemptedAllOfDataIdentifiers", "identifiers")
      , ("attemptedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("attemptedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("attemptedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("attemptedAllOfDataContentUnderscoreid", "content_id")
      , ("attemptedAllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("attemptedAllOfDataFailureUnderscoremessage", "failure_message")
      ]


-- | Filter your audience by attribute.
data Attribute = Attribute
  { attributeField :: Text -- ^ The name of the attribute you want to filter against.
  , attributeOperator :: Text -- ^ Determine how to evaluate criteria against the field—`exists` returns results if a person in the audience has the attribute; `eq` returns results if the audience has the attribute and the attribute has the `value` you specify.
  , attributeValue :: Maybe Text -- ^ The value you want to match for this attribute. You must include a value if you use the `eq` operator.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Attribute where
  parseJSON = genericParseJSON optionsAttribute
instance ToJSON Attribute where
  toJSON = genericToJSON optionsAttribute

optionsAttribute :: Options
optionsAttribute =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("attributeField", "field")
      , ("attributeOperator", "operator")
      , ("attributeValue", "value")
      ]


-- | 
data Attribute1 = Attribute1
  { attribute1Attribute :: Maybe Attribute -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Attribute1 where
  parseJSON = genericParseJSON optionsAttribute1
instance ToJSON Attribute1 where
  toJSON = genericToJSON optionsAttribute1

optionsAttribute1 :: Options
optionsAttribute1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("attribute1Attribute", "attribute")
      ]


-- | Filter your audience by attribute.
data AttributeAudienceFilter = AttributeAudienceFilter
  { attributeAudienceFilterField :: Text -- ^ The name of the attribute you want to filter against.
  , attributeAudienceFilterOperator :: Text -- ^ Determine how to evaluate criteria against the field—`exists` returns results if a person in the audience has the attribute; `eq` returns results if the audience has the attribute and the attribute has the `value` you specify.
  , attributeAudienceFilterValue :: Maybe Text -- ^ The value you want to match for this attribute. You must include a value if you use the `eq` operator.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON AttributeAudienceFilter where
  parseJSON = genericParseJSON optionsAttributeAudienceFilter
instance ToJSON AttributeAudienceFilter where
  toJSON = genericToJSON optionsAttributeAudienceFilter

optionsAttributeAudienceFilter :: Options
optionsAttributeAudienceFilter =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("attributeAudienceFilterField", "field")
      , ("attributeAudienceFilterOperator", "operator")
      , ("attributeAudienceFilterValue", "value")
      ]


-- | 
data AttributeChangeAction = AttributeChangeAction
  { attributeChangeActionFrom :: Maybe Text -- ^ The old attribute value. If empty, the customer probably didn't bear the attribute before this action.
  , attributeChangeActionTo :: Maybe Text -- ^ The new attribute value.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON AttributeChangeAction where
  parseJSON = genericParseJSON optionsAttributeChangeAction
instance ToJSON AttributeChangeAction where
  toJSON = genericToJSON optionsAttributeChangeAction

optionsAttributeChangeAction :: Options
optionsAttributeChangeAction =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("attributeChangeActionFrom", "from")
      , ("attributeChangeActionTo", "to")
      ]


-- | 
data AttributeChangeValue = AttributeChangeValue
  { attributeChangeValueFrom :: Maybe Text -- ^ The old attribute value. If empty, the customer probably didn't bear the attribute before this action.
  , attributeChangeValueTo :: Maybe Text -- ^ The new attribute value.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON AttributeChangeValue where
  parseJSON = genericParseJSON optionsAttributeChangeValue
instance ToJSON AttributeChangeValue where
  toJSON = genericToJSON optionsAttributeChangeValue

optionsAttributeChangeValue :: Options
optionsAttributeChangeValue =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("attributeChangeValueFrom", "from")
      , ("attributeChangeValueTo", "to")
      ]


-- | filter for people who have an attribute or an attribute value.
data Audience = Audience
  { audienceAttribute :: Maybe Attribute -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Audience where
  parseJSON = genericParseJSON optionsAudience
instance ToJSON Audience where
  toJSON = genericToJSON optionsAudience

optionsAudience :: Options
optionsAudience =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("audienceAttribute", "attribute")
      ]


-- | A filter defining the group of people that you want send the broadcast to.
data AudienceFilter = AudienceFilter
  { audienceFilterAnd :: Maybe [PeopleFilter] -- ^ Match *all* conditions to return results.
  , audienceFilterOr :: Maybe [PeopleFilter] -- ^ Match *any* condition to return results.
  , audienceFilterSegment :: Maybe Segment -- ^ 
  , audienceFilterAttribute :: Maybe Attribute -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON AudienceFilter where
  parseJSON = genericParseJSON optionsAudienceFilter
instance ToJSON AudienceFilter where
  toJSON = genericToJSON optionsAudienceFilter

optionsAudienceFilter :: Options
optionsAudienceFilter =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("audienceFilterAnd", "and")
      , ("audienceFilterOr", "or")
      , ("audienceFilterSegment", "segment")
      , ("audienceFilterAttribute", "attribute")
      ]


-- | Describe the customers you want to return. Use &#x60;and&#x60;, &#x60;or&#x60;, and &#x60;not&#x60; arrays to group and determine the logic for filter criteria. You can nest and, or, and not arrays to produce complex filters.
data AudienceFilter1 = AudienceFilter1
  { audienceFilter1And :: Maybe [PeopleFilter] -- ^ Match *all* conditions to return results.
  , audienceFilter1Or :: Maybe [PeopleFilter] -- ^ Match *any* condition to return results.
  , audienceFilter1Segment :: Maybe Segment -- ^ 
  , audienceFilter1Attribute :: Maybe Attribute -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON AudienceFilter1 where
  parseJSON = genericParseJSON optionsAudienceFilter1
instance ToJSON AudienceFilter1 where
  toJSON = genericToJSON optionsAudienceFilter1

optionsAudienceFilter1 :: Options
optionsAudienceFilter1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("audienceFilter1And", "and")
      , ("audienceFilter1Or", "or")
      , ("audienceFilter1Segment", "segment")
      , ("audienceFilter1Attribute", "attribute")
      ]


-- | A widget that provides visual design for one or more child components.
data BlockWidget = BlockWidget
  { blockWidgetType :: Maybe Text -- ^ Defines the widget type.
  , blockWidgetSafeInsets :: Maybe Bool -- ^ Based on the env `safe-area-inset-*` CSS properties. Set to true to ensure that the block can't overflow the defined screen or the defined area of your message. Defaults to `false`.
  , blockWidgetPadding :: Maybe [Text] -- ^ Defines padding for the block, based on the values set under *Branding* > *Padding*. As with the CSS `padding` property, values in the array represent top, right, bottom, and left padding.
  , blockWidgetBackgroundColor :: Maybe Text -- ^ The background color for your block. You must set a value defined under *Branding* > *Colors*.
  , blockWidgetBorderColor :: Maybe Text -- ^ The border color for your block, if you set a border width greater than 0. You must set a value defined under *Branding* > *Colors*.
  , blockWidgetBorderWidth :: Maybe Int -- ^ The width of the border for this block in pixels.
  , blockWidgetBorderRadius :: Maybe Int -- ^ Sets the radius of corners for an item in pixels, similar to the `border-radius` CSS property.
  , blockWidgetHeight :: Maybe Int -- ^ The height of the component in pixels, if you want to constrain it. If you don't set a height or width, we'll scale your content to fit your message or container.
  , blockWidgetBackgroundImage :: Maybe Text -- ^ Set a background image for the block
  , blockWidgetFlex :: Maybe Int -- ^ The single digit syntax for the CSS `flex` property. The value you use here determines the propotional amount of space the block consumes in a parent container.
  , blockWidgetComponents :: Maybe [Value] -- ^ An array of child components that you want to make available inside this widget.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON BlockWidget where
  parseJSON = genericParseJSON optionsBlockWidget
instance ToJSON BlockWidget where
  toJSON = genericToJSON optionsBlockWidget

optionsBlockWidget :: Options
optionsBlockWidget =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("blockWidgetType", "type")
      , ("blockWidgetSafeInsets", "safeInsets")
      , ("blockWidgetPadding", "padding")
      , ("blockWidgetBackgroundColor", "backgroundColor")
      , ("blockWidgetBorderColor", "borderColor")
      , ("blockWidgetBorderWidth", "borderWidth")
      , ("blockWidgetBorderRadius", "borderRadius")
      , ("blockWidgetHeight", "height")
      , ("blockWidgetBackgroundImage", "backgroundImage")
      , ("blockWidgetFlex", "flex")
      , ("blockWidgetComponents", "components")
      ]


-- | 
data Bounced = Bounced
  { bouncedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , bouncedObjectUnderscoretype :: Text -- ^ The event relates to an email action.
  , bouncedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , bouncedMetric :: Text -- ^ The delivery provider could not deliver an email.
  , bouncedData :: BouncedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Bounced where
  parseJSON = genericParseJSON optionsBounced
instance ToJSON Bounced where
  toJSON = genericToJSON optionsBounced

optionsBounced :: Options
optionsBounced =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("bouncedEventUnderscoreid", "event_id")
      , ("bouncedObjectUnderscoretype", "object_type")
      , ("bouncedTimestamp", "timestamp")
      , ("bouncedMetric", "metric")
      , ("bouncedData", "data")
      ]


-- | 
data Bounced1 = Bounced1
  { bounced1EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , bounced1ObjectUnderscoretype :: Text -- ^ The event relates to an push notification.
  , bounced1Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , bounced1Metric :: Text -- ^ The delivery provider reported at least one invalid device token.
  , bounced1Data :: Bounced1AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Bounced1 where
  parseJSON = genericParseJSON optionsBounced1
instance ToJSON Bounced1 where
  toJSON = genericToJSON optionsBounced1

optionsBounced1 :: Options
optionsBounced1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("bounced1EventUnderscoreid", "event_id")
      , ("bounced1ObjectUnderscoretype", "object_type")
      , ("bounced1Timestamp", "timestamp")
      , ("bounced1Metric", "metric")
      , ("bounced1Data", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data Bounced1AllOfData = Bounced1AllOfData
  { bounced1AllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , bounced1AllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , bounced1AllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , bounced1AllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , bounced1AllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , bounced1AllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , bounced1AllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , bounced1AllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , bounced1AllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , bounced1AllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , bounced1AllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , bounced1AllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , bounced1AllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , bounced1AllOfDataRecipients :: [Bounced1AllOfDataAllOfRecipientsInner] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Bounced1AllOfData where
  parseJSON = genericParseJSON optionsBounced1AllOfData
instance ToJSON Bounced1AllOfData where
  toJSON = genericToJSON optionsBounced1AllOfData

optionsBounced1AllOfData :: Options
optionsBounced1AllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("bounced1AllOfDataTriggerUnderscoreid", "trigger_id")
      , ("bounced1AllOfDataCustomerUnderscoreid", "customer_id")
      , ("bounced1AllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("bounced1AllOfDataActionUnderscoreid", "action_id")
      , ("bounced1AllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("bounced1AllOfDataJourneyUnderscoreid", "journey_id")
      , ("bounced1AllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("bounced1AllOfDataIdentifiers", "identifiers")
      , ("bounced1AllOfDataCampaignUnderscoreid", "campaign_id")
      , ("bounced1AllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("bounced1AllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("bounced1AllOfDataContentUnderscoreid", "content_id")
      , ("bounced1AllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("bounced1AllOfDataRecipients", "recipients")
      ]


-- | Describes the device of the recipient who tapped the link.
data Bounced1AllOfDataAllOfRecipientsInner = Bounced1AllOfDataAllOfRecipientsInner
  { bounced1AllOfDataAllOfRecipientsInnerDeviceUnderscoreid :: Text -- ^ The device identifier/token.
  , bounced1AllOfDataAllOfRecipientsInnerDeviceUnderscoreplatform :: Text -- ^ The device's operating system.
  , bounced1AllOfDataAllOfRecipientsInnerFailureUnderscoremessage :: Text -- ^ The reason the push failed for this particular recipient.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Bounced1AllOfDataAllOfRecipientsInner where
  parseJSON = genericParseJSON optionsBounced1AllOfDataAllOfRecipientsInner
instance ToJSON Bounced1AllOfDataAllOfRecipientsInner where
  toJSON = genericToJSON optionsBounced1AllOfDataAllOfRecipientsInner

optionsBounced1AllOfDataAllOfRecipientsInner :: Options
optionsBounced1AllOfDataAllOfRecipientsInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("bounced1AllOfDataAllOfRecipientsInnerDeviceUnderscoreid", "device_id")
      , ("bounced1AllOfDataAllOfRecipientsInnerDeviceUnderscoreplatform", "device_platform")
      , ("bounced1AllOfDataAllOfRecipientsInnerFailureUnderscoremessage", "failure_message")
      ]


-- | 
data Bounced2 = Bounced2
  { bounced2EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , bounced2ObjectUnderscoretype :: Text -- ^ The event relates to an SMS message.
  , bounced2Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , bounced2Metric :: Text -- ^ The delivery provider was unable to deliver an SMS message.
  , bounced2Data :: Bounced2AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Bounced2 where
  parseJSON = genericParseJSON optionsBounced2
instance ToJSON Bounced2 where
  toJSON = genericToJSON optionsBounced2

optionsBounced2 :: Options
optionsBounced2 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("bounced2EventUnderscoreid", "event_id")
      , ("bounced2ObjectUnderscoretype", "object_type")
      , ("bounced2Timestamp", "timestamp")
      , ("bounced2Metric", "metric")
      , ("bounced2Data", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data Bounced2AllOfData = Bounced2AllOfData
  { bounced2AllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , bounced2AllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , bounced2AllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , bounced2AllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , bounced2AllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , bounced2AllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , bounced2AllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , bounced2AllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , bounced2AllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , bounced2AllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , bounced2AllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , bounced2AllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , bounced2AllOfDataFailureUnderscoremessage :: Text -- ^ Indicates the reason that an attempted message failed.
  , bounced2AllOfDataRecipient :: Text -- ^ The MSISDN (phone number) of the SMS recipient.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Bounced2AllOfData where
  parseJSON = genericParseJSON optionsBounced2AllOfData
instance ToJSON Bounced2AllOfData where
  toJSON = genericToJSON optionsBounced2AllOfData

optionsBounced2AllOfData :: Options
optionsBounced2AllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("bounced2AllOfDataTriggerUnderscoreid", "trigger_id")
      , ("bounced2AllOfDataCustomerUnderscoreid", "customer_id")
      , ("bounced2AllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("bounced2AllOfDataActionUnderscoreid", "action_id")
      , ("bounced2AllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("bounced2AllOfDataJourneyUnderscoreid", "journey_id")
      , ("bounced2AllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("bounced2AllOfDataIdentifiers", "identifiers")
      , ("bounced2AllOfDataCampaignUnderscoreid", "campaign_id")
      , ("bounced2AllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("bounced2AllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("bounced2AllOfDataContentUnderscoreid", "content_id")
      , ("bounced2AllOfDataFailureUnderscoremessage", "failure_message")
      , ("bounced2AllOfDataRecipient", "recipient")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data BouncedAllOfData = BouncedAllOfData
  { bouncedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , bouncedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , bouncedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , bouncedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , bouncedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , bouncedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , bouncedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , bouncedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , bouncedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , bouncedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , bouncedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , bouncedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , bouncedAllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , bouncedAllOfDataSubject :: Text -- ^ The subject of the email.
  , bouncedAllOfDataRecipient :: Text -- ^ The recipient address for an action.
  , bouncedAllOfDataFailureUnderscoremessage :: Text -- ^ Indicates the reason that an attempted message failed.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON BouncedAllOfData where
  parseJSON = genericParseJSON optionsBouncedAllOfData
instance ToJSON BouncedAllOfData where
  toJSON = genericToJSON optionsBouncedAllOfData

optionsBouncedAllOfData :: Options
optionsBouncedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("bouncedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("bouncedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("bouncedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("bouncedAllOfDataActionUnderscoreid", "action_id")
      , ("bouncedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("bouncedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("bouncedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("bouncedAllOfDataIdentifiers", "identifiers")
      , ("bouncedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("bouncedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("bouncedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("bouncedAllOfDataContentUnderscoreid", "content_id")
      , ("bouncedAllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("bouncedAllOfDataSubject", "subject")
      , ("bouncedAllOfDataRecipient", "recipient")
      , ("bouncedAllOfDataFailureUnderscoremessage", "failure_message")
      ]


-- | 
data BroadcastActionLinks200Response = BroadcastActionLinks200Response
  { broadcastActionLinks200ResponseLinks :: Maybe [BroadcastLinks200ResponseLinksInner] -- ^ Each object in the array represents a link in your broadcast variant.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON BroadcastActionLinks200Response where
  parseJSON = genericParseJSON optionsBroadcastActionLinks200Response
instance ToJSON BroadcastActionLinks200Response where
  toJSON = genericToJSON optionsBroadcastActionLinks200Response

optionsBroadcastActionLinks200Response :: Options
optionsBroadcastActionLinks200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("broadcastActionLinks200ResponseLinks", "links")
      ]


-- | 
data BroadcastActionObject = BroadcastActionObject
  { broadcastActionObjectId :: Maybe Int -- ^ The identifier for an action.
  , broadcastActionObjectBroadcastUnderscoreid :: Maybe Int -- ^ The identifier for a broadcast.
  , broadcastActionObjectDeduplicateUnderscoreid :: Maybe Text -- ^ An identifier in the format `id:timestamp` where the id is the id of the object you are working with (Campaigns, Deliveries, Exports, Identities, Newsletters, Segments, and Templates), and the timestamp is the last time the object was updated.
  , broadcastActionObjectName :: Maybe Text -- ^ The name of the action, if it exists.
  , broadcastActionObjectLayout :: Maybe Text -- ^ The layout used for the action, if it exists.
  , broadcastActionObjectCreated :: Maybe Int -- ^ The date time when the referenced ID was created.
  , broadcastActionObjectUpdated :: Maybe Int -- ^ The date time when the referenced ID was last updated.
  , broadcastActionObjectBody :: Maybe Text -- ^ The body of the action. You cannot modify the body if you created it with our drag-and-drop editor.
  , broadcastActionObjectType :: Maybe Text -- ^ The type of action.
  , broadcastActionObjectSendingUnderscorestate :: Maybe Text -- ^ Determines the sending behavior for the action. `automatic` sends the action automatically when triggered; `draft` queues drafts when the action is triggered; or `off` to disable the action.
  , broadcastActionObjectLanguage :: Maybe Text -- ^ The language variant for your message. If you don't use our [localization feature](/localization), or this is the default message, this value is an empty string.
  , broadcastActionObjectFrom :: Maybe Text -- ^ The address that the message is from, relevant if the action `type` is `email`.
  , broadcastActionObjectFromUnderscoreid :: Maybe Int -- ^ The identifier of the `from` address, commonly known as the \"sender\". You can [list your sender identities](#operation/listSenders) to match the ID to a specific address.
  , broadcastActionObjectReplyUnderscoreto :: Maybe Text -- ^ The address that receives replies for the message, if applicable.
  , broadcastActionObjectReplyUnderscoretoUnderscoreid :: Maybe Int -- ^ The identifier for the `reply_to` address, if applicable. You can [list your sender identities](#operation/listSenders) to match the ID to a specific address.
  , broadcastActionObjectPreprocessor :: Maybe Text -- ^ By default, we process CSS before emails leave Customer.io using Premailer. If your message included CSS and pre-processing is not disabled, this key indicates the pre-processor.
  , broadcastActionObjectRecipient :: Maybe Text -- ^ The recipient value. In general, your recipient is an attribute that you reference using liquid, like `{{customer.phone}}`, instead of a hard-coded value. If you set this field to a liquid statement like `{{customer.phone}}`, the field returns blank in `GET` requests because we populate the recipient from your liquid statement at send time.
  , broadcastActionObjectSubject :: Maybe Text -- ^ The subject line for an `email` action.
  , broadcastActionObjectBcc :: Maybe Text -- ^ The blind-copy address(es) for this action.
  , broadcastActionObjectFakeUnderscorebcc :: Maybe Bool -- ^ If true, rather than sending true copies to BCC addresses, Customer.io sends a copy of the message with the subject line containing the recipient address(es). 
  , broadcastActionObjectPreheaderUnderscoretext :: Maybe Text -- ^ Also known as \"preview text\", this specifies the small block of text shown in an end-user's email inbox, next to, or underneath, the subject line.
  , broadcastActionObjectHeaders :: Maybe (Map.Map String Text) -- ^ An object containing headers, where the key is the header name and the value is the header value. Header names and values must be strings and cannot contain any non-ASCII characters or empty spaces. Some headers are reserved and cannot be overwritten.
  , broadcastActionObjectBodyUnderscoreamp :: Maybe Text -- ^ If your message is an email, this is the AMP-enabled body of your message. If your recipient's email client doesn't support AMP, the `body` represents your fallback message.
  , broadcastActionObjectImageUnderscoreurl :: Maybe Text -- ^ The URL of the image in your SMS (MMS) message.
  , broadcastActionObjectUrl :: Maybe Text -- ^ The URL to send a webhook to, applies to `webhook` type actions.
  , broadcastActionObjectMethod :: Maybe Text -- ^ The HTTP method for your webhook.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON BroadcastActionObject where
  parseJSON = genericParseJSON optionsBroadcastActionObject
instance ToJSON BroadcastActionObject where
  toJSON = genericToJSON optionsBroadcastActionObject

optionsBroadcastActionObject :: Options
optionsBroadcastActionObject =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("broadcastActionObjectId", "id")
      , ("broadcastActionObjectBroadcastUnderscoreid", "broadcast_id")
      , ("broadcastActionObjectDeduplicateUnderscoreid", "deduplicate_id")
      , ("broadcastActionObjectName", "name")
      , ("broadcastActionObjectLayout", "layout")
      , ("broadcastActionObjectCreated", "created")
      , ("broadcastActionObjectUpdated", "updated")
      , ("broadcastActionObjectBody", "body")
      , ("broadcastActionObjectType", "type")
      , ("broadcastActionObjectSendingUnderscorestate", "sending_state")
      , ("broadcastActionObjectLanguage", "language")
      , ("broadcastActionObjectFrom", "from")
      , ("broadcastActionObjectFromUnderscoreid", "from_id")
      , ("broadcastActionObjectReplyUnderscoreto", "reply_to")
      , ("broadcastActionObjectReplyUnderscoretoUnderscoreid", "reply_to_id")
      , ("broadcastActionObjectPreprocessor", "preprocessor")
      , ("broadcastActionObjectRecipient", "recipient")
      , ("broadcastActionObjectSubject", "subject")
      , ("broadcastActionObjectBcc", "bcc")
      , ("broadcastActionObjectFakeUnderscorebcc", "fake_bcc")
      , ("broadcastActionObjectPreheaderUnderscoretext", "preheader_text")
      , ("broadcastActionObjectHeaders", "headers")
      , ("broadcastActionObjectBodyUnderscoreamp", "body_amp")
      , ("broadcastActionObjectImageUnderscoreurl", "image_url")
      , ("broadcastActionObjectUrl", "url")
      , ("broadcastActionObjectMethod", "method")
      ]


-- | 
data BroadcastActions200Response = BroadcastActions200Response
  { broadcastActions200ResponseActions :: Maybe [BroadcastActions200ResponseActionsInner] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON BroadcastActions200Response where
  parseJSON = genericParseJSON optionsBroadcastActions200Response
instance ToJSON BroadcastActions200Response where
  toJSON = genericToJSON optionsBroadcastActions200Response

optionsBroadcastActions200Response :: Options
optionsBroadcastActions200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("broadcastActions200ResponseActions", "actions")
      ]


-- | 
data BroadcastActions200ResponseActionsInner = BroadcastActions200ResponseActionsInner
  { broadcastActions200ResponseActionsInnerId :: Maybe Int -- ^ The identifier for an action.
  , broadcastActions200ResponseActionsInnerBroadcastUnderscoreid :: Maybe Int -- ^ The identifier for a broadcast.
  , broadcastActions200ResponseActionsInnerDeduplicateUnderscoreid :: Maybe Text -- ^ An identifier in the format `id:timestamp` where the id is the id of the object you are working with (Campaigns, Deliveries, Exports, Identities, Newsletters, Segments, and Templates), and the timestamp is the last time the object was updated.
  , broadcastActions200ResponseActionsInnerName :: Maybe Text -- ^ The name of the action, if it exists.
  , broadcastActions200ResponseActionsInnerLayout :: Maybe Text -- ^ The layout used for the action, if it exists.
  , broadcastActions200ResponseActionsInnerCreated :: Maybe Int -- ^ The date time when the referenced ID was created.
  , broadcastActions200ResponseActionsInnerUpdated :: Maybe Int -- ^ The date time when the referenced ID was last updated.
  , broadcastActions200ResponseActionsInnerBody :: Maybe Text -- ^ The body of the action. You cannot modify the body if you created it with our drag-and-drop editor.
  , broadcastActions200ResponseActionsInnerType :: Maybe Text -- ^ The type of action.
  , broadcastActions200ResponseActionsInnerSendingUnderscorestate :: Maybe Text -- ^ Determines the sending behavior for the action. `automatic` sends the action automatically when triggered; `draft` queues drafts when the action is triggered; or `off` to disable the action.
  , broadcastActions200ResponseActionsInnerLanguage :: Maybe Text -- ^ The language variant for your message. If you don't use our [localization feature](/localization), or this is the default message, this value is an empty string.
  , broadcastActions200ResponseActionsInnerFrom :: Maybe Text -- ^ The address that the message is from, relevant if the action `type` is `email`.
  , broadcastActions200ResponseActionsInnerFromUnderscoreid :: Maybe Int -- ^ The identifier of the `from` address, commonly known as the \"sender\". You can [list your sender identities](#operation/listSenders) to match the ID to a specific address.
  , broadcastActions200ResponseActionsInnerReplyUnderscoreto :: Maybe Text -- ^ The address that receives replies for the message, if applicable.
  , broadcastActions200ResponseActionsInnerReplyUnderscoretoUnderscoreid :: Maybe Int -- ^ The identifier for the `reply_to` address, if applicable. You can [list your sender identities](#operation/listSenders) to match the ID to a specific address.
  , broadcastActions200ResponseActionsInnerPreprocessor :: Maybe Text -- ^ By default, we process CSS before emails leave Customer.io using Premailer. If your message included CSS and pre-processing is not disabled, this key indicates the pre-processor.
  , broadcastActions200ResponseActionsInnerRecipient :: Maybe Text -- ^ The recipient value. In general, your recipient is an attribute that you reference using liquid, like `{{customer.phone}}`, instead of a hard-coded value. If you set this field to a liquid statement like `{{customer.phone}}`, the field returns blank in `GET` requests because we populate the recipient from your liquid statement at send time.
  , broadcastActions200ResponseActionsInnerSubject :: Maybe Text -- ^ The subject line for an `email` action.
  , broadcastActions200ResponseActionsInnerBcc :: Maybe Text -- ^ The blind-copy address(es) for this action.
  , broadcastActions200ResponseActionsInnerFakeUnderscorebcc :: Maybe Bool -- ^ If true, rather than sending true copies to BCC addresses, Customer.io sends a copy of the message with the subject line containing the recipient address(es). 
  , broadcastActions200ResponseActionsInnerPreheaderUnderscoretext :: Maybe Text -- ^ Also known as \"preview text\", this specifies the small block of text shown in an end-user's email inbox, next to, or underneath, the subject line.
  , broadcastActions200ResponseActionsInnerHeaders :: Maybe (Map.Map String Text) -- ^ An object containing headers, where the key is the header name and the value is the header value. Header names and values must be strings and cannot contain any non-ASCII characters or empty spaces. Some headers are reserved and cannot be overwritten.
  , broadcastActions200ResponseActionsInnerBodyUnderscoreamp :: Maybe Text -- ^ If your message is an email, this is the AMP-enabled body of your message. If your recipient's email client doesn't support AMP, the `body` represents your fallback message.
  , broadcastActions200ResponseActionsInnerImageUnderscoreurl :: Maybe Text -- ^ The URL of the image in your SMS (MMS) message.
  , broadcastActions200ResponseActionsInnerUrl :: Maybe Text -- ^ The URL to send a webhook to, applies to `webhook` type actions.
  , broadcastActions200ResponseActionsInnerMethod :: Maybe Text -- ^ The HTTP method for your webhook.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON BroadcastActions200ResponseActionsInner where
  parseJSON = genericParseJSON optionsBroadcastActions200ResponseActionsInner
instance ToJSON BroadcastActions200ResponseActionsInner where
  toJSON = genericToJSON optionsBroadcastActions200ResponseActionsInner

optionsBroadcastActions200ResponseActionsInner :: Options
optionsBroadcastActions200ResponseActionsInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("broadcastActions200ResponseActionsInnerId", "id")
      , ("broadcastActions200ResponseActionsInnerBroadcastUnderscoreid", "broadcast_id")
      , ("broadcastActions200ResponseActionsInnerDeduplicateUnderscoreid", "deduplicate_id")
      , ("broadcastActions200ResponseActionsInnerName", "name")
      , ("broadcastActions200ResponseActionsInnerLayout", "layout")
      , ("broadcastActions200ResponseActionsInnerCreated", "created")
      , ("broadcastActions200ResponseActionsInnerUpdated", "updated")
      , ("broadcastActions200ResponseActionsInnerBody", "body")
      , ("broadcastActions200ResponseActionsInnerType", "type")
      , ("broadcastActions200ResponseActionsInnerSendingUnderscorestate", "sending_state")
      , ("broadcastActions200ResponseActionsInnerLanguage", "language")
      , ("broadcastActions200ResponseActionsInnerFrom", "from")
      , ("broadcastActions200ResponseActionsInnerFromUnderscoreid", "from_id")
      , ("broadcastActions200ResponseActionsInnerReplyUnderscoreto", "reply_to")
      , ("broadcastActions200ResponseActionsInnerReplyUnderscoretoUnderscoreid", "reply_to_id")
      , ("broadcastActions200ResponseActionsInnerPreprocessor", "preprocessor")
      , ("broadcastActions200ResponseActionsInnerRecipient", "recipient")
      , ("broadcastActions200ResponseActionsInnerSubject", "subject")
      , ("broadcastActions200ResponseActionsInnerBcc", "bcc")
      , ("broadcastActions200ResponseActionsInnerFakeUnderscorebcc", "fake_bcc")
      , ("broadcastActions200ResponseActionsInnerPreheaderUnderscoretext", "preheader_text")
      , ("broadcastActions200ResponseActionsInnerHeaders", "headers")
      , ("broadcastActions200ResponseActionsInnerBodyUnderscoreamp", "body_amp")
      , ("broadcastActions200ResponseActionsInnerImageUnderscoreurl", "image_url")
      , ("broadcastActions200ResponseActionsInnerUrl", "url")
      , ("broadcastActions200ResponseActionsInnerMethod", "method")
      ]


-- | 
data BroadcastErrors200Response = BroadcastErrors200Response
  { broadcastErrors200ResponseErrors :: Maybe [Text] -- ^ A list of errors in the format `line <x>: <error text>` to help you troubleshoot errors associated with your audience or data file.
  , broadcastErrors200ResponseNext :: Maybe Text -- ^ Indicates the next page of results. Add `?start=<next_value>` to the request to get the next page of results.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON BroadcastErrors200Response where
  parseJSON = genericParseJSON optionsBroadcastErrors200Response
instance ToJSON BroadcastErrors200Response where
  toJSON = genericToJSON optionsBroadcastErrors200Response

optionsBroadcastErrors200Response :: Options
optionsBroadcastErrors200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("broadcastErrors200ResponseErrors", "errors")
      , ("broadcastErrors200ResponseNext", "next")
      ]


-- | 
data BroadcastLinks200Response = BroadcastLinks200Response
  { broadcastLinks200ResponseLinks :: Maybe [BroadcastLinks200ResponseLinksInner] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON BroadcastLinks200Response where
  parseJSON = genericParseJSON optionsBroadcastLinks200Response
instance ToJSON BroadcastLinks200Response where
  toJSON = genericToJSON optionsBroadcastLinks200Response

optionsBroadcastLinks200Response :: Options
optionsBroadcastLinks200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("broadcastLinks200ResponseLinks", "links")
      ]


-- | 
data BroadcastLinks200ResponseLinksInner = BroadcastLinks200ResponseLinksInner
  { broadcastLinks200ResponseLinksInnerLink :: Maybe BroadcastLinks200ResponseLinksInnerLink -- ^ 
  , broadcastLinks200ResponseLinksInnerMetric :: Maybe BroadcastLinks200ResponseLinksInnerMetric -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON BroadcastLinks200ResponseLinksInner where
  parseJSON = genericParseJSON optionsBroadcastLinks200ResponseLinksInner
instance ToJSON BroadcastLinks200ResponseLinksInner where
  toJSON = genericToJSON optionsBroadcastLinks200ResponseLinksInner

optionsBroadcastLinks200ResponseLinksInner :: Options
optionsBroadcastLinks200ResponseLinksInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("broadcastLinks200ResponseLinksInnerLink", "link")
      , ("broadcastLinks200ResponseLinksInnerMetric", "metric")
      ]


-- | 
data BroadcastLinks200ResponseLinksInnerLink = BroadcastLinks200ResponseLinksInnerLink
  { broadcastLinks200ResponseLinksInnerLinkId :: Maybe Int -- ^ The ID of the link.
  , broadcastLinks200ResponseLinksInnerLinkHref :: Maybe Text -- ^ The link destination—a URL, mailto, etc.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON BroadcastLinks200ResponseLinksInnerLink where
  parseJSON = genericParseJSON optionsBroadcastLinks200ResponseLinksInnerLink
instance ToJSON BroadcastLinks200ResponseLinksInnerLink where
  toJSON = genericToJSON optionsBroadcastLinks200ResponseLinksInnerLink

optionsBroadcastLinks200ResponseLinksInnerLink :: Options
optionsBroadcastLinks200ResponseLinksInnerLink =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("broadcastLinks200ResponseLinksInnerLinkId", "id")
      , ("broadcastLinks200ResponseLinksInnerLinkHref", "href")
      ]


-- | Contains metrics for the link.
data BroadcastLinks200ResponseLinksInnerMetric = BroadcastLinks200ResponseLinksInnerMetric
  { broadcastLinks200ResponseLinksInnerMetricSeries :: Maybe BroadcastLinks200ResponseLinksInnerMetricSeries -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON BroadcastLinks200ResponseLinksInnerMetric where
  parseJSON = genericParseJSON optionsBroadcastLinks200ResponseLinksInnerMetric
instance ToJSON BroadcastLinks200ResponseLinksInnerMetric where
  toJSON = genericToJSON optionsBroadcastLinks200ResponseLinksInnerMetric

optionsBroadcastLinks200ResponseLinksInnerMetric :: Options
optionsBroadcastLinks200ResponseLinksInnerMetric =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("broadcastLinks200ResponseLinksInnerMetricSeries", "series")
      ]


-- | 
data BroadcastLinks200ResponseLinksInnerMetricSeries = BroadcastLinks200ResponseLinksInnerMetricSeries
  { broadcastLinks200ResponseLinksInnerMetricSeriesClicked :: Maybe [Int] -- ^ An array of results from oldest to newest, where each result indicates a period.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON BroadcastLinks200ResponseLinksInnerMetricSeries where
  parseJSON = genericParseJSON optionsBroadcastLinks200ResponseLinksInnerMetricSeries
instance ToJSON BroadcastLinks200ResponseLinksInnerMetricSeries where
  toJSON = genericToJSON optionsBroadcastLinks200ResponseLinksInnerMetricSeries

optionsBroadcastLinks200ResponseLinksInnerMetricSeries :: Options
optionsBroadcastLinks200ResponseLinksInnerMetricSeries =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("broadcastLinks200ResponseLinksInnerMetricSeriesClicked", "clicked")
      ]


-- | 
data BroadcastMessages200Response = BroadcastMessages200Response
  { broadcastMessages200ResponseMessages :: Maybe [BroadcastMessages200ResponseMessagesInner] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON BroadcastMessages200Response where
  parseJSON = genericParseJSON optionsBroadcastMessages200Response
instance ToJSON BroadcastMessages200Response where
  toJSON = genericToJSON optionsBroadcastMessages200Response

optionsBroadcastMessages200Response :: Options
optionsBroadcastMessages200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("broadcastMessages200ResponseMessages", "messages")
      ]


-- | Describes an individual message delivery. The object contains keys for all possible parents of the message (&#x60;newsletter_id&#x60;, &#x60;broadcast_id&#x60;, etc) but only the parents of the delivery are populated. Other parent IDs are null.
data BroadcastMessages200ResponseMessagesInner = BroadcastMessages200ResponseMessagesInner
  { broadcastMessages200ResponseMessagesInnerId :: Maybe Text -- ^ The identifier for a delivery—the instance of a message intended for an individual recipient.
  , broadcastMessages200ResponseMessagesInnerDeduplicateUnderscoreid :: Maybe Text -- ^ An identifier in the format `id:timestamp` where the id is the id of the object you are working with (Campaigns, Deliveries, Exports, Identities, Newsletters, Segments, and Templates), and the timestamp is the last time the object was updated.
  , broadcastMessages200ResponseMessagesInnerMessageUnderscoretemplateUnderscoreid :: Maybe Int -- ^ The identifier of the message template used to create a message.
  , broadcastMessages200ResponseMessagesInnerCustomerUnderscoreid :: Maybe Text -- ^ The ID of a customer profile, analogous to a \"person\" in the UI. If your workspace supports multiple identifiers (email and ID), this value can be null.
  , broadcastMessages200ResponseMessagesInnerCustomerUnderscoreidentifiers :: Maybe ListActivities200ResponseActivitiesInnerCustomerIdentifiers -- ^ 
  , broadcastMessages200ResponseMessagesInnerRecipient :: Maybe Text -- ^ The recipient address for an action.
  , broadcastMessages200ResponseMessagesInnerSubject :: Maybe Text -- ^ The subject line for an `email` action.
  , broadcastMessages200ResponseMessagesInnerMetrics :: Maybe BroadcastMessages200ResponseMessagesInnerMetrics -- ^ 
  , broadcastMessages200ResponseMessagesInnerCreated :: Maybe Int -- ^ The date time when the referenced ID was created.
  , broadcastMessages200ResponseMessagesInnerFailureUnderscoremessage :: Maybe Text -- ^ Explains why a message failed, if applicable.
  , broadcastMessages200ResponseMessagesInnerCampaignUnderscoreid :: Maybe Int -- ^ The identifier for a campaign.
  , broadcastMessages200ResponseMessagesInnerActionUnderscoreid :: Maybe Int -- ^ The identifier for an action.
  , broadcastMessages200ResponseMessagesInnerParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , broadcastMessages200ResponseMessagesInnerNewsletterUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter.
  , broadcastMessages200ResponseMessagesInnerContentUnderscoreid :: Maybe Int -- ^ The identifier for a message in a newsletter. Newsletters can have multiple content IDs (for multi-language messages or A/B tests).
  , broadcastMessages200ResponseMessagesInnerBroadcastUnderscoreid :: Maybe Int -- ^ The identifier for a broadcast.
  , broadcastMessages200ResponseMessagesInnerTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , broadcastMessages200ResponseMessagesInnerType :: Maybe Text -- ^ The type of message/action.
  , broadcastMessages200ResponseMessagesInnerForgotten :: Maybe Bool -- ^ If true message contents are not retained by Customer.io.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON BroadcastMessages200ResponseMessagesInner where
  parseJSON = genericParseJSON optionsBroadcastMessages200ResponseMessagesInner
instance ToJSON BroadcastMessages200ResponseMessagesInner where
  toJSON = genericToJSON optionsBroadcastMessages200ResponseMessagesInner

optionsBroadcastMessages200ResponseMessagesInner :: Options
optionsBroadcastMessages200ResponseMessagesInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("broadcastMessages200ResponseMessagesInnerId", "id")
      , ("broadcastMessages200ResponseMessagesInnerDeduplicateUnderscoreid", "deduplicate_id")
      , ("broadcastMessages200ResponseMessagesInnerMessageUnderscoretemplateUnderscoreid", "message_template_id")
      , ("broadcastMessages200ResponseMessagesInnerCustomerUnderscoreid", "customer_id")
      , ("broadcastMessages200ResponseMessagesInnerCustomerUnderscoreidentifiers", "customer_identifiers")
      , ("broadcastMessages200ResponseMessagesInnerRecipient", "recipient")
      , ("broadcastMessages200ResponseMessagesInnerSubject", "subject")
      , ("broadcastMessages200ResponseMessagesInnerMetrics", "metrics")
      , ("broadcastMessages200ResponseMessagesInnerCreated", "created")
      , ("broadcastMessages200ResponseMessagesInnerFailureUnderscoremessage", "failure_message")
      , ("broadcastMessages200ResponseMessagesInnerCampaignUnderscoreid", "campaign_id")
      , ("broadcastMessages200ResponseMessagesInnerActionUnderscoreid", "action_id")
      , ("broadcastMessages200ResponseMessagesInnerParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("broadcastMessages200ResponseMessagesInnerNewsletterUnderscoreid", "newsletter_id")
      , ("broadcastMessages200ResponseMessagesInnerContentUnderscoreid", "content_id")
      , ("broadcastMessages200ResponseMessagesInnerBroadcastUnderscoreid", "broadcast_id")
      , ("broadcastMessages200ResponseMessagesInnerTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("broadcastMessages200ResponseMessagesInnerType", "type")
      , ("broadcastMessages200ResponseMessagesInnerForgotten", "forgotten")
      ]


-- | Metrics for an individual instance of a message; each item in the object represents the timestamp when a message achieved a particular metric. This object only contains metrics that have been recorded.
data BroadcastMessages200ResponseMessagesInnerMetrics = BroadcastMessages200ResponseMessagesInnerMetrics
  { broadcastMessages200ResponseMessagesInnerMetricsBounced :: Maybe Int -- ^ The timestamp when the message `bounced`.
  , broadcastMessages200ResponseMessagesInnerMetricsClicked :: Maybe Int -- ^ The timestamp when the message was `clicked`.
  , broadcastMessages200ResponseMessagesInnerMetricsHumanUnderscoreclicked :: Maybe Int -- ^ The number of `clicked` messages excluding machine clicks. This metric is reliable starting April 20, 2025. [Learn more](/journeys/analytics/#delivery-metrics).
  , broadcastMessages200ResponseMessagesInnerMetricsPrefetchUnderscoreclicked :: Maybe Int -- ^ The number of `clicked` messages attributed to machines. This metric is reliable starting April 20, 2025.
  , broadcastMessages200ResponseMessagesInnerMetricsConverted :: Maybe Int -- ^ The timestamp when the message was `converted`.
  , broadcastMessages200ResponseMessagesInnerMetricsCreated :: Maybe Int -- ^ The timestamp when the message was `created`.
  , broadcastMessages200ResponseMessagesInnerMetricsDelivered :: Maybe Int -- ^ The timestamp when the message was `delivered`.
  , broadcastMessages200ResponseMessagesInnerMetricsDrafted :: Maybe Int -- ^ The timestamp when the message was `drafted`.
  , broadcastMessages200ResponseMessagesInnerMetricsDropped :: Maybe Int -- ^ The timestamp when the message was `dropped`.
  , broadcastMessages200ResponseMessagesInnerMetricsFailed :: Maybe Int -- ^ The timestamp when the message `failed`.
  , broadcastMessages200ResponseMessagesInnerMetricsOpened :: Maybe Int -- ^ The timestamp when the message was `opened`.
  , broadcastMessages200ResponseMessagesInnerMetricsHumanUnderscoreopened :: Maybe Int -- ^ The number of `opened` messages excluding machine opens. This metric is reliable starting March 20, 2025. [Learn more](/journeys/analytics/#delivery-metrics).
  , broadcastMessages200ResponseMessagesInnerMetricsPrefetchUnderscoreopened :: Maybe Int -- ^ The number of `opened` messages attributed to machines. This metric is reliable starting March 20, 2025.
  , broadcastMessages200ResponseMessagesInnerMetricsSent :: Maybe Int -- ^ The timestamp when the message was `sent`.
  , broadcastMessages200ResponseMessagesInnerMetricsSpammed :: Maybe Int -- ^ The timestamp when the message was marked as spam.
  , broadcastMessages200ResponseMessagesInnerMetricsUndeliverable :: Maybe Int -- ^ The timestamp when the message became `undeliverable`.
  , broadcastMessages200ResponseMessagesInnerMetricsUnsubscribed :: Maybe Int -- ^ The timestamp when a person unsubscribed based on this message.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON BroadcastMessages200ResponseMessagesInnerMetrics where
  parseJSON = genericParseJSON optionsBroadcastMessages200ResponseMessagesInnerMetrics
instance ToJSON BroadcastMessages200ResponseMessagesInnerMetrics where
  toJSON = genericToJSON optionsBroadcastMessages200ResponseMessagesInnerMetrics

optionsBroadcastMessages200ResponseMessagesInnerMetrics :: Options
optionsBroadcastMessages200ResponseMessagesInnerMetrics =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("broadcastMessages200ResponseMessagesInnerMetricsBounced", "bounced")
      , ("broadcastMessages200ResponseMessagesInnerMetricsClicked", "clicked")
      , ("broadcastMessages200ResponseMessagesInnerMetricsHumanUnderscoreclicked", "human_clicked")
      , ("broadcastMessages200ResponseMessagesInnerMetricsPrefetchUnderscoreclicked", "prefetch_clicked")
      , ("broadcastMessages200ResponseMessagesInnerMetricsConverted", "converted")
      , ("broadcastMessages200ResponseMessagesInnerMetricsCreated", "created")
      , ("broadcastMessages200ResponseMessagesInnerMetricsDelivered", "delivered")
      , ("broadcastMessages200ResponseMessagesInnerMetricsDrafted", "drafted")
      , ("broadcastMessages200ResponseMessagesInnerMetricsDropped", "dropped")
      , ("broadcastMessages200ResponseMessagesInnerMetricsFailed", "failed")
      , ("broadcastMessages200ResponseMessagesInnerMetricsOpened", "opened")
      , ("broadcastMessages200ResponseMessagesInnerMetricsHumanUnderscoreopened", "human_opened")
      , ("broadcastMessages200ResponseMessagesInnerMetricsPrefetchUnderscoreopened", "prefetch_opened")
      , ("broadcastMessages200ResponseMessagesInnerMetricsSent", "sent")
      , ("broadcastMessages200ResponseMessagesInnerMetricsSpammed", "spammed")
      , ("broadcastMessages200ResponseMessagesInnerMetricsUndeliverable", "undeliverable")
      , ("broadcastMessages200ResponseMessagesInnerMetricsUnsubscribed", "unsubscribed")
      ]


-- | 
data BroadcastMetrics200Response = BroadcastMetrics200Response
  { broadcastMetrics200ResponseMetric :: Maybe BroadcastMetrics200ResponseMetric -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON BroadcastMetrics200Response where
  parseJSON = genericParseJSON optionsBroadcastMetrics200Response
instance ToJSON BroadcastMetrics200Response where
  toJSON = genericToJSON optionsBroadcastMetrics200Response

optionsBroadcastMetrics200Response :: Options
optionsBroadcastMetrics200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("broadcastMetrics200ResponseMetric", "metric")
      ]


-- | 
data BroadcastMetrics200ResponseMetric = BroadcastMetrics200ResponseMetric
  { broadcastMetrics200ResponseMetricSeries :: Maybe BroadcastMetrics200ResponseMetricSeries -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON BroadcastMetrics200ResponseMetric where
  parseJSON = genericParseJSON optionsBroadcastMetrics200ResponseMetric
instance ToJSON BroadcastMetrics200ResponseMetric where
  toJSON = genericToJSON optionsBroadcastMetrics200ResponseMetric

optionsBroadcastMetrics200ResponseMetric :: Options
optionsBroadcastMetrics200ResponseMetric =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("broadcastMetrics200ResponseMetricSeries", "series")
      ]


-- | 
data BroadcastMetrics200ResponseMetricSeries = BroadcastMetrics200ResponseMetricSeries
  { broadcastMetrics200ResponseMetricSeries2xx :: Maybe [Int] -- ^ 2xx responses by period, representative of webhook performance.
  , broadcastMetrics200ResponseMetricSeries3xx :: Maybe [Int] -- ^ 3xx responses by period, representative of webhook performance.
  , broadcastMetrics200ResponseMetricSeries4xx :: Maybe [Int] -- ^ 4xx responses by period, representative of webhook performance.
  , broadcastMetrics200ResponseMetricSeries5xx :: Maybe [Int] -- ^ 5xx responses by period, representative of webhook performance.
  , broadcastMetrics200ResponseMetricSeriesAttempted :: Maybe [Int] -- ^ The number of `attempted` messages.
  , broadcastMetrics200ResponseMetricSeriesBounced :: Maybe [Int] -- ^ The number of `bounced` messages.
  , broadcastMetrics200ResponseMetricSeriesClicked :: Maybe [Int] -- ^ The number of `clicked` messages.
  , broadcastMetrics200ResponseMetricSeriesHumanUnderscoreclicked :: Maybe [Int] -- ^ The number of `clicked` emails excluding machine clicks. This metric is reliable starting April 20, 2025. [Learn more](/journeys/analytics/#delivery-metrics).
  , broadcastMetrics200ResponseMetricSeriesPrefetchUnderscoreclicked :: Maybe [Int] -- ^ The number of `clicked` emails attributed to machines. This metric is reliable starting April 20, 2025.
  , broadcastMetrics200ResponseMetricSeriesConverted :: Maybe [Int] -- ^ The number of `converted` messages.
  , broadcastMetrics200ResponseMetricSeriesCreated :: Maybe [Int] -- ^ The number of `created` messages.
  , broadcastMetrics200ResponseMetricSeriesDeferred :: Maybe [Int] -- ^ The number of `deferred` messages.
  , broadcastMetrics200ResponseMetricSeriesDelivered :: Maybe [Int] -- ^ The number of `delivered` messages.
  , broadcastMetrics200ResponseMetricSeriesDrafted :: Maybe [Int] -- ^ The number of `drafted` messages.
  , broadcastMetrics200ResponseMetricSeriesFailed :: Maybe [Int] -- ^ The number of `failed` messages.
  , broadcastMetrics200ResponseMetricSeriesOpened :: Maybe [Int] -- ^ The number of `opened` messages.
  , broadcastMetrics200ResponseMetricSeriesHumanUnderscoreopened :: Maybe [Int] -- ^ The number of `opened` emails excluding machine opens. This metric is reliable starting March 20, 2025. [Learn more](/journeys/analytics/#delivery-metrics).
  , broadcastMetrics200ResponseMetricSeriesPrefetchUnderscoreopened :: Maybe [Int] -- ^ The number of `opened` emails attributed to machines. This metric is reliable starting March 20, 2025.
  , broadcastMetrics200ResponseMetricSeriesSent :: Maybe [Int] -- ^ The number of sent messages.
  , broadcastMetrics200ResponseMetricSeriesSpammed :: Maybe [Int] -- ^ The number of spam complaints.
  , broadcastMetrics200ResponseMetricSeriesSuppressed :: Maybe [Int] -- ^ The number of `suppressed` messages.
  , broadcastMetrics200ResponseMetricSeriesUndeliverable :: Maybe [Int] -- ^ The number of `undeliverable` messages.
  , broadcastMetrics200ResponseMetricSeriesTopicUnderscoreunsubscribed :: Maybe [Int] -- ^ The number of topic unsubscribes in a given period.
  , broadcastMetrics200ResponseMetricSeriesUnsubscribed :: Maybe [Int] -- ^ The number of unsubscribes attributed to the campaign or message.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON BroadcastMetrics200ResponseMetricSeries where
  parseJSON = genericParseJSON optionsBroadcastMetrics200ResponseMetricSeries
instance ToJSON BroadcastMetrics200ResponseMetricSeries where
  toJSON = genericToJSON optionsBroadcastMetrics200ResponseMetricSeries

optionsBroadcastMetrics200ResponseMetricSeries :: Options
optionsBroadcastMetrics200ResponseMetricSeries =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("broadcastMetrics200ResponseMetricSeries2xx", "2xx")
      , ("broadcastMetrics200ResponseMetricSeries3xx", "3xx")
      , ("broadcastMetrics200ResponseMetricSeries4xx", "4xx")
      , ("broadcastMetrics200ResponseMetricSeries5xx", "5xx")
      , ("broadcastMetrics200ResponseMetricSeriesAttempted", "attempted")
      , ("broadcastMetrics200ResponseMetricSeriesBounced", "bounced")
      , ("broadcastMetrics200ResponseMetricSeriesClicked", "clicked")
      , ("broadcastMetrics200ResponseMetricSeriesHumanUnderscoreclicked", "human_clicked")
      , ("broadcastMetrics200ResponseMetricSeriesPrefetchUnderscoreclicked", "prefetch_clicked")
      , ("broadcastMetrics200ResponseMetricSeriesConverted", "converted")
      , ("broadcastMetrics200ResponseMetricSeriesCreated", "created")
      , ("broadcastMetrics200ResponseMetricSeriesDeferred", "deferred")
      , ("broadcastMetrics200ResponseMetricSeriesDelivered", "delivered")
      , ("broadcastMetrics200ResponseMetricSeriesDrafted", "drafted")
      , ("broadcastMetrics200ResponseMetricSeriesFailed", "failed")
      , ("broadcastMetrics200ResponseMetricSeriesOpened", "opened")
      , ("broadcastMetrics200ResponseMetricSeriesHumanUnderscoreopened", "human_opened")
      , ("broadcastMetrics200ResponseMetricSeriesPrefetchUnderscoreopened", "prefetch_opened")
      , ("broadcastMetrics200ResponseMetricSeriesSent", "sent")
      , ("broadcastMetrics200ResponseMetricSeriesSpammed", "spammed")
      , ("broadcastMetrics200ResponseMetricSeriesSuppressed", "suppressed")
      , ("broadcastMetrics200ResponseMetricSeriesUndeliverable", "undeliverable")
      , ("broadcastMetrics200ResponseMetricSeriesTopicUnderscoreunsubscribed", "topic_unsubscribed")
      , ("broadcastMetrics200ResponseMetricSeriesUnsubscribed", "unsubscribed")
      ]


-- | 
data BroadcastObject = BroadcastObject
  { broadcastObjectId :: Maybe Int -- ^ The identifier for a broadcast.
  , broadcastObjectDeduplicateUnderscoreid :: Maybe Text -- ^ An identifier in the format `id:timestamp` where the id is the id of the object you are working with (Campaigns, Deliveries, Exports, Identities, Newsletters, Segments, and Templates), and the timestamp is the last time the object was updated.
  , broadcastObjectName :: Maybe Text -- ^ The name of the broadcast.
  , broadcastObjectType :: Maybe Text -- ^ The type of broadcast.
  , broadcastObjectCreated :: Maybe Int -- ^ The date time when the referenced ID was created.
  , broadcastObjectUpdated :: Maybe Int -- ^ The date time when the referenced ID was last updated.
  , broadcastObjectActive :: Maybe Bool -- ^ If true, the broadcast is active.
  , broadcastObjectState :: Maybe Text -- ^ The state of the broadcast.
  , broadcastObjectActions :: Maybe [ListBroadcasts200ResponseBroadcastsInnerActionsInner] -- ^ A list of actions used by the broadcast.
  , broadcastObjectMsgUnderscoretemplateUnderscoreids :: Maybe [ListBroadcasts200ResponseBroadcastsInnerMsgTemplateIdsInner] -- ^ Indicates the message template(s) used in this broadcast.
  , broadcastObjectFirstUnderscorestarted :: Maybe Int -- ^ The date and time when you activated the broadcast.
  , broadcastObjectTags :: Maybe [Text] -- ^ An array of tags you set on this broadcast.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON BroadcastObject where
  parseJSON = genericParseJSON optionsBroadcastObject
instance ToJSON BroadcastObject where
  toJSON = genericToJSON optionsBroadcastObject

optionsBroadcastObject :: Options
optionsBroadcastObject =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("broadcastObjectId", "id")
      , ("broadcastObjectDeduplicateUnderscoreid", "deduplicate_id")
      , ("broadcastObjectName", "name")
      , ("broadcastObjectType", "type")
      , ("broadcastObjectCreated", "created")
      , ("broadcastObjectUpdated", "updated")
      , ("broadcastObjectActive", "active")
      , ("broadcastObjectState", "state")
      , ("broadcastObjectActions", "actions")
      , ("broadcastObjectMsgUnderscoretemplateUnderscoreids", "msg_template_ids")
      , ("broadcastObjectFirstUnderscorestarted", "first_started")
      , ("broadcastObjectTags", "tags")
      ]


-- | You can get triggers to know when you triggered a broadcast and whether or not it&#39;s been processed.
data BroadcastStatus200Response = BroadcastStatus200Response
  { broadcastStatus200ResponseId :: Maybe Int -- ^ The identifier for a broadcast trigger.
  , broadcastStatus200ResponseBroadcastUnderscoreid :: Maybe Int -- ^ The identifier for a broadcast.
  , broadcastStatus200ResponseCreatedUnderscoreat :: Maybe Int -- ^ The date time when the referenced ID was created.
  , broadcastStatus200ResponseProcessedUnderscoreat :: Maybe Int -- ^ The date-time when Customer.io processed the trigger.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON BroadcastStatus200Response where
  parseJSON = genericParseJSON optionsBroadcastStatus200Response
instance ToJSON BroadcastStatus200Response where
  toJSON = genericToJSON optionsBroadcastStatus200Response

optionsBroadcastStatus200Response :: Options
optionsBroadcastStatus200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("broadcastStatus200ResponseId", "id")
      , ("broadcastStatus200ResponseBroadcastUnderscoreid", "broadcast_id")
      , ("broadcastStatus200ResponseCreatedUnderscoreat", "created_at")
      , ("broadcastStatus200ResponseProcessedUnderscoreat", "processed_at")
      ]


-- | You can get triggers to know when you triggered a broadcast and whether or not it&#39;s been processed.
data BroadcastTriggerObject = BroadcastTriggerObject
  { broadcastTriggerObjectId :: Maybe Int -- ^ The identifier for a broadcast trigger.
  , broadcastTriggerObjectBroadcastUnderscoreid :: Maybe Int -- ^ The identifier for a broadcast.
  , broadcastTriggerObjectCreatedUnderscoreat :: Maybe Int -- ^ The date time when the referenced ID was created.
  , broadcastTriggerObjectProcessedUnderscoreat :: Maybe Int -- ^ The date-time when Customer.io processed the trigger.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON BroadcastTriggerObject where
  parseJSON = genericParseJSON optionsBroadcastTriggerObject
instance ToJSON BroadcastTriggerObject where
  toJSON = genericToJSON optionsBroadcastTriggerObject

optionsBroadcastTriggerObject :: Options
optionsBroadcastTriggerObject =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("broadcastTriggerObjectId", "id")
      , ("broadcastTriggerObjectBroadcastUnderscoreid", "broadcast_id")
      , ("broadcastTriggerObjectCreatedUnderscoreat", "created_at")
      , ("broadcastTriggerObjectProcessedUnderscoreat", "processed_at")
      ]


-- | 
data CIOObjectID = CIOObjectID
  { cIOObjectIDCioUnderscoreobjectUnderscoreid :: Text -- ^ A unique value that Customer.io sets for an object when you create it. This ID is immutable.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON CIOObjectID where
  parseJSON = genericParseJSON optionsCIOObjectID
instance ToJSON CIOObjectID where
  toJSON = genericToJSON optionsCIOObjectID

optionsCIOObjectID :: Options
optionsCIOObjectID =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("cIOObjectIDCioUnderscoreobjectUnderscoreid", "cio_object_id")
      ]


-- | 
data CIOObjectIDUpdatesOnly = CIOObjectIDUpdatesOnly
  { cIOObjectIDUpdatesOnlyCioUnderscoreobjectUnderscoreid :: Text -- ^ A unique value that Customer.io sets for an object when you create it. This ID is immutable.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON CIOObjectIDUpdatesOnly where
  parseJSON = genericParseJSON optionsCIOObjectIDUpdatesOnly
instance ToJSON CIOObjectIDUpdatesOnly where
  toJSON = genericToJSON optionsCIOObjectIDUpdatesOnly

optionsCIOObjectIDUpdatesOnly :: Options
optionsCIOObjectIDUpdatesOnly =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("cIOObjectIDUpdatesOnlyCioUnderscoreobjectUnderscoreid", "cio_object_id")
      ]


-- | 
data Campaign = Campaign
  { campaignCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , campaignCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , campaignDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , campaignActionUnderscoreid :: Int -- ^ The identifier for an action.
  , campaignJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , campaignParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , campaignTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Campaign where
  parseJSON = genericParseJSON optionsCampaign
instance ToJSON Campaign where
  toJSON = genericToJSON optionsCampaign

optionsCampaign :: Options
optionsCampaign =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("campaignCampaignUnderscoreid", "campaign_id")
      , ("campaignCustomerUnderscoreid", "customer_id")
      , ("campaignDeliveryUnderscoreid", "delivery_id")
      , ("campaignActionUnderscoreid", "action_id")
      , ("campaignJourneyUnderscoreid", "journey_id")
      , ("campaignParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("campaignTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      ]


-- | 
data Campaign1 = Campaign1
  { campaign1CampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , campaign1CustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , campaign1DeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , campaign1ActionUnderscoreid :: Int -- ^ The identifier for an action.
  , campaign1JourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , campaign1Identifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , campaign1ParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , campaign1TriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Campaign1 where
  parseJSON = genericParseJSON optionsCampaign1
instance ToJSON Campaign1 where
  toJSON = genericToJSON optionsCampaign1

optionsCampaign1 :: Options
optionsCampaign1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("campaign1CampaignUnderscoreid", "campaign_id")
      , ("campaign1CustomerUnderscoreid", "customer_id")
      , ("campaign1DeliveryUnderscoreid", "delivery_id")
      , ("campaign1ActionUnderscoreid", "action_id")
      , ("campaign1JourneyUnderscoreid", "journey_id")
      , ("campaign1Identifiers", "identifiers")
      , ("campaign1ParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("campaign1TriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      ]


-- | 
data CampaignActionLinks200Response = CampaignActionLinks200Response
  { campaignActionLinks200ResponseLinks :: Maybe [BroadcastLinks200ResponseLinksInner] -- ^ Each object in the array represents a link in your action.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON CampaignActionLinks200Response where
  parseJSON = genericParseJSON optionsCampaignActionLinks200Response
instance ToJSON CampaignActionLinks200Response where
  toJSON = genericToJSON optionsCampaignActionLinks200Response

optionsCampaignActionLinks200Response :: Options
optionsCampaignActionLinks200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("campaignActionLinks200ResponseLinks", "links")
      ]


-- | 
data CampaignJourneyMetrics200Response = CampaignJourneyMetrics200Response
  { campaignJourneyMetrics200ResponseJourneyUnderscoremetric :: Maybe CampaignJourneyMetrics200ResponseJourneyMetric -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON CampaignJourneyMetrics200Response where
  parseJSON = genericParseJSON optionsCampaignJourneyMetrics200Response
instance ToJSON CampaignJourneyMetrics200Response where
  toJSON = genericToJSON optionsCampaignJourneyMetrics200Response

optionsCampaignJourneyMetrics200Response :: Options
optionsCampaignJourneyMetrics200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("campaignJourneyMetrics200ResponseJourneyUnderscoremetric", "journey_metric")
      ]


-- | 
data CampaignJourneyMetrics200ResponseJourneyMetric = CampaignJourneyMetrics200ResponseJourneyMetric
  { campaignJourneyMetrics200ResponseJourneyMetricStarted :: Maybe [Int] -- ^ The total number of people who meet the trigger criteria for a journey. This count occurs before filters are applied.
  , campaignJourneyMetrics200ResponseJourneyMetricActivated :: Maybe [Int] -- ^ People who started a journey and were not filtered out before they experienced an action.
  , campaignJourneyMetrics200ResponseJourneyMetricExitedUnderscoreearly :: Maybe [Int] -- ^ People who started a journey but stopped meeting the campaign trigger/filter criteria.
  , campaignJourneyMetrics200ResponseJourneyMetricFinished :: Maybe [Int] -- ^ People who finished the journey.
  , campaignJourneyMetrics200ResponseJourneyMetricConverted :: Maybe [Int] -- ^ People who met the conversion goal (entered a segment) for the campaign.
  , campaignJourneyMetrics200ResponseJourneyMetricNeverUnderscoreactivated :: Maybe [Int] -- ^ People who started a journey but were filtered out before they could experience any of the actions in the journey.
  , campaignJourneyMetrics200ResponseJourneyMetricMessaged :: Maybe [Int] -- ^ People who experienced at least one non-delay action in the journey. This metric typically represents journeys in progress.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON CampaignJourneyMetrics200ResponseJourneyMetric where
  parseJSON = genericParseJSON optionsCampaignJourneyMetrics200ResponseJourneyMetric
instance ToJSON CampaignJourneyMetrics200ResponseJourneyMetric where
  toJSON = genericToJSON optionsCampaignJourneyMetrics200ResponseJourneyMetric

optionsCampaignJourneyMetrics200ResponseJourneyMetric :: Options
optionsCampaignJourneyMetrics200ResponseJourneyMetric =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("campaignJourneyMetrics200ResponseJourneyMetricStarted", "started")
      , ("campaignJourneyMetrics200ResponseJourneyMetricActivated", "activated")
      , ("campaignJourneyMetrics200ResponseJourneyMetricExitedUnderscoreearly", "exited_early")
      , ("campaignJourneyMetrics200ResponseJourneyMetricFinished", "finished")
      , ("campaignJourneyMetrics200ResponseJourneyMetricConverted", "converted")
      , ("campaignJourneyMetrics200ResponseJourneyMetricNeverUnderscoreactivated", "never_activated")
      , ("campaignJourneyMetrics200ResponseJourneyMetricMessaged", "messaged")
      ]


-- | 
data CampaignMetricsDeprecated200Response = CampaignMetricsDeprecated200Response
  { campaignMetricsDeprecated200ResponseMetric :: Maybe CampaignMetricsDeprecated200ResponseMetric -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON CampaignMetricsDeprecated200Response where
  parseJSON = genericParseJSON optionsCampaignMetricsDeprecated200Response
instance ToJSON CampaignMetricsDeprecated200Response where
  toJSON = genericToJSON optionsCampaignMetricsDeprecated200Response

optionsCampaignMetricsDeprecated200Response :: Options
optionsCampaignMetricsDeprecated200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("campaignMetricsDeprecated200ResponseMetric", "metric")
      ]


-- | 
data CampaignMetricsDeprecated200ResponseMetric = CampaignMetricsDeprecated200ResponseMetric
  { campaignMetricsDeprecated200ResponseMetricSeries :: Maybe CampaignMetricsDeprecated200ResponseMetricSeries -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON CampaignMetricsDeprecated200ResponseMetric where
  parseJSON = genericParseJSON optionsCampaignMetricsDeprecated200ResponseMetric
instance ToJSON CampaignMetricsDeprecated200ResponseMetric where
  toJSON = genericToJSON optionsCampaignMetricsDeprecated200ResponseMetric

optionsCampaignMetricsDeprecated200ResponseMetric :: Options
optionsCampaignMetricsDeprecated200ResponseMetric =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("campaignMetricsDeprecated200ResponseMetricSeries", "series")
      ]


-- | 
data CampaignMetricsDeprecated200ResponseMetricSeries = CampaignMetricsDeprecated200ResponseMetricSeries
  { campaignMetricsDeprecated200ResponseMetricSeries2xx :: Maybe [Int] -- ^ 2xx responses by period, representative of webhook performance.
  , campaignMetricsDeprecated200ResponseMetricSeries3xx :: Maybe [Int] -- ^ 3xx responses by period, representative of webhook performance.
  , campaignMetricsDeprecated200ResponseMetricSeries4xx :: Maybe [Int] -- ^ 4xx responses by period, representative of webhook performance.
  , campaignMetricsDeprecated200ResponseMetricSeries5xx :: Maybe [Int] -- ^ 5xx responses by period, representative of webhook performance.
  , campaignMetricsDeprecated200ResponseMetricSeriesAttempted :: Maybe [Int] -- ^ The number of `attempted` messages.
  , campaignMetricsDeprecated200ResponseMetricSeriesBounced :: Maybe [Int] -- ^ The number of `bounced` messages.
  , campaignMetricsDeprecated200ResponseMetricSeriesClicked :: Maybe [Int] -- ^ The number of `clicked` messages.
  , campaignMetricsDeprecated200ResponseMetricSeriesConverted :: Maybe [Int] -- ^ The number of `converted` messages.
  , campaignMetricsDeprecated200ResponseMetricSeriesCreated :: Maybe [Int] -- ^ The number of `created` messages.
  , campaignMetricsDeprecated200ResponseMetricSeriesDeferred :: Maybe [Int] -- ^ The number of `deferred` messages.
  , campaignMetricsDeprecated200ResponseMetricSeriesDelivered :: Maybe [Int] -- ^ The number of `delivered` messages.
  , campaignMetricsDeprecated200ResponseMetricSeriesDrafted :: Maybe [Int] -- ^ The number of `drafted` messages.
  , campaignMetricsDeprecated200ResponseMetricSeriesFailed :: Maybe [Int] -- ^ The number of `failed` messages.
  , campaignMetricsDeprecated200ResponseMetricSeriesOpened :: Maybe [Int] -- ^ The number of `opened` messages.
  , campaignMetricsDeprecated200ResponseMetricSeriesSent :: Maybe [Int] -- ^ The number of sent messages.
  , campaignMetricsDeprecated200ResponseMetricSeriesSpammed :: Maybe [Int] -- ^ The number of spam complaints.
  , campaignMetricsDeprecated200ResponseMetricSeriesSuppressed :: Maybe [Int] -- ^ The number of `suppressed` messages.
  , campaignMetricsDeprecated200ResponseMetricSeriesUndeliverable :: Maybe [Int] -- ^ The number of `undeliverable` messages.
  , campaignMetricsDeprecated200ResponseMetricSeriesTopicUnderscoreunsubscribed :: Maybe [Int] -- ^ The number of topic unsubscribes in a given period.
  , campaignMetricsDeprecated200ResponseMetricSeriesUnsubscribed :: Maybe [Int] -- ^ The number of unsubscribes attributed to the campaign or message.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON CampaignMetricsDeprecated200ResponseMetricSeries where
  parseJSON = genericParseJSON optionsCampaignMetricsDeprecated200ResponseMetricSeries
instance ToJSON CampaignMetricsDeprecated200ResponseMetricSeries where
  toJSON = genericToJSON optionsCampaignMetricsDeprecated200ResponseMetricSeries

optionsCampaignMetricsDeprecated200ResponseMetricSeries :: Options
optionsCampaignMetricsDeprecated200ResponseMetricSeries =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("campaignMetricsDeprecated200ResponseMetricSeries2xx", "2xx")
      , ("campaignMetricsDeprecated200ResponseMetricSeries3xx", "3xx")
      , ("campaignMetricsDeprecated200ResponseMetricSeries4xx", "4xx")
      , ("campaignMetricsDeprecated200ResponseMetricSeries5xx", "5xx")
      , ("campaignMetricsDeprecated200ResponseMetricSeriesAttempted", "attempted")
      , ("campaignMetricsDeprecated200ResponseMetricSeriesBounced", "bounced")
      , ("campaignMetricsDeprecated200ResponseMetricSeriesClicked", "clicked")
      , ("campaignMetricsDeprecated200ResponseMetricSeriesConverted", "converted")
      , ("campaignMetricsDeprecated200ResponseMetricSeriesCreated", "created")
      , ("campaignMetricsDeprecated200ResponseMetricSeriesDeferred", "deferred")
      , ("campaignMetricsDeprecated200ResponseMetricSeriesDelivered", "delivered")
      , ("campaignMetricsDeprecated200ResponseMetricSeriesDrafted", "drafted")
      , ("campaignMetricsDeprecated200ResponseMetricSeriesFailed", "failed")
      , ("campaignMetricsDeprecated200ResponseMetricSeriesOpened", "opened")
      , ("campaignMetricsDeprecated200ResponseMetricSeriesSent", "sent")
      , ("campaignMetricsDeprecated200ResponseMetricSeriesSpammed", "spammed")
      , ("campaignMetricsDeprecated200ResponseMetricSeriesSuppressed", "suppressed")
      , ("campaignMetricsDeprecated200ResponseMetricSeriesUndeliverable", "undeliverable")
      , ("campaignMetricsDeprecated200ResponseMetricSeriesTopicUnderscoreunsubscribed", "topic_unsubscribed")
      , ("campaignMetricsDeprecated200ResponseMetricSeriesUnsubscribed", "unsubscribed")
      ]


-- | 
data CampaignObject = CampaignObject
  { campaignObjectId :: Maybe Int -- ^ The identifier for a campaign.
  , campaignObjectDeduplicateUnderscoreid :: Maybe Text -- ^ An identifier in the format `id:timestamp` where the id is the id of the object you are working with (Campaigns, Deliveries, Exports, Identities, Newsletters, Segments, and Templates), and the timestamp is the last time the object was updated.
  , campaignObjectName :: Maybe Text -- ^ The name of the campaign.
  , campaignObjectType :: Maybe Text -- ^ The type of campaign trigger. **Sunsetting on March 30, 2025**
  , campaignObjectCreated :: Maybe Int -- ^ The date time when the referenced ID was created.
  , campaignObjectUpdated :: Maybe Int -- ^ The date time when the referenced ID was last updated.
  , campaignObjectActive :: Maybe Bool -- ^ If true, the campaign is active and can still send messages.
  , campaignObjectState :: Maybe Text -- ^ The status of the campaign.
  , campaignObjectActions :: Maybe [SegmentActionsInner] -- ^ An array of actions contained within the campaign.
  , campaignObjectFirstUnderscorestarted :: Maybe Int -- ^ The date and time when you first started the campaign and it first became eligible to be triggered.
  , campaignObjectTags :: Maybe [Text] -- ^ An array of tags you set on this campaign.
  , campaignObjectTriggerUnderscoresegmentUnderscoreids :: Maybe [Int] -- ^ A list of segments used in the campaign trigger, returned if the campaign trigger included one or more segment conditions.
  , campaignObjectFilterUnderscoresegmentUnderscoreids :: Maybe [Int] -- ^ A list of segments used in the campaign filter, returned if the campaign audience was filtered on one or more segments.
  , campaignObjectMsgUnderscoretemplates :: Maybe [SegmentMsgTemplatesInner] -- ^ Indicates the message templates used in this campaign.
  , campaignObjectEventUnderscorename :: Maybe Text -- ^ The name of the event. How you reference the event in campaigns or segments.
  , campaignObjectFrequency :: Maybe Text -- ^ How often a person will receive this campaign based on the date specified in the campaign trigger.
  , campaignObjectDateUnderscoreattribute :: Maybe Text -- ^ The attribute on people's profiles you use to configure the date of the campaign trigger.
  , campaignObjectTimezone :: Maybe Text -- ^ The timezone you set to configure the date of the campaign trigger.
  , campaignObjectUseUnderscorecustomerUnderscoretimezone :: Maybe Bool -- ^ If you chose \"the user's timezone\" while configuring the date of the campaign trigger, this is `true`. Otherwise, you set a specific timezone so it's `false`.
  , campaignObjectStartUnderscorehour :: Maybe Int -- ^ The hour you set the campaign to trigger. Follows the 24-hour clock.
  , campaignObjectStartUnderscoreminutes :: Maybe Int -- ^ The minutes you set the campaign to trigger. Follows the 24-hour clock.
  , campaignObjectObjectUnderscoretypeUnderscoreid :: Maybe Int -- ^ The the object type ID of the trigger.
  , campaignObjectFilterUnderscoreobjectUnderscoreattributes :: Maybe Text -- ^ A list of object attributes used in the campaign filter, returned if the campaign audience was filtered on one or more object attributes.
  , campaignObjectFilterUnderscorerelationshipUnderscoreattributes :: Maybe Text -- ^ A list of relationship attributes used in the campaign filter, returned if the campaign audience was filtered on one or more relationship attributes.
  , campaignObjectAudience :: Maybe ObjectAudience -- ^ 
  , campaignObjectRelationshipUnderscoreattributeUnderscoretriggers :: Maybe Value -- ^ A list of relationship attributes used to trigger the campaign.
  , campaignObjectObjectUnderscoreattributeUnderscoretriggers :: Maybe Value -- ^ A list of object attributes used to trigger the campaign.
  , campaignObjectWebhookUnderscoreid :: Maybe Int -- ^ The ID of the webhook trigger generated by Customer.io.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON CampaignObject where
  parseJSON = genericParseJSON optionsCampaignObject
instance ToJSON CampaignObject where
  toJSON = genericToJSON optionsCampaignObject

optionsCampaignObject :: Options
optionsCampaignObject =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("campaignObjectId", "id")
      , ("campaignObjectDeduplicateUnderscoreid", "deduplicate_id")
      , ("campaignObjectName", "name")
      , ("campaignObjectType", "type")
      , ("campaignObjectCreated", "created")
      , ("campaignObjectUpdated", "updated")
      , ("campaignObjectActive", "active")
      , ("campaignObjectState", "state")
      , ("campaignObjectActions", "actions")
      , ("campaignObjectFirstUnderscorestarted", "first_started")
      , ("campaignObjectTags", "tags")
      , ("campaignObjectTriggerUnderscoresegmentUnderscoreids", "trigger_segment_ids")
      , ("campaignObjectFilterUnderscoresegmentUnderscoreids", "filter_segment_ids")
      , ("campaignObjectMsgUnderscoretemplates", "msg_templates")
      , ("campaignObjectEventUnderscorename", "event_name")
      , ("campaignObjectFrequency", "frequency")
      , ("campaignObjectDateUnderscoreattribute", "date_attribute")
      , ("campaignObjectTimezone", "timezone")
      , ("campaignObjectUseUnderscorecustomerUnderscoretimezone", "use_customer_timezone")
      , ("campaignObjectStartUnderscorehour", "start_hour")
      , ("campaignObjectStartUnderscoreminutes", "start_minutes")
      , ("campaignObjectObjectUnderscoretypeUnderscoreid", "object_type_id")
      , ("campaignObjectFilterUnderscoreobjectUnderscoreattributes", "filter_object_attributes")
      , ("campaignObjectFilterUnderscorerelationshipUnderscoreattributes", "filter_relationship_attributes")
      , ("campaignObjectAudience", "audience")
      , ("campaignObjectRelationshipUnderscoreattributeUnderscoretriggers", "relationship_attribute_triggers")
      , ("campaignObjectObjectUnderscoreattributeUnderscoretriggers", "object_attribute_triggers")
      , ("campaignObjectWebhookUnderscoreid", "webhook_id")
      ]


-- | 
data CampaignRequest = CampaignRequest
  { campaignRequestData :: Maybe (Map.Map String Value) -- ^ Contains information you want to use to populate your broadcast.
  , campaignRequestEmailUnderscoreaddUnderscoreduplicates :: Maybe Bool -- ^ an email address associated with more than one profile id is an error.
  , campaignRequestEmailUnderscoreignoreUnderscoremissing :: Maybe Bool -- ^ If false a missing email address is an error.
  , campaignRequestIdUnderscoreignoreUnderscoremissing :: Maybe Bool -- ^ If false, a missing customer ID is an error.
  , campaignRequestRecipients :: AudienceFilter -- ^ 
  , campaignRequestEmails :: [Text] -- ^ An array of email addresses you want to send the broadcast to. These addresses must already exist; your request cannot create a new person.
  , campaignRequestIds :: [Text] -- ^ An array of IDs you want to send a broadcast to. **NOTE**: If your workspace identifies people by `email`, don't use this option. Identify your audience by `emails` instead. 
  , campaignRequestPerUnderscoreuserUnderscoredata :: [UserMapsAllOfPerUserDataInner] -- ^ An array of people you want to send a broadcast to and custom data for each person. Each object in the array represents a person, with additional data you want to use to personalize their message. **When you trigger a broadcast, the people in your request must already exist in your workspace.** Requests to trigger a broadcast cannot create new people. 
  , campaignRequestDataUnderscorefileUnderscoreurl :: Text -- ^ The URL of a data file containing per-user data. Each line is a single object representing a person: either a json map of `id` and `data` or `email` and `data` keys. For example, `{\"email\":\"road@runner.net\",\"data\":{\"voucher_code\": \"coyote\"}}`.  The IDs or emails in your data file must already exist in your workspace. Your broadcast cannot add new people to your workspace and won't send messages for IDs or email addresses that don't match a person in your workspace. 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON CampaignRequest where
  parseJSON = genericParseJSON optionsCampaignRequest
instance ToJSON CampaignRequest where
  toJSON = genericToJSON optionsCampaignRequest

optionsCampaignRequest :: Options
optionsCampaignRequest =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("campaignRequestData", "data")
      , ("campaignRequestEmailUnderscoreaddUnderscoreduplicates", "email_add_duplicates")
      , ("campaignRequestEmailUnderscoreignoreUnderscoremissing", "email_ignore_missing")
      , ("campaignRequestIdUnderscoreignoreUnderscoremissing", "id_ignore_missing")
      , ("campaignRequestRecipients", "recipients")
      , ("campaignRequestEmails", "emails")
      , ("campaignRequestIds", "ids")
      , ("campaignRequestPerUnderscoreuserUnderscoredata", "per_user_data")
      , ("campaignRequestDataUnderscorefileUnderscoreurl", "data_file_url")
      ]


-- | A person changed their subscription preferences through our subscription center or you changed their &#x60;cio_subscription_preferences&#x60; attribute values.  Some fields in the &#x60;data&#x60; object change based on whether the message that resulted in the change originated from a broadcast, campaign, or newsletter. 
data ChangedSubscriptionPreferences = ChangedSubscriptionPreferences
  { changedSubscriptionPreferencesMetric :: Text -- ^ The event we're reporting to your webhook endpoint. In this case, a person changed their subscription preferences.
  , changedSubscriptionPreferencesEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , changedSubscriptionPreferencesDeliveryUnderscoretype :: Maybe Text -- ^ The type of delivery that resulted in a change to preferences.
  , changedSubscriptionPreferencesTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , changedSubscriptionPreferencesData :: ChangedSubscriptionPreferencesData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ChangedSubscriptionPreferences where
  parseJSON = genericParseJSON optionsChangedSubscriptionPreferences
instance ToJSON ChangedSubscriptionPreferences where
  toJSON = genericToJSON optionsChangedSubscriptionPreferences

optionsChangedSubscriptionPreferences :: Options
optionsChangedSubscriptionPreferences =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("changedSubscriptionPreferencesMetric", "metric")
      , ("changedSubscriptionPreferencesEventUnderscoreid", "event_id")
      , ("changedSubscriptionPreferencesDeliveryUnderscoretype", "delivery_type")
      , ("changedSubscriptionPreferencesTimestamp", "timestamp")
      , ("changedSubscriptionPreferencesData", "data")
      ]


-- | 
data ChangedSubscriptionPreferencesData = ChangedSubscriptionPreferencesData
  { changedSubscriptionPreferencesDataContent :: Text -- ^ Contains the subscription preferences that a person changed in a stringified object format. The `topic_1` key refers to a topic with an ID of `1`; you can get more information about each topic from our [App API](/api/app/#operation/getTopics).
  , changedSubscriptionPreferencesDataCustomerUnderscoreid :: Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , changedSubscriptionPreferencesDataEmailUnderscoreaddress :: Text -- ^ The email address of the customer.
  , changedSubscriptionPreferencesDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , changedSubscriptionPreferencesDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , changedSubscriptionPreferencesDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , changedSubscriptionPreferencesDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , changedSubscriptionPreferencesDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , changedSubscriptionPreferencesDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , changedSubscriptionPreferencesDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , changedSubscriptionPreferencesDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , changedSubscriptionPreferencesDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , changedSubscriptionPreferencesDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , changedSubscriptionPreferencesDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ChangedSubscriptionPreferencesData where
  parseJSON = genericParseJSON optionsChangedSubscriptionPreferencesData
instance ToJSON ChangedSubscriptionPreferencesData where
  toJSON = genericToJSON optionsChangedSubscriptionPreferencesData

optionsChangedSubscriptionPreferencesData :: Options
optionsChangedSubscriptionPreferencesData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("changedSubscriptionPreferencesDataContent", "content")
      , ("changedSubscriptionPreferencesDataCustomerUnderscoreid", "customer_id")
      , ("changedSubscriptionPreferencesDataEmailUnderscoreaddress", "email_address")
      , ("changedSubscriptionPreferencesDataIdentifiers", "identifiers")
      , ("changedSubscriptionPreferencesDataTriggerUnderscoreid", "trigger_id")
      , ("changedSubscriptionPreferencesDataDeliveryUnderscoreid", "delivery_id")
      , ("changedSubscriptionPreferencesDataActionUnderscoreid", "action_id")
      , ("changedSubscriptionPreferencesDataBroadcastUnderscoreid", "broadcast_id")
      , ("changedSubscriptionPreferencesDataJourneyUnderscoreid", "journey_id")
      , ("changedSubscriptionPreferencesDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("changedSubscriptionPreferencesDataCampaignUnderscoreid", "campaign_id")
      , ("changedSubscriptionPreferencesDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("changedSubscriptionPreferencesDataNewsletterUnderscoreid", "newsletter_id")
      , ("changedSubscriptionPreferencesDataContentUnderscoreid", "content_id")
      ]


-- | 
data CioId1 = CioId1
  { cioId1CioUnderscoreid :: Text -- ^ A unique, immutable identifier for a person, set by Customer.io when you add a person.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON CioId1 where
  parseJSON = genericParseJSON optionsCioId1
instance ToJSON CioId1 where
  toJSON = genericToJSON optionsCioId1

optionsCioId1 :: Options
optionsCioId1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("cioId1CioUnderscoreid", "cio_id")
      ]


-- | 
data CioId2 = CioId2
  { cioId2CioUnderscoreid :: Maybe Text -- ^ A unique identifier set by Customer.io, used to reference a person if you want to update their identifiers.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON CioId2 where
  parseJSON = genericParseJSON optionsCioId2
instance ToJSON CioId2 where
  toJSON = genericToJSON optionsCioId2

optionsCioId2 :: Options
optionsCioId2 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("cioId2CioUnderscoreid", "cio_id")
      ]


-- | 
data CioId3 = CioId3
  { cioId3CioUnderscoreid :: Text -- ^ A unique identifier set by Customer.io, used to reference a person if you want to update their identifiers.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON CioId3 where
  parseJSON = genericParseJSON optionsCioId3
instance ToJSON CioId3 where
  toJSON = genericToJSON optionsCioId3

optionsCioId3 :: Options
optionsCioId3 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("cioId3CioUnderscoreid", "cio_id")
      ]


-- | Stores your audience&#39;s subscription preferences if you enable our [subscription center](/subscription-center/) feature. These items are set automatically when people use the unsubscribe link in your messages, but you can set preferences outside the subscription flow. To update select topic preferences while preserving those set for other topics, use JSON dot notation &#x60;\&quot;cio_subscription_preferences.topics.topic_&lt;topic ID&gt;\&quot;:&lt;boolean&gt;&#x60;.
data CioSubscriptionPreferences = CioSubscriptionPreferences
  { cioSubscriptionPreferencesTopics :: Maybe (Map.Map String Bool) -- ^ Contains active topics in your workspace, named `topic_<id>`.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON CioSubscriptionPreferences where
  parseJSON = genericParseJSON optionsCioSubscriptionPreferences
instance ToJSON CioSubscriptionPreferences where
  toJSON = genericToJSON optionsCioSubscriptionPreferences

optionsCioSubscriptionPreferences :: Options
optionsCioSubscriptionPreferences =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("cioSubscriptionPreferencesTopics", "topics")
      ]


-- | 
data Clicked = Clicked
  { clickedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , clickedObjectUnderscoretype :: Text -- ^ The event relates to an email action.
  , clickedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , clickedMetric :: Text -- ^ A tracked link in an email was clicked. If the property `machine` is `true`, the click was generated by a machine. Otherwise, it was clicked by a human.
  , clickedData :: ClickedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Clicked where
  parseJSON = genericParseJSON optionsClicked
instance ToJSON Clicked where
  toJSON = genericToJSON optionsClicked

optionsClicked :: Options
optionsClicked =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("clickedEventUnderscoreid", "event_id")
      , ("clickedObjectUnderscoretype", "object_type")
      , ("clickedTimestamp", "timestamp")
      , ("clickedMetric", "metric")
      , ("clickedData", "data")
      ]


-- | 
data Clicked1 = Clicked1
  { clicked1EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , clicked1ObjectUnderscoretype :: Text -- ^ The event relates to an push notification.
  , clicked1Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , clicked1Metric :: Text -- ^ A recipient tapped a link in a push notification.
  , clicked1Data :: Clicked1AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Clicked1 where
  parseJSON = genericParseJSON optionsClicked1
instance ToJSON Clicked1 where
  toJSON = genericToJSON optionsClicked1

optionsClicked1 :: Options
optionsClicked1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("clicked1EventUnderscoreid", "event_id")
      , ("clicked1ObjectUnderscoretype", "object_type")
      , ("clicked1Timestamp", "timestamp")
      , ("clicked1Metric", "metric")
      , ("clicked1Data", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data Clicked1AllOfData = Clicked1AllOfData
  { clicked1AllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , clicked1AllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , clicked1AllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , clicked1AllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , clicked1AllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , clicked1AllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , clicked1AllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , clicked1AllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , clicked1AllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , clicked1AllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , clicked1AllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , clicked1AllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , clicked1AllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , clicked1AllOfDataHref :: Text -- ^ The URL of the link that a person clicked.
  , clicked1AllOfDataLinkUnderscoreid :: Int -- ^ The identifier for the tracked link that a person clicked or tapped.
  , clicked1AllOfDataRecipients :: [Clicked1AllOfDataAllOfRecipientsInner] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Clicked1AllOfData where
  parseJSON = genericParseJSON optionsClicked1AllOfData
instance ToJSON Clicked1AllOfData where
  toJSON = genericToJSON optionsClicked1AllOfData

optionsClicked1AllOfData :: Options
optionsClicked1AllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("clicked1AllOfDataTriggerUnderscoreid", "trigger_id")
      , ("clicked1AllOfDataCustomerUnderscoreid", "customer_id")
      , ("clicked1AllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("clicked1AllOfDataActionUnderscoreid", "action_id")
      , ("clicked1AllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("clicked1AllOfDataJourneyUnderscoreid", "journey_id")
      , ("clicked1AllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("clicked1AllOfDataIdentifiers", "identifiers")
      , ("clicked1AllOfDataCampaignUnderscoreid", "campaign_id")
      , ("clicked1AllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("clicked1AllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("clicked1AllOfDataContentUnderscoreid", "content_id")
      , ("clicked1AllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("clicked1AllOfDataHref", "href")
      , ("clicked1AllOfDataLinkUnderscoreid", "link_id")
      , ("clicked1AllOfDataRecipients", "recipients")
      ]


-- | Describes the device of the recipient who tapped the link.
data Clicked1AllOfDataAllOfRecipientsInner = Clicked1AllOfDataAllOfRecipientsInner
  { clicked1AllOfDataAllOfRecipientsInnerDeviceUnderscoreid :: Text -- ^ The device identifier/token.
  , clicked1AllOfDataAllOfRecipientsInnerDeviceUnderscoreplatform :: Maybe Text -- ^ The device platform—ios or android.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Clicked1AllOfDataAllOfRecipientsInner where
  parseJSON = genericParseJSON optionsClicked1AllOfDataAllOfRecipientsInner
instance ToJSON Clicked1AllOfDataAllOfRecipientsInner where
  toJSON = genericToJSON optionsClicked1AllOfDataAllOfRecipientsInner

optionsClicked1AllOfDataAllOfRecipientsInner :: Options
optionsClicked1AllOfDataAllOfRecipientsInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("clicked1AllOfDataAllOfRecipientsInnerDeviceUnderscoreid", "device_id")
      , ("clicked1AllOfDataAllOfRecipientsInnerDeviceUnderscoreplatform", "device_platform")
      ]


-- | 
data Clicked2 = Clicked2
  { clicked2EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , clicked2ObjectUnderscoretype :: Text -- ^ The event relates to an in-app message.
  , clicked2Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , clicked2Metric :: Text -- ^ The in-app message recipient clicked/tapped a component in a message with **Track Clicks** enabled. The *Track Clicks* setting is enabled by default for in-app messages. The payload includes a `tracked_response` key containing the *Action Name* of the component the person clicked/tapped. [Learn more about tracked responses and action names](/journeys/tracked-responses).
  , clicked2Data :: Clicked2AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Clicked2 where
  parseJSON = genericParseJSON optionsClicked2
instance ToJSON Clicked2 where
  toJSON = genericToJSON optionsClicked2

optionsClicked2 :: Options
optionsClicked2 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("clicked2EventUnderscoreid", "event_id")
      , ("clicked2ObjectUnderscoretype", "object_type")
      , ("clicked2Timestamp", "timestamp")
      , ("clicked2Metric", "metric")
      , ("clicked2Data", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data Clicked2AllOfData = Clicked2AllOfData
  { clicked2AllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , clicked2AllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , clicked2AllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , clicked2AllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , clicked2AllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , clicked2AllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , clicked2AllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , clicked2AllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , clicked2AllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , clicked2AllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , clicked2AllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , clicked2AllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , clicked2AllOfDataTrackedUnderscoreresponse :: Maybe Text -- ^ The *Action Name* of the action a person clicked/tapped in the message. [Learn more about tracked responses and action names](/journeys/tracked-responses).
  , clicked2AllOfDataRecipient :: Text -- ^ The ID or email address of the person the message was sent to. This identifier is determined by the settings in your message and the value you use to identify your app's users.
  , clicked2AllOfDataHref :: Text -- ^ The URL of the link that a person clicked.
  , clicked2AllOfDataLinkUnderscoreid :: Int -- ^ The identifier for the tracked link that a person clicked or tapped.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Clicked2AllOfData where
  parseJSON = genericParseJSON optionsClicked2AllOfData
instance ToJSON Clicked2AllOfData where
  toJSON = genericToJSON optionsClicked2AllOfData

optionsClicked2AllOfData :: Options
optionsClicked2AllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("clicked2AllOfDataTriggerUnderscoreid", "trigger_id")
      , ("clicked2AllOfDataCustomerUnderscoreid", "customer_id")
      , ("clicked2AllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("clicked2AllOfDataActionUnderscoreid", "action_id")
      , ("clicked2AllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("clicked2AllOfDataJourneyUnderscoreid", "journey_id")
      , ("clicked2AllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("clicked2AllOfDataIdentifiers", "identifiers")
      , ("clicked2AllOfDataCampaignUnderscoreid", "campaign_id")
      , ("clicked2AllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("clicked2AllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("clicked2AllOfDataContentUnderscoreid", "content_id")
      , ("clicked2AllOfDataTrackedUnderscoreresponse", "tracked_response")
      , ("clicked2AllOfDataRecipient", "recipient")
      , ("clicked2AllOfDataHref", "href")
      , ("clicked2AllOfDataLinkUnderscoreid", "link_id")
      ]


-- | 
data Clicked3 = Clicked3
  { clicked3EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , clicked3ObjectUnderscoretype :: Text -- ^ The event relates to an SMS message.
  , clicked3Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , clicked3Metric :: Text -- ^ A recipient tapped a link in an SMS message they received.
  , clicked3Data :: Clicked3AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Clicked3 where
  parseJSON = genericParseJSON optionsClicked3
instance ToJSON Clicked3 where
  toJSON = genericToJSON optionsClicked3

optionsClicked3 :: Options
optionsClicked3 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("clicked3EventUnderscoreid", "event_id")
      , ("clicked3ObjectUnderscoretype", "object_type")
      , ("clicked3Timestamp", "timestamp")
      , ("clicked3Metric", "metric")
      , ("clicked3Data", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data Clicked3AllOfData = Clicked3AllOfData
  { clicked3AllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , clicked3AllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , clicked3AllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , clicked3AllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , clicked3AllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , clicked3AllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , clicked3AllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , clicked3AllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , clicked3AllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , clicked3AllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , clicked3AllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , clicked3AllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , clicked3AllOfDataRecipient :: Text -- ^ The MSISDN (phone number) of the SMS recipient.
  , clicked3AllOfDataLinkUnderscoreid :: Int -- ^ The identifier for the tracked link that a person clicked or tapped.
  , clicked3AllOfDataHref :: Text -- ^ The URL of the link that a person clicked.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Clicked3AllOfData where
  parseJSON = genericParseJSON optionsClicked3AllOfData
instance ToJSON Clicked3AllOfData where
  toJSON = genericToJSON optionsClicked3AllOfData

optionsClicked3AllOfData :: Options
optionsClicked3AllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("clicked3AllOfDataTriggerUnderscoreid", "trigger_id")
      , ("clicked3AllOfDataCustomerUnderscoreid", "customer_id")
      , ("clicked3AllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("clicked3AllOfDataActionUnderscoreid", "action_id")
      , ("clicked3AllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("clicked3AllOfDataJourneyUnderscoreid", "journey_id")
      , ("clicked3AllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("clicked3AllOfDataIdentifiers", "identifiers")
      , ("clicked3AllOfDataCampaignUnderscoreid", "campaign_id")
      , ("clicked3AllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("clicked3AllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("clicked3AllOfDataContentUnderscoreid", "content_id")
      , ("clicked3AllOfDataRecipient", "recipient")
      , ("clicked3AllOfDataLinkUnderscoreid", "link_id")
      , ("clicked3AllOfDataHref", "href")
      ]


-- | 
data Clicked4 = Clicked4
  { clicked4EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , clicked4ObjectUnderscoretype :: Text -- ^ The event relates to a Slack message.
  , clicked4Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , clicked4Metric :: Text -- ^ A person clicked a tracked link in a Slack message.
  , clicked4Data :: Clicked4AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Clicked4 where
  parseJSON = genericParseJSON optionsClicked4
instance ToJSON Clicked4 where
  toJSON = genericToJSON optionsClicked4

optionsClicked4 :: Options
optionsClicked4 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("clicked4EventUnderscoreid", "event_id")
      , ("clicked4ObjectUnderscoretype", "object_type")
      , ("clicked4Timestamp", "timestamp")
      , ("clicked4Metric", "metric")
      , ("clicked4Data", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data Clicked4AllOfData = Clicked4AllOfData
  { clicked4AllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , clicked4AllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , clicked4AllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , clicked4AllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , clicked4AllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , clicked4AllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , clicked4AllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , clicked4AllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , clicked4AllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , clicked4AllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , clicked4AllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , clicked4AllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , clicked4AllOfDataRecipient :: Text -- ^ The channel or person that received the message, i.e. `#general`.
  , clicked4AllOfDataHref :: Text -- ^ The URL of the link that a person clicked.
  , clicked4AllOfDataLinkUnderscoreid :: Int -- ^ The identifier for the tracked link that a person clicked or tapped.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Clicked4AllOfData where
  parseJSON = genericParseJSON optionsClicked4AllOfData
instance ToJSON Clicked4AllOfData where
  toJSON = genericToJSON optionsClicked4AllOfData

optionsClicked4AllOfData :: Options
optionsClicked4AllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("clicked4AllOfDataTriggerUnderscoreid", "trigger_id")
      , ("clicked4AllOfDataCustomerUnderscoreid", "customer_id")
      , ("clicked4AllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("clicked4AllOfDataActionUnderscoreid", "action_id")
      , ("clicked4AllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("clicked4AllOfDataJourneyUnderscoreid", "journey_id")
      , ("clicked4AllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("clicked4AllOfDataIdentifiers", "identifiers")
      , ("clicked4AllOfDataCampaignUnderscoreid", "campaign_id")
      , ("clicked4AllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("clicked4AllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("clicked4AllOfDataContentUnderscoreid", "content_id")
      , ("clicked4AllOfDataRecipient", "recipient")
      , ("clicked4AllOfDataHref", "href")
      , ("clicked4AllOfDataLinkUnderscoreid", "link_id")
      ]


-- | 
data Clicked5 = Clicked5
  { clicked5EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , clicked5ObjectUnderscoretype :: Text -- ^ The event relates to a webhook.
  , clicked5Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , clicked5Metric :: Text -- ^ The webhook recipient opened a tracked link in the webhook payload.
  , clicked5Data :: Clicked5AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Clicked5 where
  parseJSON = genericParseJSON optionsClicked5
instance ToJSON Clicked5 where
  toJSON = genericToJSON optionsClicked5

optionsClicked5 :: Options
optionsClicked5 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("clicked5EventUnderscoreid", "event_id")
      , ("clicked5ObjectUnderscoretype", "object_type")
      , ("clicked5Timestamp", "timestamp")
      , ("clicked5Metric", "metric")
      , ("clicked5Data", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data Clicked5AllOfData = Clicked5AllOfData
  { clicked5AllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , clicked5AllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , clicked5AllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , clicked5AllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , clicked5AllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , clicked5AllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , clicked5AllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , clicked5AllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , clicked5AllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , clicked5AllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , clicked5AllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , clicked5AllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , clicked5AllOfDataRecipient :: Text -- ^ The URL the webhook was sent to.
  , clicked5AllOfDataHref :: Text -- ^ The URL of the link that a person clicked.
  , clicked5AllOfDataLinkUnderscoreid :: Int -- ^ The identifier for the tracked link that a person clicked or tapped.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Clicked5AllOfData where
  parseJSON = genericParseJSON optionsClicked5AllOfData
instance ToJSON Clicked5AllOfData where
  toJSON = genericToJSON optionsClicked5AllOfData

optionsClicked5AllOfData :: Options
optionsClicked5AllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("clicked5AllOfDataTriggerUnderscoreid", "trigger_id")
      , ("clicked5AllOfDataCustomerUnderscoreid", "customer_id")
      , ("clicked5AllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("clicked5AllOfDataActionUnderscoreid", "action_id")
      , ("clicked5AllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("clicked5AllOfDataJourneyUnderscoreid", "journey_id")
      , ("clicked5AllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("clicked5AllOfDataIdentifiers", "identifiers")
      , ("clicked5AllOfDataCampaignUnderscoreid", "campaign_id")
      , ("clicked5AllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("clicked5AllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("clicked5AllOfDataContentUnderscoreid", "content_id")
      , ("clicked5AllOfDataRecipient", "recipient")
      , ("clicked5AllOfDataHref", "href")
      , ("clicked5AllOfDataLinkUnderscoreid", "link_id")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data ClickedAllOfData = ClickedAllOfData
  { clickedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , clickedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , clickedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , clickedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , clickedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , clickedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , clickedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , clickedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , clickedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , clickedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , clickedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , clickedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , clickedAllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , clickedAllOfDataSubject :: Text -- ^ The subject of the email.
  , clickedAllOfDataRecipient :: Text -- ^ The recipient address for an action.
  , clickedAllOfDataHref :: Text -- ^ The URL of the link that a person clicked.
  , clickedAllOfDataLinkUnderscoreid :: Int -- ^ The identifier for the tracked link that a person clicked or tapped.
  , clickedAllOfDataMachine :: Maybe Bool -- ^ If true, the click was generated by a machine.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ClickedAllOfData where
  parseJSON = genericParseJSON optionsClickedAllOfData
instance ToJSON ClickedAllOfData where
  toJSON = genericToJSON optionsClickedAllOfData

optionsClickedAllOfData :: Options
optionsClickedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("clickedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("clickedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("clickedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("clickedAllOfDataActionUnderscoreid", "action_id")
      , ("clickedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("clickedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("clickedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("clickedAllOfDataIdentifiers", "identifiers")
      , ("clickedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("clickedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("clickedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("clickedAllOfDataContentUnderscoreid", "content_id")
      , ("clickedAllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("clickedAllOfDataSubject", "subject")
      , ("clickedAllOfDataRecipient", "recipient")
      , ("clickedAllOfDataHref", "href")
      , ("clickedAllOfDataLinkUnderscoreid", "link_id")
      , ("clickedAllOfDataMachine", "machine")
      ]


-- | 
data CollectionResponse = CollectionResponse
  { collectionResponseBytes :: Maybe Int -- ^ The size of the collection in bytes.
  , collectionResponseCreatedUnderscoreat :: Maybe Int -- ^ The date time when the referenced ID was created.
  , collectionResponseUpdatedUnderscoreat :: Maybe Int -- ^ The date time when the referenced ID was last updated.
  , collectionResponseId :: Maybe Int -- ^ The identifier for the collection. This is how you'll reference the collection from the API.
  , collectionResponseName :: Maybe Text -- ^ The name of the collection. This is how you'll reference the collection in liquid, e.g. `{{collection_name.data_property}}`.
  , collectionResponseRows :: Maybe Int -- ^ Represents the number of objects in the `data` array or CSV rows in your collection schema.
  , collectionResponseSchema :: Maybe [Text] -- ^ Lists the top-level keys that you can reference within this collection. Customer.io does not enforce any of these keys as required from your `data`.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON CollectionResponse where
  parseJSON = genericParseJSON optionsCollectionResponse
instance ToJSON CollectionResponse where
  toJSON = genericToJSON optionsCollectionResponse

optionsCollectionResponse :: Options
optionsCollectionResponse =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("collectionResponseBytes", "bytes")
      , ("collectionResponseCreatedUnderscoreat", "created_at")
      , ("collectionResponseUpdatedUnderscoreat", "updated_at")
      , ("collectionResponseId", "id")
      , ("collectionResponseName", "name")
      , ("collectionResponseRows", "rows")
      , ("collectionResponseSchema", "schema")
      ]


-- | 
data CommonTriggerProps = CommonTriggerProps
  { commonTriggerPropsData :: Maybe (Map.Map String Value) -- ^ Contains information you want to use to populate your broadcast.
  , commonTriggerPropsEmailUnderscoreaddUnderscoreduplicates :: Maybe Bool -- ^ an email address associated with more than one profile id is an error.
  , commonTriggerPropsEmailUnderscoreignoreUnderscoremissing :: Maybe Bool -- ^ If false a missing email address is an error.
  , commonTriggerPropsIdUnderscoreignoreUnderscoremissing :: Maybe Bool -- ^ If false, a missing customer ID is an error.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON CommonTriggerProps where
  parseJSON = genericParseJSON optionsCommonTriggerProps
instance ToJSON CommonTriggerProps where
  toJSON = genericToJSON optionsCommonTriggerProps

optionsCommonTriggerProps :: Options
optionsCommonTriggerProps =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("commonTriggerPropsData", "data")
      , ("commonTriggerPropsEmailUnderscoreaddUnderscoreduplicates", "email_add_duplicates")
      , ("commonTriggerPropsEmailUnderscoreignoreUnderscoremissing", "email_ignore_missing")
      , ("commonTriggerPropsIdUnderscoreignoreUnderscoremissing", "id_ignore_missing")
      ]


-- | 
data ComplexAlert = ComplexAlert
  { complexAlertBody :: Maybe Text -- ^ The body of your push notification.
  , complexAlertTitle :: Maybe Text -- ^ The title of your push notification.
  , complexAlertSubtitle :: Maybe Text -- ^ Additional information that explains the purpose of the notification.
  , complexAlertLaunchDashimage :: Maybe Text -- ^ The name of the launch image file you want to display. When a user launches your app, they'll see this image or storyboard file rather than your app’s normal launch image.
  , complexAlertTitleDashlocDashkey :: Maybe Text -- ^ The key for a localized title string in your app’s Localizable.strings files.
  , complexAlertTitleDashlocDashargs :: Maybe [Text] -- ^ An array of replacement value strings for variables in your title string. Each %@ character in the title-loc-key is replaced by a value from this array, in the order they appear in the title string.
  , complexAlertSubtitleDashlocDashkey :: Maybe Text -- ^ The key for a localized subtitle string in your app’s Localizable.strings file.
  , complexAlertSubtitleDashlocDashargs :: Maybe [Text] -- ^ An array of replacement value strings for variables in your subtitle string. Each %@ character in the subtitle-loc-key is replaced by a value from this array, in the order they appear in the subtitle string.
  , complexAlertLocDashkey :: Maybe Text -- ^ The key for a localized message string in your app’s Localizable.strings file.
  , complexAlertLocDashargs :: Maybe [Text] -- ^ An array of replacement value strings for variables in your message text. Each %@ character in the loc-key is replaced by a value from this array, in the order they appear in the message body.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ComplexAlert where
  parseJSON = genericParseJSON optionsComplexAlert
instance ToJSON ComplexAlert where
  toJSON = genericToJSON optionsComplexAlert

optionsComplexAlert :: Options
optionsComplexAlert =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("complexAlertBody", "body")
      , ("complexAlertTitle", "title")
      , ("complexAlertSubtitle", "subtitle")
      , ("complexAlertLaunchDashimage", "launch-image")
      , ("complexAlertTitleDashlocDashkey", "title-loc-key")
      , ("complexAlertTitleDashlocDashargs", "title-loc-args")
      , ("complexAlertSubtitleDashlocDashkey", "subtitle-loc-key")
      , ("complexAlertSubtitleDashlocDashargs", "subtitle-loc-args")
      , ("complexAlertLocDashkey", "loc-key")
      , ("complexAlertLocDashargs", "loc-args")
      ]


-- | When filtering for people, you can use &#x60;and&#x60; and &#x60;or&#x60; arrays to determine the logic for a group of filter conditions. &#x60;not&#x60; reverses the filter condition and matches when the condition is false. &#x60;segment&#x60; and &#x60;attribute&#x60; represent the individual conditions you can filter a group of people for.
data ComplexAudienceFilter = ComplexAudienceFilter
  { complexAudienceFilterAnd :: Maybe [AndAndInnerOrInner] -- ^ Returns results matching *all* conditions.
  , complexAudienceFilterOr :: Maybe [AndAndInnerOrInner] -- ^ Returns results matching *any* conditions.
  , complexAudienceFilterNot :: Maybe AndAndInnerNot -- ^ 
  , complexAudienceFilterSegment :: Maybe Segment -- ^ 
  , complexAudienceFilterAttribute :: Maybe Attribute -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ComplexAudienceFilter where
  parseJSON = genericParseJSON optionsComplexAudienceFilter
instance ToJSON ComplexAudienceFilter where
  toJSON = genericToJSON optionsComplexAudienceFilter

optionsComplexAudienceFilter :: Options
optionsComplexAudienceFilter =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("complexAudienceFilterAnd", "and")
      , ("complexAudienceFilterOr", "or")
      , ("complexAudienceFilterNot", "not")
      , ("complexAudienceFilterSegment", "segment")
      , ("complexAudienceFilterAttribute", "attribute")
      ]


-- | Set a true/false condition determining which content to show. Use a variable in your condition to populate the condition when you set up your message in Customer.io.
data ConditionalWidget = ConditionalWidget
  { conditionalWidgetType :: Maybe Text -- ^ Defines the widget type.
  , conditionalWidgetCondition :: Maybe Text -- ^ The condition you want to evaluate. You can evaluate a condition using `>`, `<`, `==` & `in` operators. If you don't use an operator, the condition checks if the property is null.
  , conditionalWidgetTrue :: Maybe Value -- ^ The component you want to show when your condition is true.
  , conditionalWidgetFalse :: Maybe Value -- ^ The component you want to show when your condition is false.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ConditionalWidget where
  parseJSON = genericParseJSON optionsConditionalWidget
instance ToJSON ConditionalWidget where
  toJSON = genericToJSON optionsConditionalWidget

optionsConditionalWidget :: Options
optionsConditionalWidget =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("conditionalWidgetType", "type")
      , ("conditionalWidgetCondition", "condition")
      , ("conditionalWidgetTrue", "true")
      , ("conditionalWidgetFalse", "false")
      ]


-- | 
data ContentObject = ContentObject
  { contentObjectId :: Maybe Int -- ^ The identifier of a newsletter variant—a language in a multi-language newsletter or a test in an A/B test.
  , contentObjectNewsletterUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter.
  , contentObjectDeduplicateUnderscoreid :: Maybe Text -- ^ An identifier in the format `id:timestamp` where the id is the id of the object you are working with (Campaigns, Deliveries, Exports, Identities, Newsletters, Segments, and Templates), and the timestamp is the last time the object was updated.
  , contentObjectName :: Maybe Text -- ^ The name of the variant, if it exists.
  , contentObjectLayout :: Maybe Text -- ^ The layout used for the variant, if it exists.
  , contentObjectBody :: Maybe Text -- ^ The body of the variant. You cannot modify the body if you created it with our drag-and-drop editor.
  , contentObjectBodyUnderscoreamp :: Maybe Text -- ^ If your message is an email, this is the AMP-enabled body of your message. If your recipient's email client doesn't support AMP, the `body` represents your fallback message.
  , contentObjectLanguage :: Maybe Text -- ^ The language variant for your message. If you don't use our [localization feature](/localization), or this is the default message, this value is an empty string.
  , contentObjectType :: Maybe Text -- ^ The type of message/action.
  , contentObjectFrom :: Maybe Text -- ^ The address that the message is from, relevant if the action `type` is `email`.
  , contentObjectFromUnderscoreid :: Maybe Int -- ^ The identifier of the `from` address, commonly known as the \"sender\". You can [list your sender identities](#operation/listSenders) to match the ID to a specific address.
  , contentObjectReplyUnderscoreto :: Maybe Text -- ^ The address that receives replies for the message, if applicable.
  , contentObjectReplyUnderscoretoUnderscoreid :: Maybe Int -- ^ The identifier for the `reply_to` address, if applicable. You can [list your sender identities](#operation/listSenders) to match the ID to a specific address.
  , contentObjectPreprocessor :: Maybe Text -- ^ By default, we process CSS before emails leave Customer.io using Premailer. If your message included CSS and pre-processing is not disabled, this key indicates the pre-processor.
  , contentObjectRecipient :: Maybe Text -- ^ The recipient address for an action.
  , contentObjectSubject :: Maybe Text -- ^ The subject line for an `email` action.
  , contentObjectBcc :: Maybe Text -- ^ The blind-copy address(es) for this action.
  , contentObjectFakeUnderscorebcc :: Maybe Bool -- ^ If true, rather than sending true copies to BCC addresses, Customer.io sends a copy of the message with the subject line containing the recipient address(es). 
  , contentObjectPreheaderUnderscoretext :: Maybe Text -- ^ Also known as \"preview text\", this specifies the small block of text shown in an end-user's email inbox, next to, or underneath, the subject line.
  , contentObjectHeaders :: Maybe (Map.Map String Text) -- ^ An object containing headers, where the key is the header name and the value is the header value. Header names and values must be strings and cannot contain any non-ASCII characters or empty spaces. Some headers are reserved and cannot be overwritten.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ContentObject where
  parseJSON = genericParseJSON optionsContentObject
instance ToJSON ContentObject where
  toJSON = genericToJSON optionsContentObject

optionsContentObject :: Options
optionsContentObject =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("contentObjectId", "id")
      , ("contentObjectNewsletterUnderscoreid", "newsletter_id")
      , ("contentObjectDeduplicateUnderscoreid", "deduplicate_id")
      , ("contentObjectName", "name")
      , ("contentObjectLayout", "layout")
      , ("contentObjectBody", "body")
      , ("contentObjectBodyUnderscoreamp", "body_amp")
      , ("contentObjectLanguage", "language")
      , ("contentObjectType", "type")
      , ("contentObjectFrom", "from")
      , ("contentObjectFromUnderscoreid", "from_id")
      , ("contentObjectReplyUnderscoreto", "reply_to")
      , ("contentObjectReplyUnderscoretoUnderscoreid", "reply_to_id")
      , ("contentObjectPreprocessor", "preprocessor")
      , ("contentObjectRecipient", "recipient")
      , ("contentObjectSubject", "subject")
      , ("contentObjectBcc", "bcc")
      , ("contentObjectFakeUnderscorebcc", "fake_bcc")
      , ("contentObjectPreheaderUnderscoretext", "preheader_text")
      , ("contentObjectHeaders", "headers")
      ]


-- | 
data Converted = Converted
  { convertedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , convertedObjectUnderscoretype :: Text -- ^ The event relates to an email action.
  , convertedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , convertedMetric :: Text -- ^ A person matched a conversion goal attributed to an email.
  , convertedData :: DraftedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Converted where
  parseJSON = genericParseJSON optionsConverted
instance ToJSON Converted where
  toJSON = genericToJSON optionsConverted

optionsConverted :: Options
optionsConverted =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("convertedEventUnderscoreid", "event_id")
      , ("convertedObjectUnderscoretype", "object_type")
      , ("convertedTimestamp", "timestamp")
      , ("convertedMetric", "metric")
      , ("convertedData", "data")
      ]


-- | 
data Converted1 = Converted1
  { converted1EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , converted1ObjectUnderscoretype :: Text -- ^ The event relates to an push notification.
  , converted1Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , converted1Metric :: Text -- ^ A person matched a conversion goal attributed to a push notification.
  , converted1Data :: Converted1AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Converted1 where
  parseJSON = genericParseJSON optionsConverted1
instance ToJSON Converted1 where
  toJSON = genericToJSON optionsConverted1

optionsConverted1 :: Options
optionsConverted1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("converted1EventUnderscoreid", "event_id")
      , ("converted1ObjectUnderscoretype", "object_type")
      , ("converted1Timestamp", "timestamp")
      , ("converted1Metric", "metric")
      , ("converted1Data", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data Converted1AllOfData = Converted1AllOfData
  { converted1AllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , converted1AllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , converted1AllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , converted1AllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , converted1AllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , converted1AllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , converted1AllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , converted1AllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , converted1AllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , converted1AllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , converted1AllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , converted1AllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , converted1AllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , converted1AllOfDataRecipients :: [Clicked1AllOfDataAllOfRecipientsInner] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Converted1AllOfData where
  parseJSON = genericParseJSON optionsConverted1AllOfData
instance ToJSON Converted1AllOfData where
  toJSON = genericToJSON optionsConverted1AllOfData

optionsConverted1AllOfData :: Options
optionsConverted1AllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("converted1AllOfDataTriggerUnderscoreid", "trigger_id")
      , ("converted1AllOfDataCustomerUnderscoreid", "customer_id")
      , ("converted1AllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("converted1AllOfDataActionUnderscoreid", "action_id")
      , ("converted1AllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("converted1AllOfDataJourneyUnderscoreid", "journey_id")
      , ("converted1AllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("converted1AllOfDataIdentifiers", "identifiers")
      , ("converted1AllOfDataCampaignUnderscoreid", "campaign_id")
      , ("converted1AllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("converted1AllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("converted1AllOfDataContentUnderscoreid", "content_id")
      , ("converted1AllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("converted1AllOfDataRecipients", "recipients")
      ]


-- | 
data Converted2 = Converted2
  { converted2EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , converted2ObjectUnderscoretype :: Text -- ^ The event relates to an in-app message.
  , converted2Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , converted2Metric :: Text -- ^ A person matched a conversion goal attributed to an in-app notification.
  , converted2Data :: Converted2AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Converted2 where
  parseJSON = genericParseJSON optionsConverted2
instance ToJSON Converted2 where
  toJSON = genericToJSON optionsConverted2

optionsConverted2 :: Options
optionsConverted2 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("converted2EventUnderscoreid", "event_id")
      , ("converted2ObjectUnderscoretype", "object_type")
      , ("converted2Timestamp", "timestamp")
      , ("converted2Metric", "metric")
      , ("converted2Data", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data Converted2AllOfData = Converted2AllOfData
  { converted2AllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , converted2AllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , converted2AllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , converted2AllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , converted2AllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , converted2AllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , converted2AllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , converted2AllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , converted2AllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , converted2AllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , converted2AllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , converted2AllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , converted2AllOfDataRecipient :: Text -- ^ The ID or email address of the person the message was sent to. This identifier is determined by the settings in your message and the value you use to identify your app's users.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Converted2AllOfData where
  parseJSON = genericParseJSON optionsConverted2AllOfData
instance ToJSON Converted2AllOfData where
  toJSON = genericToJSON optionsConverted2AllOfData

optionsConverted2AllOfData :: Options
optionsConverted2AllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("converted2AllOfDataTriggerUnderscoreid", "trigger_id")
      , ("converted2AllOfDataCustomerUnderscoreid", "customer_id")
      , ("converted2AllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("converted2AllOfDataActionUnderscoreid", "action_id")
      , ("converted2AllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("converted2AllOfDataJourneyUnderscoreid", "journey_id")
      , ("converted2AllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("converted2AllOfDataIdentifiers", "identifiers")
      , ("converted2AllOfDataCampaignUnderscoreid", "campaign_id")
      , ("converted2AllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("converted2AllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("converted2AllOfDataContentUnderscoreid", "content_id")
      , ("converted2AllOfDataRecipient", "recipient")
      ]


-- | 
data Converted3 = Converted3
  { converted3EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , converted3ObjectUnderscoretype :: Text -- ^ The event relates to an SMS message.
  , converted3Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , converted3Metric :: Text -- ^ A person matched a conversion goal attributed to an SMS.
  , converted3Data :: Delivered2AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Converted3 where
  parseJSON = genericParseJSON optionsConverted3
instance ToJSON Converted3 where
  toJSON = genericToJSON optionsConverted3

optionsConverted3 :: Options
optionsConverted3 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("converted3EventUnderscoreid", "event_id")
      , ("converted3ObjectUnderscoretype", "object_type")
      , ("converted3Timestamp", "timestamp")
      , ("converted3Metric", "metric")
      , ("converted3Data", "data")
      ]


-- | 
data CreateManSegment200Response = CreateManSegment200Response
  { createManSegment200ResponseSegment :: Maybe ListSegments200ResponseSegmentsInner -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON CreateManSegment200Response where
  parseJSON = genericParseJSON optionsCreateManSegment200Response
instance ToJSON CreateManSegment200Response where
  toJSON = genericToJSON optionsCreateManSegment200Response

optionsCreateManSegment200Response :: Options
optionsCreateManSegment200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("createManSegment200ResponseSegment", "segment")
      ]


-- | 
data CreateManSegmentRequest = CreateManSegmentRequest
  { createManSegmentRequestSegment :: CreateManSegmentRequestSegment -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON CreateManSegmentRequest where
  parseJSON = genericParseJSON optionsCreateManSegmentRequest
instance ToJSON CreateManSegmentRequest where
  toJSON = genericToJSON optionsCreateManSegmentRequest

optionsCreateManSegmentRequest :: Options
optionsCreateManSegmentRequest =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("createManSegmentRequestSegment", "segment")
      ]


-- | 
data CreateManSegmentRequestSegment = CreateManSegmentRequestSegment
  { createManSegmentRequestSegmentName :: Text -- ^ The name of the segment.
  , createManSegmentRequestSegmentDescription :: Maybe Text -- ^ A description for the segment. This can help you understand the purpose of the segment when you encounter it in other requests or in the UI.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON CreateManSegmentRequestSegment where
  parseJSON = genericParseJSON optionsCreateManSegmentRequestSegment
instance ToJSON CreateManSegmentRequestSegment where
  toJSON = genericToJSON optionsCreateManSegmentRequestSegment

optionsCreateManSegmentRequestSegment :: Options
optionsCreateManSegmentRequestSegment =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("createManSegmentRequestSegmentName", "name")
      , ("createManSegmentRequestSegmentDescription", "description")
      ]


-- | 
data CriticalAlert = CriticalAlert
  { criticalAlertCritical :: Maybe Int -- ^ 1 indicates critical. 0 is not critical.
  , criticalAlertName :: Maybe Text -- ^ The name of a sound file in your app’s main bundle or in the Library/Sounds folder of your app’s container directory. Use “default” to play the system sound.
  , criticalAlertVolume :: Maybe Double -- ^ The volume for a critical alert between 0 and 1, where 0 is silent and 1 is full volume.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON CriticalAlert where
  parseJSON = genericParseJSON optionsCriticalAlert
instance ToJSON CriticalAlert where
  toJSON = genericToJSON optionsCriticalAlert

optionsCriticalAlert :: Options
optionsCriticalAlert =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("criticalAlertCritical", "critical")
      , ("criticalAlertName", "name")
      , ("criticalAlertVolume", "volume")
      ]


-- | Properties supported specifically by Android on FCM.
data CustomAndroidProps = CustomAndroidProps
  { customAndroidPropsIcon :: Maybe Text -- ^ Sets the notification icon to `myicon` for drawable resource `myicon`. If you don't send this key, FCM displays the launcher icon from your app manifest.
  , customAndroidPropsSound :: Maybe Text -- ^ The sound that plays when the device receives the notification. Supports `\"default\"` or the filename of a sound resource bundled in your app. Sound files must reside in `/res/raw/`.
  , customAndroidPropsTag :: Maybe Text -- ^ Identifier to replace existing notifications in the notification drawer. If empty, each request creates a new notification.  If you specify a tag, and a notification with the same tag is already being shown, the new notification replaces the existing one in the notification drawer.  
  , customAndroidPropsColor :: Maybe Text -- ^ The notification's icon color in `#rrggbb` format.
  , customAndroidPropsClickUnderscoreaction :: Maybe Text -- ^ The action that occurs when a user taps on the notification. Launches an activity with a matching intent filter when a person taps the notification.
  , customAndroidPropsBodyUnderscorelocUnderscorekey :: Maybe Text -- ^ The key to the body string in the app's string resources that you want to use to localize the body text to the user's current localization. See [String Resources](https://developer.android.com/guide/topics/resources/string-resource/) for more information.
  , customAndroidPropsBodyUnderscorelocUnderscorearg :: Maybe Text -- ^ Variable string values used in place of the format specifiers in `body_loc_key` to localize the body text to the user's current localization. See Formatting and Styling for more information.
  , customAndroidPropsTitleUnderscorelocUnderscorekey :: Maybe Text -- ^ The key to the title string in the app's string resources that you want to use to localize the title text to the user's current localization. See [String Resources](https://developer.android.com/guide/topics/resources/string-resource/) for more information.
  , customAndroidPropsTitleUnderscorelocUnderscorearg :: Maybe Text -- ^ Variable string values used in place of the format specifiers in `title_loc_key` to localize the title text to the user's current localization. See Formatting and Styling for more information.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON CustomAndroidProps where
  parseJSON = genericParseJSON optionsCustomAndroidProps
instance ToJSON CustomAndroidProps where
  toJSON = genericToJSON optionsCustomAndroidProps

optionsCustomAndroidProps :: Options
optionsCustomAndroidProps =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("customAndroidPropsIcon", "icon")
      , ("customAndroidPropsSound", "sound")
      , ("customAndroidPropsTag", "tag")
      , ("customAndroidPropsColor", "color")
      , ("customAndroidPropsClickUnderscoreaction", "click_action")
      , ("customAndroidPropsBodyUnderscorelocUnderscorekey", "body_loc_key")
      , ("customAndroidPropsBodyUnderscorelocUnderscorearg", "body_loc_arg")
      , ("customAndroidPropsTitleUnderscorelocUnderscorekey", "title_loc_key")
      , ("customAndroidPropsTitleUnderscorelocUnderscorearg", "title_loc_arg")
      ]


-- | 
data CustomIntegration = CustomIntegration
  { customIntegrationMessage :: SendPushRequestAllOfCustomPayloadAndroid -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON CustomIntegration where
  parseJSON = genericParseJSON optionsCustomIntegration
instance ToJSON CustomIntegration where
  toJSON = genericToJSON optionsCustomIntegration

optionsCustomIntegration :: Options
optionsCustomIntegration =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("customIntegrationMessage", "message")
      ]


-- | Send your broadcast to a group of people defined by a set of filters.
data CustomRecipients = CustomRecipients
  { customRecipientsRecipients :: AudienceFilter -- ^ 
  , customRecipientsData :: Maybe (Map.Map String Value) -- ^ Contains information you want to use to populate your broadcast.
  , customRecipientsEmailUnderscoreaddUnderscoreduplicates :: Maybe Bool -- ^ an email address associated with more than one profile id is an error.
  , customRecipientsEmailUnderscoreignoreUnderscoremissing :: Maybe Bool -- ^ If false a missing email address is an error.
  , customRecipientsIdUnderscoreignoreUnderscoremissing :: Maybe Bool -- ^ If false, a missing customer ID is an error.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON CustomRecipients where
  parseJSON = genericParseJSON optionsCustomRecipients
instance ToJSON CustomRecipients where
  toJSON = genericToJSON optionsCustomRecipients

optionsCustomRecipients :: Options
optionsCustomRecipients =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("customRecipientsRecipients", "recipients")
      , ("customRecipientsData", "data")
      , ("customRecipientsEmailUnderscoreaddUnderscoreduplicates", "email_add_duplicates")
      , ("customRecipientsEmailUnderscoreignoreUnderscoremissing", "email_ignore_missing")
      , ("customRecipientsIdUnderscoreignoreUnderscoremissing", "id_ignore_missing")
      ]


-- | Events that occur when a customer subscribes or unsubscribes from your messages.
data Customer = Customer
  { customerMetric :: Text -- ^ The event we're reporting to your webhook endpoint. In this case, a person changed their subscription preferences.
  , customerEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , customerObjectUnderscoretype :: Text -- ^ The event represents a customer subscribing, unsubscribing, or changing their subscription preferences.
  , customerTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , customerData :: ChangedSubscriptionPreferencesData -- ^ 
  , customerDeliveryUnderscoretype :: Maybe Text -- ^ The type of delivery that resulted in a change to preferences.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Customer where
  parseJSON = genericParseJSON optionsCustomer
instance ToJSON Customer where
  toJSON = genericToJSON optionsCustomer

optionsCustomer :: Options
optionsCustomer =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("customerMetric", "metric")
      , ("customerEventUnderscoreid", "event_id")
      , ("customerObjectUnderscoretype", "object_type")
      , ("customerTimestamp", "timestamp")
      , ("customerData", "data")
      , ("customerDeliveryUnderscoretype", "delivery_type")
      ]


-- | 
data CustomerAttributesObject = CustomerAttributesObject
  { customerAttributesObjectCustomer :: Maybe GetPersonAttributes200ResponseCustomer -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON CustomerAttributesObject where
  parseJSON = genericParseJSON optionsCustomerAttributesObject
instance ToJSON CustomerAttributesObject where
  toJSON = genericToJSON optionsCustomerAttributesObject

optionsCustomerAttributesObject :: Options
optionsCustomerAttributesObject =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("customerAttributesObjectCustomer", "customer")
      ]


-- | Events that occur when a customer subscribes or unsubscribes from your messages.
data CustomerEvent = CustomerEvent
  { customerEventMetric :: Text -- ^ The event we're reporting to your webhook endpoint. In this case, a person changed their subscription preferences.
  , customerEventEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , customerEventObjectUnderscoretype :: Text -- ^ The event represents a customer subscribing, unsubscribing, or changing their subscription preferences.
  , customerEventTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , customerEventData :: ChangedSubscriptionPreferencesData -- ^ 
  , customerEventDeliveryUnderscoretype :: Maybe Text -- ^ The type of delivery that resulted in a change to preferences.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON CustomerEvent where
  parseJSON = genericParseJSON optionsCustomerEvent
instance ToJSON CustomerEvent where
  toJSON = genericToJSON optionsCustomerEvent

optionsCustomerEvent :: Options
optionsCustomerEvent =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("customerEventMetric", "metric")
      , ("customerEventEventUnderscoreid", "event_id")
      , ("customerEventObjectUnderscoretype", "object_type")
      , ("customerEventTimestamp", "timestamp")
      , ("customerEventData", "data")
      , ("customerEventDeliveryUnderscoretype", "delivery_type")
      ]


-- | 
data CustomerEventCommon = CustomerEventCommon
  { customerEventCommonEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , customerEventCommonObjectUnderscoretype :: Text -- ^ The event represents a customer subscribing, unsubscribing, or changing their subscription preferences.
  , customerEventCommonTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , customerEventCommonData :: SubscribedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON CustomerEventCommon where
  parseJSON = genericParseJSON optionsCustomerEventCommon
instance ToJSON CustomerEventCommon where
  toJSON = genericToJSON optionsCustomerEventCommon

optionsCustomerEventCommon :: Options
optionsCustomerEventCommon =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("customerEventCommonEventUnderscoreid", "event_id")
      , ("customerEventCommonObjectUnderscoretype", "object_type")
      , ("customerEventCommonTimestamp", "timestamp")
      , ("customerEventCommonData", "data")
      ]


-- | Describes the customer events reported from Customer.io to a webhook.
data CustomerEvents = CustomerEvents
  { customerEventsCustomerUnderscoresubscribed :: Maybe Bool -- ^ A person's `unsubscribed` attribute was explicitly set to `false`. Set to true to report `subscribed` events.
  , customerEventsCustomerUnderscoreunsubscribed :: Maybe Bool -- ^ A person's `unsubscribed` attribute was explicitly set to `true`. Set to true to report `unsubscribed` events.
  , customerEventsCustomerUnderscoresubscriptionUnderscorepreferencesUnderscorechanged :: Maybe Bool -- ^ A person's subscription preferences changed. [Learn more about the subscription center](/subscription-center/).
  } deriving (Show, Eq, Generic, Data)

instance FromJSON CustomerEvents where
  parseJSON = genericParseJSON optionsCustomerEvents
instance ToJSON CustomerEvents where
  toJSON = genericToJSON optionsCustomerEvents

optionsCustomerEvents :: Options
optionsCustomerEvents =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("customerEventsCustomerUnderscoresubscribed", "customer_subscribed")
      , ("customerEventsCustomerUnderscoreunsubscribed", "customer_unsubscribed")
      , ("customerEventsCustomerUnderscoresubscriptionUnderscorepreferencesUnderscorechanged", "customer_subscription_preferences_changed")
      ]


-- | Contains identifiers for the person represented in a response—&#x60;id&#x60;, &#x60;cio_id&#x60;, and &#x60;email&#x60; (if your workspace uses the *Email or ID* setting). If the person&#39;s &#x60;id&#x60; or &#x60;email&#x60; is not set, the value will be null.  We recommend that you use this object rather than the less descriptive &#x60;customer_id&#x60;. 
data CustomerIdentifiers = CustomerIdentifiers
  { customerIdentifiersEmail :: Text -- ^ A person's email address, if set.
  , customerIdentifiersId :: Text -- ^ A person's unique ID, if set. This is the same as the `customer_id` if present.
  , customerIdentifiersCioUnderscoreid :: Text -- ^ A unique identifier set by Customer.io, used to reference a person if you want to update their identifiers.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON CustomerIdentifiers where
  parseJSON = genericParseJSON optionsCustomerIdentifiers
instance ToJSON CustomerIdentifiers where
  toJSON = genericToJSON optionsCustomerIdentifiers

optionsCustomerIdentifiers :: Options
optionsCustomerIdentifiers =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("customerIdentifiersEmail", "email")
      , ("customerIdentifiersId", "id")
      , ("customerIdentifiersCioUnderscoreid", "cio_id")
      ]


-- | 
data DataByURL = DataByURL
  { dataByURLName :: Text -- ^ The name of the collection. This is how you'll reference your collection in messages—`{{collection_name.data-property}}`.
  , dataByURLUrl :: Text -- ^ The URL for your CSV or JSON data. If your URL does not return a `Content-Type`, we use the file extension; otherwise, Customer.io assumes your data is JSON. 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON DataByURL where
  parseJSON = genericParseJSON optionsDataByURL
instance ToJSON DataByURL where
  toJSON = genericToJSON optionsDataByURL

optionsDataByURL :: Options
optionsDataByURL =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("dataByURLName", "name")
      , ("dataByURLUrl", "url")
      ]


-- | 
data DataByURL1 = DataByURL1
  { dataByURL1Name :: Maybe Text -- ^ The name of the collection. This is how you'll reference your collection in messages—`{{collection_name.data-property}}`.
  , dataByURL1Url :: Maybe Text -- ^ The URL for your CSV or JSON data. If your URL does not return a `Content-Type`, we use the file extension; otherwise, Customer.io assumes your data is JSON. 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON DataByURL1 where
  parseJSON = genericParseJSON optionsDataByURL1
instance ToJSON DataByURL1 where
  toJSON = genericToJSON optionsDataByURL1

optionsDataByURL1 :: Options
optionsDataByURL1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("dataByURL1Name", "name")
      , ("dataByURL1Url", "url")
      ]


-- | The URL of a data file containing per-user data, each line containing a json map with either &#x60;id&#x60; and &#x60;data&#x60; or &#x60;email&#x60; and &#x60;data&#x60; keys. **When you trigger a broadcast, the people represented by &#x60;id&#x60; and &#x60;email&#x60; must already exist in your workspace.** Requests to trigger a broadcast cannot create new people. 
data DataFileURL = DataFileURL
  { dataFileURLDataUnderscorefileUnderscoreurl :: Text -- ^ The URL of a data file containing per-user data. Each line is a single object representing a person: either a json map of `id` and `data` or `email` and `data` keys. For example, `{\"email\":\"road@runner.net\",\"data\":{\"voucher_code\": \"coyote\"}}`.  The IDs or emails in your data file must already exist in your workspace. Your broadcast cannot add new people to your workspace and won't send messages for IDs or email addresses that don't match a person in your workspace. 
  , dataFileURLData :: Maybe (Map.Map String Value) -- ^ Contains information you want to use to populate your broadcast.
  , dataFileURLEmailUnderscoreaddUnderscoreduplicates :: Maybe Bool -- ^ an email address associated with more than one profile id is an error.
  , dataFileURLEmailUnderscoreignoreUnderscoremissing :: Maybe Bool -- ^ If false a missing email address is an error.
  , dataFileURLIdUnderscoreignoreUnderscoremissing :: Maybe Bool -- ^ If false, a missing customer ID is an error.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON DataFileURL where
  parseJSON = genericParseJSON optionsDataFileURL
instance ToJSON DataFileURL where
  toJSON = genericToJSON optionsDataFileURL

optionsDataFileURL :: Options
optionsDataFileURL =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("dataFileURLDataUnderscorefileUnderscoreurl", "data_file_url")
      , ("dataFileURLData", "data")
      , ("dataFileURLEmailUnderscoreaddUnderscoreduplicates", "email_add_duplicates")
      , ("dataFileURLEmailUnderscoreignoreUnderscoremissing", "email_ignore_missing")
      , ("dataFileURLIdUnderscoreignoreUnderscoremissing", "id_ignore_missing")
      ]


-- | 
data DataObjectOnly = DataObjectOnly
  { dataObjectOnlyData :: DataObjectOnlyData -- ^ 
  , dataObjectOnlyAndroid :: Maybe DataObjectOnlyAndroid -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON DataObjectOnly where
  parseJSON = genericParseJSON optionsDataObjectOnly
instance ToJSON DataObjectOnly where
  toJSON = genericToJSON optionsDataObjectOnly

optionsDataObjectOnly :: Options
optionsDataObjectOnly =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("dataObjectOnlyData", "data")
      , ("dataObjectOnlyAndroid", "android")
      ]


-- | Contains properties that are **not** interpreted by the SDK but are defined by FCM. You need to write your own code to handle these Android push features.
data DataObjectOnlyAndroid = DataObjectOnlyAndroid
  { dataObjectOnlyAndroidNotification :: Maybe SendPushRequestAllOfCustomPayloadAndroidMessageAndroidNotification -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON DataObjectOnlyAndroid where
  parseJSON = genericParseJSON optionsDataObjectOnlyAndroid
instance ToJSON DataObjectOnlyAndroid where
  toJSON = genericToJSON optionsDataObjectOnlyAndroid

optionsDataObjectOnlyAndroid :: Options
optionsDataObjectOnlyAndroid =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("dataObjectOnlyAndroidNotification", "notification")
      ]


-- | Contains all properties interpreted by the SDK.
data DataObjectOnlyData = DataObjectOnlyData
  { dataObjectOnlyDataTitle :: Maybe Text -- ^ The title of your push notification.
  , dataObjectOnlyDataBody :: Maybe Text -- ^ The body of your push notification.
  , dataObjectOnlyDataImage :: Maybe Text -- ^ The URL of an HTTPS image that you want to use for your message.
  , dataObjectOnlyDataLink :: Maybe Text -- ^ A deep link (to a page in your app), or a link to a web page.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON DataObjectOnlyData where
  parseJSON = genericParseJSON optionsDataObjectOnlyData
instance ToJSON DataObjectOnlyData where
  toJSON = genericToJSON optionsDataObjectOnlyData

optionsDataObjectOnlyData :: Options
optionsDataObjectOnlyData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("dataObjectOnlyDataTitle", "title")
      , ("dataObjectOnlyDataBody", "body")
      , ("dataObjectOnlyDataImage", "image")
      , ("dataObjectOnlyDataLink", "link")
      ]


-- | Determines whether your import operation performs &#x60;all&#x60; add/update operations, only adds items (&#x60;only_new&#x60;), or only updates existing items (&#x60;only_existing&#x60;). Defaults to &#x60;all&#x60;. If &#x60;import_type&#x60; is &#x60;event&#x60;, you can only use &#x60;all&#x60; or &#x60;only_existing&#x60;.   This field was previously called &#x60;people_to_process&#x60; - we still support it but will deprecate it soon. 
data DataToProcess = DataToProcess
  { 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON DataToProcess where
  parseJSON = genericParseJSON optionsDataToProcess
instance ToJSON DataToProcess where
  toJSON = genericToJSON optionsDataToProcess

optionsDataToProcess :: Options
optionsDataToProcess =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ 
      ]


-- | 
data Date = Date
  { dateId :: Maybe Int -- ^ The identifier for a campaign.
  , dateDeduplicateUnderscoreid :: Maybe Text -- ^ An identifier in the format `id:timestamp` where the id is the id of the object you are working with (Campaigns, Deliveries, Exports, Identities, Newsletters, Segments, and Templates), and the timestamp is the last time the object was updated.
  , dateName :: Maybe Text -- ^ The name of the campaign.
  , dateType :: Maybe Text -- ^ The type of campaign trigger. **Sunsetting on March 30, 2025**
  , dateCreated :: Maybe Int -- ^ The date time when the referenced ID was created.
  , dateUpdated :: Maybe Int -- ^ The date time when the referenced ID was last updated.
  , dateActive :: Maybe Bool -- ^ If true, the campaign is active and can still send messages.
  , dateState :: Maybe Text -- ^ The status of the campaign.
  , dateActions :: Maybe [SegmentActionsInner] -- ^ An array of actions contained within the campaign.
  , dateFirstUnderscorestarted :: Maybe Int -- ^ The date and time when you first started the campaign and it first became eligible to be triggered.
  , dateTags :: Maybe [Text] -- ^ An array of tags you set on this campaign.
  , dateFilterUnderscoresegmentUnderscoreids :: Maybe [Int] -- ^ A list of segments used in the campaign filter, returned if the campaign audience was filtered on one or more segments.
  , dateFrequency :: Maybe Text -- ^ How often a person will receive this campaign based on the date specified in the campaign trigger.
  , dateDateUnderscoreattribute :: Maybe Text -- ^ The attribute on people's profiles you use to configure the date of the campaign trigger.
  , dateTimezone :: Maybe Text -- ^ The timezone you set to configure the date of the campaign trigger.
  , dateUseUnderscorecustomerUnderscoretimezone :: Maybe Bool -- ^ If you chose \"the user's timezone\" while configuring the date of the campaign trigger, this is `true`. Otherwise, you set a specific timezone so it's `false`.
  , dateStartUnderscorehour :: Maybe Int -- ^ The hour you set the campaign to trigger. Follows the 24-hour clock.
  , dateStartUnderscoreminutes :: Maybe Int -- ^ The minutes you set the campaign to trigger. Follows the 24-hour clock.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Date where
  parseJSON = genericParseJSON optionsDate
instance ToJSON Date where
  toJSON = genericToJSON optionsDate

optionsDate :: Options
optionsDate =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("dateId", "id")
      , ("dateDeduplicateUnderscoreid", "deduplicate_id")
      , ("dateName", "name")
      , ("dateType", "type")
      , ("dateCreated", "created")
      , ("dateUpdated", "updated")
      , ("dateActive", "active")
      , ("dateState", "state")
      , ("dateActions", "actions")
      , ("dateFirstUnderscorestarted", "first_started")
      , ("dateTags", "tags")
      , ("dateFilterUnderscoresegmentUnderscoreids", "filter_segment_ids")
      , ("dateFrequency", "frequency")
      , ("dateDateUnderscoreattribute", "date_attribute")
      , ("dateTimezone", "timezone")
      , ("dateUseUnderscorecustomerUnderscoretimezone", "use_customer_timezone")
      , ("dateStartUnderscorehour", "start_hour")
      , ("dateStartUnderscoreminutes", "start_minutes")
      ]


-- | Send your broadcast to the default set of recipients defined in the UI.
data DefaultAudience = DefaultAudience
  { defaultAudienceData :: Maybe (Map.Map String Value) -- ^ Contains information you want to use to populate your broadcast.
  , defaultAudienceEmailUnderscoreaddUnderscoreduplicates :: Maybe Bool -- ^ an email address associated with more than one profile id is an error.
  , defaultAudienceEmailUnderscoreignoreUnderscoremissing :: Maybe Bool -- ^ If false a missing email address is an error.
  , defaultAudienceIdUnderscoreignoreUnderscoremissing :: Maybe Bool -- ^ If false, a missing customer ID is an error.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON DefaultAudience where
  parseJSON = genericParseJSON optionsDefaultAudience
instance ToJSON DefaultAudience where
  toJSON = genericToJSON optionsDefaultAudience

optionsDefaultAudience :: Options
optionsDefaultAudience =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("defaultAudienceData", "data")
      , ("defaultAudienceEmailUnderscoreaddUnderscoreduplicates", "email_add_duplicates")
      , ("defaultAudienceEmailUnderscoreignoreUnderscoremissing", "email_ignore_missing")
      , ("defaultAudienceIdUnderscoreignoreUnderscoremissing", "id_ignore_missing")
      ]


-- | Delete a person from your workspace.
data Delete = Delete
  { deleteType :: Text -- ^ The operation modifies a person in Customer.io
  , deleteIdentifiers :: Identify1AllOfIdentifiers -- ^ 
  , deleteAction :: Text -- ^ Indicates that the operation will `delete` the the item of the specified `type`.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Delete where
  parseJSON = genericParseJSON optionsDelete
instance ToJSON Delete where
  toJSON = genericToJSON optionsDelete

optionsDelete :: Options
optionsDelete =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("deleteType", "type")
      , ("deleteIdentifiers", "identifiers")
      , ("deleteAction", "action")
      ]


-- | Delete devices that belong to a person.
data DeleteDevice = DeleteDevice
  { deleteDeviceType :: Text -- ^ The operation modifies a person in Customer.io
  , deleteDeviceIdentifiers :: Identify1AllOfIdentifiers -- ^ 
  , deleteDeviceAction :: Text -- ^ Delete a device from a person's profile.
  , deleteDeviceDevice :: DeleteDeviceAllOfDevice -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON DeleteDevice where
  parseJSON = genericParseJSON optionsDeleteDevice
instance ToJSON DeleteDevice where
  toJSON = genericToJSON optionsDeleteDevice

optionsDeleteDevice :: Options
optionsDeleteDevice =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("deleteDeviceType", "type")
      , ("deleteDeviceIdentifiers", "identifiers")
      , ("deleteDeviceAction", "action")
      , ("deleteDeviceDevice", "device")
      ]


-- | The device you want to remove.
data DeleteDeviceAllOfDevice = DeleteDeviceAllOfDevice
  { deleteDeviceAllOfDeviceToken :: Text -- ^ The token of the device you want to remove.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON DeleteDeviceAllOfDevice where
  parseJSON = genericParseJSON optionsDeleteDeviceAllOfDevice
instance ToJSON DeleteDeviceAllOfDevice where
  toJSON = genericToJSON optionsDeleteDeviceAllOfDevice

optionsDeleteDeviceAllOfDevice :: Options
optionsDeleteDeviceAllOfDevice =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("deleteDeviceAllOfDeviceToken", "token")
      ]


-- | Remove multiple object relationships from a person.
data DeleteRelationships = DeleteRelationships
  { deleteRelationshipsType :: Text -- ^ The operation modifies a person in Customer.io
  , deleteRelationshipsIdentifiers :: Identify1AllOfIdentifiers -- ^ 
  , deleteRelationshipsAction :: Text -- ^ This operation deletes an object relationship from one or more people.
  , deleteRelationshipsCioUnderscorerelationships :: [Identify1AllOfCioRelationshipsInner] -- ^ Each object in the array represents a relationship you want to add to, or remove from, a person.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON DeleteRelationships where
  parseJSON = genericParseJSON optionsDeleteRelationships
instance ToJSON DeleteRelationships where
  toJSON = genericToJSON optionsDeleteRelationships

optionsDeleteRelationships :: Options
optionsDeleteRelationships =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("deleteRelationshipsType", "type")
      , ("deleteRelationshipsIdentifiers", "identifiers")
      , ("deleteRelationshipsAction", "action")
      , ("deleteRelationshipsCioUnderscorerelationships", "cio_relationships")
      ]


-- | 
data DeleteSnippet400Response = DeleteSnippet400Response
  { deleteSnippet400ResponseErrors :: Maybe [DeleteSnippet400ResponseErrorsInner] -- ^ Contains an array of error objects.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON DeleteSnippet400Response where
  parseJSON = genericParseJSON optionsDeleteSnippet400Response
instance ToJSON DeleteSnippet400Response where
  toJSON = genericToJSON optionsDeleteSnippet400Response

optionsDeleteSnippet400Response :: Options
optionsDeleteSnippet400Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("deleteSnippet400ResponseErrors", "errors")
      ]


-- | 
data DeleteSnippet400ResponseErrorsInner = DeleteSnippet400ResponseErrorsInner
  { deleteSnippet400ResponseErrorsInnerDetail :: Maybe Text -- ^ Describes the error.
  , deleteSnippet400ResponseErrorsInnerStatus :: Maybe Text -- ^ The HTTP status code.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON DeleteSnippet400ResponseErrorsInner where
  parseJSON = genericParseJSON optionsDeleteSnippet400ResponseErrorsInner
instance ToJSON DeleteSnippet400ResponseErrorsInner where
  toJSON = genericToJSON optionsDeleteSnippet400ResponseErrorsInner

optionsDeleteSnippet400ResponseErrorsInner :: Options
optionsDeleteSnippet400ResponseErrorsInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("deleteSnippet400ResponseErrorsInnerDetail", "detail")
      , ("deleteSnippet400ResponseErrorsInnerStatus", "status")
      ]


-- | 
data Delivered = Delivered
  { deliveredEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , deliveredObjectUnderscoretype :: Text -- ^ The event relates to an email action.
  , deliveredTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , deliveredMetric :: Text -- ^ A message was successfully delivered to a recipient.
  , deliveredData :: DraftedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Delivered where
  parseJSON = genericParseJSON optionsDelivered
instance ToJSON Delivered where
  toJSON = genericToJSON optionsDelivered

optionsDelivered :: Options
optionsDelivered =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("deliveredEventUnderscoreid", "event_id")
      , ("deliveredObjectUnderscoretype", "object_type")
      , ("deliveredTimestamp", "timestamp")
      , ("deliveredMetric", "metric")
      , ("deliveredData", "data")
      ]


-- | 
data Delivered1 = Delivered1
  { delivered1EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , delivered1ObjectUnderscoretype :: Text -- ^ The event relates to an push notification.
  , delivered1Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , delivered1Metric :: Text -- ^ A push notification was delivered to a recipient device.
  , delivered1Data :: Delivered1AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Delivered1 where
  parseJSON = genericParseJSON optionsDelivered1
instance ToJSON Delivered1 where
  toJSON = genericToJSON optionsDelivered1

optionsDelivered1 :: Options
optionsDelivered1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("delivered1EventUnderscoreid", "event_id")
      , ("delivered1ObjectUnderscoretype", "object_type")
      , ("delivered1Timestamp", "timestamp")
      , ("delivered1Metric", "metric")
      , ("delivered1Data", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data Delivered1AllOfData = Delivered1AllOfData
  { delivered1AllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , delivered1AllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , delivered1AllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , delivered1AllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , delivered1AllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , delivered1AllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , delivered1AllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , delivered1AllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , delivered1AllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , delivered1AllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , delivered1AllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , delivered1AllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , delivered1AllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , delivered1AllOfDataRecipients :: [Delivered1AllOfDataAllOfRecipientsInner] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Delivered1AllOfData where
  parseJSON = genericParseJSON optionsDelivered1AllOfData
instance ToJSON Delivered1AllOfData where
  toJSON = genericToJSON optionsDelivered1AllOfData

optionsDelivered1AllOfData :: Options
optionsDelivered1AllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("delivered1AllOfDataTriggerUnderscoreid", "trigger_id")
      , ("delivered1AllOfDataCustomerUnderscoreid", "customer_id")
      , ("delivered1AllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("delivered1AllOfDataActionUnderscoreid", "action_id")
      , ("delivered1AllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("delivered1AllOfDataJourneyUnderscoreid", "journey_id")
      , ("delivered1AllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("delivered1AllOfDataIdentifiers", "identifiers")
      , ("delivered1AllOfDataCampaignUnderscoreid", "campaign_id")
      , ("delivered1AllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("delivered1AllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("delivered1AllOfDataContentUnderscoreid", "content_id")
      , ("delivered1AllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("delivered1AllOfDataRecipients", "recipients")
      ]


-- | Describes the device the push was sent to.
data Delivered1AllOfDataAllOfRecipientsInner = Delivered1AllOfDataAllOfRecipientsInner
  { delivered1AllOfDataAllOfRecipientsInnerDeviceUnderscoreid :: Text -- ^ The device identifier/token.
  , delivered1AllOfDataAllOfRecipientsInnerDeviceUnderscoreplatform :: Maybe Text -- ^ The device platform—ios or android.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Delivered1AllOfDataAllOfRecipientsInner where
  parseJSON = genericParseJSON optionsDelivered1AllOfDataAllOfRecipientsInner
instance ToJSON Delivered1AllOfDataAllOfRecipientsInner where
  toJSON = genericToJSON optionsDelivered1AllOfDataAllOfRecipientsInner

optionsDelivered1AllOfDataAllOfRecipientsInner :: Options
optionsDelivered1AllOfDataAllOfRecipientsInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("delivered1AllOfDataAllOfRecipientsInnerDeviceUnderscoreid", "device_id")
      , ("delivered1AllOfDataAllOfRecipientsInnerDeviceUnderscoreplatform", "device_platform")
      ]


-- | 
data Delivered2 = Delivered2
  { delivered2EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , delivered2ObjectUnderscoretype :: Text -- ^ The event relates to an SMS message.
  , delivered2Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , delivered2Metric :: Text -- ^ An SMS notification was delivered to a recipient.
  , delivered2Data :: Delivered2AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Delivered2 where
  parseJSON = genericParseJSON optionsDelivered2
instance ToJSON Delivered2 where
  toJSON = genericToJSON optionsDelivered2

optionsDelivered2 :: Options
optionsDelivered2 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("delivered2EventUnderscoreid", "event_id")
      , ("delivered2ObjectUnderscoretype", "object_type")
      , ("delivered2Timestamp", "timestamp")
      , ("delivered2Metric", "metric")
      , ("delivered2Data", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data Delivered2AllOfData = Delivered2AllOfData
  { delivered2AllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , delivered2AllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , delivered2AllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , delivered2AllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , delivered2AllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , delivered2AllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , delivered2AllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , delivered2AllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , delivered2AllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , delivered2AllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , delivered2AllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , delivered2AllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , delivered2AllOfDataRecipient :: Text -- ^ The MSISDN (phone number) of the SMS recipient.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Delivered2AllOfData where
  parseJSON = genericParseJSON optionsDelivered2AllOfData
instance ToJSON Delivered2AllOfData where
  toJSON = genericToJSON optionsDelivered2AllOfData

optionsDelivered2AllOfData :: Options
optionsDelivered2AllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("delivered2AllOfDataTriggerUnderscoreid", "trigger_id")
      , ("delivered2AllOfDataCustomerUnderscoreid", "customer_id")
      , ("delivered2AllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("delivered2AllOfDataActionUnderscoreid", "action_id")
      , ("delivered2AllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("delivered2AllOfDataJourneyUnderscoreid", "journey_id")
      , ("delivered2AllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("delivered2AllOfDataIdentifiers", "identifiers")
      , ("delivered2AllOfDataCampaignUnderscoreid", "campaign_id")
      , ("delivered2AllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("delivered2AllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("delivered2AllOfDataContentUnderscoreid", "content_id")
      , ("delivered2AllOfDataRecipient", "recipient")
      ]


-- | The \&quot;delivery\&quot; type lets you attribute metrics to messages that don&#39;t self-report back to Customer.io, like push and in-app notifications.
data DeliveryOperations = DeliveryOperations
  { deliveryOperationsType :: Text -- ^ The \"delivery\" type lets you attribute metrics to messages that don't self-report back to Customer.io, like push and in-app notifications.
  , deliveryOperationsAction :: Text -- ^ An `event` action indicates a delivery event. Use the `name` to determine the specific metric that you want to attribute to this delivery.
  , deliveryOperationsIdentifiers :: DeliveryOperationsIdentifiers -- ^ 
  , deliveryOperationsName :: Text -- ^ The name of the metric you want to attribute to this \"delivery\".
  , deliveryOperationsAttributes :: DeliveryOperationsAttributes -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON DeliveryOperations where
  parseJSON = genericParseJSON optionsDeliveryOperations
instance ToJSON DeliveryOperations where
  toJSON = genericToJSON optionsDeliveryOperations

optionsDeliveryOperations :: Options
optionsDeliveryOperations =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("deliveryOperationsType", "type")
      , ("deliveryOperationsAction", "action")
      , ("deliveryOperationsIdentifiers", "identifiers")
      , ("deliveryOperationsName", "name")
      , ("deliveryOperationsAttributes", "attributes")
      ]


-- | Contains information about the delivery and the individual who received the message.
data DeliveryOperationsAttributes = DeliveryOperationsAttributes
  { deliveryOperationsAttributesDeviceUnderscoretoken :: Text -- ^ The device that received the message.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON DeliveryOperationsAttributes where
  parseJSON = genericParseJSON optionsDeliveryOperationsAttributes
instance ToJSON DeliveryOperationsAttributes where
  toJSON = genericToJSON optionsDeliveryOperationsAttributes

optionsDeliveryOperationsAttributes :: Options
optionsDeliveryOperationsAttributes =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("deliveryOperationsAttributesDeviceUnderscoretoken", "device_token")
      ]


-- | Contains identifiers for the delivery itself.
data DeliveryOperationsIdentifiers = DeliveryOperationsIdentifiers
  { deliveryOperationsIdentifiersId :: Maybe Text -- ^ The `delivery_id` for the delivery that you want to attribute metrics to.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON DeliveryOperationsIdentifiers where
  parseJSON = genericParseJSON optionsDeliveryOperationsIdentifiers
instance ToJSON DeliveryOperationsIdentifiers where
  toJSON = genericToJSON optionsDeliveryOperationsIdentifiers

optionsDeliveryOperationsIdentifiers :: Options
optionsDeliveryOperationsIdentifiers =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("deliveryOperationsIdentifiersId", "id")
      ]


-- | The properties representing an individual device. [Our SDK&#39;s](/sdk/) gather all the properties defined below automatically, unless you disable the &#x60;autoTrackDeviceAttributes&#x60; setting. You can reference the properties outside the &#x60;attributes&#x60; object in segments or in Liquid.
data DeviceObject = DeviceObject
  { deviceObjectId :: Text -- ^ The device token.
  , deviceObjectLastUnderscoreused :: Maybe Int -- ^ The `timestamp` when you last identified this device. If you don't pass a timestamp when you add or update a device, we use the time of the request itself. Our SDKs identify a device when a person launches their app.
  , deviceObjectPlatform :: Text -- ^ The device/messaging platform.
  , deviceObjectAttributes :: Maybe SendPushRequestAllOfCustomDeviceAllOfAttributes -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON DeviceObject where
  parseJSON = genericParseJSON optionsDeviceObject
instance ToJSON DeviceObject where
  toJSON = genericToJSON optionsDeviceObject

optionsDeviceObject :: Options
optionsDeviceObject =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("deviceObjectId", "id")
      , ("deviceObjectLastUnderscoreused", "last_used")
      , ("deviceObjectPlatform", "platform")
      , ("deviceObjectAttributes", "attributes")
      ]


-- | The properties representing an individual device in Journeys when sent from a Customer.io SDK that natively supports Data Pipelines (iOS 3.0, Android 4.0, or later versions). [Our Data Pipelines-enabled SDK&#39;s](/sdk/) gather all the properties defined below automatically unless you disable the &#x60;autoTrackDeviceAttributes&#x60; setting.
data DeviceObjectCdp = DeviceObjectCdp
  { deviceObjectCdpId :: Text -- ^ The device token.
  , deviceObjectCdpLastUnderscoreused :: Maybe Int -- ^ The `timestamp` when you last identified this device. If you don't pass a timestamp when you add or update a device, we use the time of the request itself. Our SDKs identify a device when a person launches their app.
  , deviceObjectCdpPlatform :: Text -- ^ The device/messaging platform.
  , deviceObjectCdpAttributes :: Maybe DeviceObjectCdpCommonAttributes -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON DeviceObjectCdp where
  parseJSON = genericParseJSON optionsDeviceObjectCdp
instance ToJSON DeviceObjectCdp where
  toJSON = genericToJSON optionsDeviceObjectCdp

optionsDeviceObjectCdp :: Options
optionsDeviceObjectCdp =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("deviceObjectCdpId", "id")
      , ("deviceObjectCdpLastUnderscoreused", "last_used")
      , ("deviceObjectCdpPlatform", "platform")
      , ("deviceObjectCdpAttributes", "attributes")
      ]


-- | Device information common to the v1 and v2 APIs.
data DeviceObjectCdpCommon = DeviceObjectCdpCommon
  { deviceObjectCdpCommonLastUnderscoreused :: Maybe Int -- ^ The `timestamp` when you last identified this device. If you don't pass a timestamp when you add or update a device, we use the time of the request itself. Our SDKs identify a device when a person launches their app.
  , deviceObjectCdpCommonPlatform :: Text -- ^ The device/messaging platform.
  , deviceObjectCdpCommonAttributes :: Maybe DeviceObjectCdpCommonAttributes -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON DeviceObjectCdpCommon where
  parseJSON = genericParseJSON optionsDeviceObjectCdpCommon
instance ToJSON DeviceObjectCdpCommon where
  toJSON = genericToJSON optionsDeviceObjectCdpCommon

optionsDeviceObjectCdpCommon :: Options
optionsDeviceObjectCdpCommon =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("deviceObjectCdpCommonLastUnderscoreused", "last_used")
      , ("deviceObjectCdpCommonPlatform", "platform")
      , ("deviceObjectCdpCommonAttributes", "attributes")
      ]


-- | Attributes that you can reference to segment your audience—like a person&#39;s attributes, but specific to a device. These can be either the attributes defined below or custom key-value attributes.
newtype DeviceObjectCdpCommonAttributes = DeviceObjectCdpCommonAttributes { unDeviceObjectCdpCommonAttributes :: (Map.Map Text Text) }
  deriving (Show, Eq, FromJSON, ToJSON, Generic, Data)

-- | Device information common to the v1 and v2 APIs.
data DeviceObjectCommon = DeviceObjectCommon
  { deviceObjectCommonLastUnderscoreused :: Maybe Int -- ^ The `timestamp` when you last identified this device. If you don't pass a timestamp when you add or update a device, we use the time of the request itself. Our SDKs identify a device when a person launches their app.
  , deviceObjectCommonPlatform :: Text -- ^ The device/messaging platform.
  , deviceObjectCommonAttributes :: Maybe SendPushRequestAllOfCustomDeviceAllOfAttributes -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON DeviceObjectCommon where
  parseJSON = genericParseJSON optionsDeviceObjectCommon
instance ToJSON DeviceObjectCommon where
  toJSON = genericToJSON optionsDeviceObjectCommon

optionsDeviceObjectCommon :: Options
optionsDeviceObjectCommon =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("deviceObjectCommonLastUnderscoreused", "last_used")
      , ("deviceObjectCommonPlatform", "platform")
      , ("deviceObjectCommonAttributes", "attributes")
      ]


-- | The device&#39;s operating system.
data DevicePlatform = DevicePlatform
  { 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON DevicePlatform where
  parseJSON = genericParseJSON optionsDevicePlatform
instance ToJSON DevicePlatform where
  toJSON = genericToJSON optionsDevicePlatform

optionsDevicePlatform :: Options
optionsDevicePlatform =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ 
      ]


-- | 
data Drafted = Drafted
  { draftedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , draftedObjectUnderscoretype :: Text -- ^ The event relates to an email action.
  , draftedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , draftedMetric :: Text -- ^ The metric recorded by the event. For `customer` events, this is whether the customer explicitly subscribed or unsubscribed.
  , draftedData :: DraftedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Drafted where
  parseJSON = genericParseJSON optionsDrafted
instance ToJSON Drafted where
  toJSON = genericToJSON optionsDrafted

optionsDrafted :: Options
optionsDrafted =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("draftedEventUnderscoreid", "event_id")
      , ("draftedObjectUnderscoretype", "object_type")
      , ("draftedTimestamp", "timestamp")
      , ("draftedMetric", "metric")
      , ("draftedData", "data")
      ]


-- | 
data Drafted1 = Drafted1
  { drafted1EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , drafted1ObjectUnderscoretype :: Text -- ^ The event relates to an push notification.
  , drafted1Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , drafted1Metric :: Text -- ^ A push notification was drafted.
  , drafted1Data :: Drafted1AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Drafted1 where
  parseJSON = genericParseJSON optionsDrafted1
instance ToJSON Drafted1 where
  toJSON = genericToJSON optionsDrafted1

optionsDrafted1 :: Options
optionsDrafted1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("drafted1EventUnderscoreid", "event_id")
      , ("drafted1ObjectUnderscoretype", "object_type")
      , ("drafted1Timestamp", "timestamp")
      , ("drafted1Metric", "metric")
      , ("drafted1Data", "data")
      ]


-- | 
data Drafted1AllOfData = Drafted1AllOfData
  { drafted1AllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , drafted1AllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , drafted1AllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , drafted1AllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , drafted1AllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , drafted1AllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , drafted1AllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , drafted1AllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , drafted1AllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , drafted1AllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , drafted1AllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , drafted1AllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , drafted1AllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Drafted1AllOfData where
  parseJSON = genericParseJSON optionsDrafted1AllOfData
instance ToJSON Drafted1AllOfData where
  toJSON = genericToJSON optionsDrafted1AllOfData

optionsDrafted1AllOfData :: Options
optionsDrafted1AllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("drafted1AllOfDataTriggerUnderscoreid", "trigger_id")
      , ("drafted1AllOfDataCustomerUnderscoreid", "customer_id")
      , ("drafted1AllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("drafted1AllOfDataActionUnderscoreid", "action_id")
      , ("drafted1AllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("drafted1AllOfDataJourneyUnderscoreid", "journey_id")
      , ("drafted1AllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("drafted1AllOfDataIdentifiers", "identifiers")
      , ("drafted1AllOfDataCampaignUnderscoreid", "campaign_id")
      , ("drafted1AllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("drafted1AllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("drafted1AllOfDataContentUnderscoreid", "content_id")
      , ("drafted1AllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      ]


-- | 
data Drafted2 = Drafted2
  { drafted2EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , drafted2ObjectUnderscoretype :: Text -- ^ The event relates to an in-app message.
  , drafted2Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , drafted2Metric :: Text -- ^ An in-app message draft was created.
  , drafted2Data :: Drafted2AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Drafted2 where
  parseJSON = genericParseJSON optionsDrafted2
instance ToJSON Drafted2 where
  toJSON = genericToJSON optionsDrafted2

optionsDrafted2 :: Options
optionsDrafted2 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("drafted2EventUnderscoreid", "event_id")
      , ("drafted2ObjectUnderscoretype", "object_type")
      , ("drafted2Timestamp", "timestamp")
      , ("drafted2Metric", "metric")
      , ("drafted2Data", "data")
      ]


-- | 
data Drafted2AllOfData = Drafted2AllOfData
  { drafted2AllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , drafted2AllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , drafted2AllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , drafted2AllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , drafted2AllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , drafted2AllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , drafted2AllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , drafted2AllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , drafted2AllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , drafted2AllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , drafted2AllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , drafted2AllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Drafted2AllOfData where
  parseJSON = genericParseJSON optionsDrafted2AllOfData
instance ToJSON Drafted2AllOfData where
  toJSON = genericToJSON optionsDrafted2AllOfData

optionsDrafted2AllOfData :: Options
optionsDrafted2AllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("drafted2AllOfDataTriggerUnderscoreid", "trigger_id")
      , ("drafted2AllOfDataCustomerUnderscoreid", "customer_id")
      , ("drafted2AllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("drafted2AllOfDataActionUnderscoreid", "action_id")
      , ("drafted2AllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("drafted2AllOfDataJourneyUnderscoreid", "journey_id")
      , ("drafted2AllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("drafted2AllOfDataIdentifiers", "identifiers")
      , ("drafted2AllOfDataCampaignUnderscoreid", "campaign_id")
      , ("drafted2AllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("drafted2AllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("drafted2AllOfDataContentUnderscoreid", "content_id")
      ]


-- | 
data Drafted3 = Drafted3
  { drafted3EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , drafted3ObjectUnderscoretype :: Text -- ^ The event relates to an SMS message.
  , drafted3Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , drafted3Metric :: Text -- ^ An SMS notification was drafted.
  , drafted3Data :: Drafted2AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Drafted3 where
  parseJSON = genericParseJSON optionsDrafted3
instance ToJSON Drafted3 where
  toJSON = genericToJSON optionsDrafted3

optionsDrafted3 :: Options
optionsDrafted3 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("drafted3EventUnderscoreid", "event_id")
      , ("drafted3ObjectUnderscoretype", "object_type")
      , ("drafted3Timestamp", "timestamp")
      , ("drafted3Metric", "metric")
      , ("drafted3Data", "data")
      ]


-- | 
data Drafted4 = Drafted4
  { drafted4EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , drafted4ObjectUnderscoretype :: Text -- ^ The event relates to a Slack message.
  , drafted4Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , drafted4Metric :: Text -- ^ A slack message was drafted.
  , drafted4Data :: Drafted2AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Drafted4 where
  parseJSON = genericParseJSON optionsDrafted4
instance ToJSON Drafted4 where
  toJSON = genericToJSON optionsDrafted4

optionsDrafted4 :: Options
optionsDrafted4 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("drafted4EventUnderscoreid", "event_id")
      , ("drafted4ObjectUnderscoretype", "object_type")
      , ("drafted4Timestamp", "timestamp")
      , ("drafted4Metric", "metric")
      , ("drafted4Data", "data")
      ]


-- | 
data Drafted5 = Drafted5
  { drafted5EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , drafted5ObjectUnderscoretype :: Text -- ^ The event relates to a webhook.
  , drafted5Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , drafted5Metric :: Text -- ^ A webhook draft was created.
  , drafted5Data :: Drafted2AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Drafted5 where
  parseJSON = genericParseJSON optionsDrafted5
instance ToJSON Drafted5 where
  toJSON = genericToJSON optionsDrafted5

optionsDrafted5 :: Options
optionsDrafted5 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("drafted5EventUnderscoreid", "event_id")
      , ("drafted5ObjectUnderscoretype", "object_type")
      , ("drafted5Timestamp", "timestamp")
      , ("drafted5Metric", "metric")
      , ("drafted5Data", "data")
      ]


-- | 
data Drafted6 = Drafted6
  { drafted6EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , drafted6ObjectUnderscoretype :: Text -- ^ The event relates to a Slack message.
  , drafted6Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , drafted6Metric :: Text -- ^ A slack message was drafted.
  , drafted6Data :: SmsDraftedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Drafted6 where
  parseJSON = genericParseJSON optionsDrafted6
instance ToJSON Drafted6 where
  toJSON = genericToJSON optionsDrafted6

optionsDrafted6 :: Options
optionsDrafted6 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("drafted6EventUnderscoreid", "event_id")
      , ("drafted6ObjectUnderscoretype", "object_type")
      , ("drafted6Timestamp", "timestamp")
      , ("drafted6Metric", "metric")
      , ("drafted6Data", "data")
      ]


-- | 
data Drafted7 = Drafted7
  { drafted7EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , drafted7ObjectUnderscoretype :: Text -- ^ The event relates to a webhook.
  , drafted7Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , drafted7Metric :: Text -- ^ A webhook draft was created.
  , drafted7Data :: SlackDraftedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Drafted7 where
  parseJSON = genericParseJSON optionsDrafted7
instance ToJSON Drafted7 where
  toJSON = genericToJSON optionsDrafted7

optionsDrafted7 :: Options
optionsDrafted7 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("drafted7EventUnderscoreid", "event_id")
      , ("drafted7ObjectUnderscoretype", "object_type")
      , ("drafted7Timestamp", "timestamp")
      , ("drafted7Metric", "metric")
      , ("drafted7Data", "data")
      ]


-- | 
data Drafted8 = Drafted8
  { drafted8EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , drafted8ObjectUnderscoretype :: Text -- ^ The event relates to an in-app message.
  , drafted8Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , drafted8Metric :: Text -- ^ An in-app message draft was created.
  , drafted8Data :: WebhookDraftedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Drafted8 where
  parseJSON = genericParseJSON optionsDrafted8
instance ToJSON Drafted8 where
  toJSON = genericToJSON optionsDrafted8

optionsDrafted8 :: Options
optionsDrafted8 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("drafted8EventUnderscoreid", "event_id")
      , ("drafted8ObjectUnderscoretype", "object_type")
      , ("drafted8Timestamp", "timestamp")
      , ("drafted8Metric", "metric")
      , ("drafted8Data", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data DraftedAllOfData = DraftedAllOfData
  { draftedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , draftedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , draftedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , draftedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , draftedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , draftedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , draftedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , draftedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , draftedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , draftedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , draftedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , draftedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , draftedAllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , draftedAllOfDataSubject :: Text -- ^ The subject of the email.
  , draftedAllOfDataRecipient :: Text -- ^ The recipient address for an action.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON DraftedAllOfData where
  parseJSON = genericParseJSON optionsDraftedAllOfData
instance ToJSON DraftedAllOfData where
  toJSON = genericToJSON optionsDraftedAllOfData

optionsDraftedAllOfData :: Options
optionsDraftedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("draftedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("draftedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("draftedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("draftedAllOfDataActionUnderscoreid", "action_id")
      , ("draftedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("draftedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("draftedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("draftedAllOfDataIdentifiers", "identifiers")
      , ("draftedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("draftedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("draftedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("draftedAllOfDataContentUnderscoreid", "content_id")
      , ("draftedAllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("draftedAllOfDataSubject", "subject")
      , ("draftedAllOfDataRecipient", "recipient")
      ]


-- | 
data Dropped = Dropped
  { droppedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , droppedObjectUnderscoretype :: Text -- ^ The event relates to an email action.
  , droppedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , droppedMetric :: Text -- ^ Customer.io did not send an email because it was addressed to a person who was suppressed.
  , droppedData :: BouncedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Dropped where
  parseJSON = genericParseJSON optionsDropped
instance ToJSON Dropped where
  toJSON = genericToJSON optionsDropped

optionsDropped :: Options
optionsDropped =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("droppedEventUnderscoreid", "event_id")
      , ("droppedObjectUnderscoretype", "object_type")
      , ("droppedTimestamp", "timestamp")
      , ("droppedMetric", "metric")
      , ("droppedData", "data")
      ]


-- | 
data Dropped1 = Dropped1
  { dropped1EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , dropped1ObjectUnderscoretype :: Text -- ^ The event relates to an push notification.
  , dropped1Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , dropped1Metric :: Text -- ^ A push notification wasn't sent because at least one device token previously bounced.
  , dropped1Data :: Bounced1AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Dropped1 where
  parseJSON = genericParseJSON optionsDropped1
instance ToJSON Dropped1 where
  toJSON = genericToJSON optionsDropped1

optionsDropped1 :: Options
optionsDropped1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("dropped1EventUnderscoreid", "event_id")
      , ("dropped1ObjectUnderscoretype", "object_type")
      , ("dropped1Timestamp", "timestamp")
      , ("dropped1Metric", "metric")
      , ("dropped1Data", "data")
      ]


-- | Events representing an email.
data Email = Email
  { emailEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , emailObjectUnderscoretype :: Text -- ^ The event relates to an email action.
  , emailTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , emailMetric :: Text -- ^ A message was undeliverable. Undeliverable messages are messages that have either hit a message limit, come from a newsletter that was cancelled or deleted, or an environment that has delivery disabled (which is something you might do if you’re testing an integration). If you’re not using message limits, you probably won’t see this event.
  , emailData :: BouncedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Email where
  parseJSON = genericParseJSON optionsEmail
instance ToJSON Email where
  toJSON = genericToJSON optionsEmail

optionsEmail :: Options
optionsEmail =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("emailEventUnderscoreid", "event_id")
      , ("emailObjectUnderscoretype", "object_type")
      , ("emailTimestamp", "timestamp")
      , ("emailMetric", "metric")
      , ("emailData", "data")
      ]


-- | 
data Email1 = Email1
  { email1Email :: Maybe Text -- ^ The email address of the customer.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Email1 where
  parseJSON = genericParseJSON optionsEmail1
instance ToJSON Email1 where
  toJSON = genericToJSON optionsEmail1

optionsEmail1 :: Options
optionsEmail1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("email1Email", "email")
      ]


-- | 
data Email2 = Email2
  { email2Email :: Text -- ^ The email address of the customer.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Email2 where
  parseJSON = genericParseJSON optionsEmail2
instance ToJSON Email2 where
  toJSON = genericToJSON optionsEmail2

optionsEmail2 :: Options
optionsEmail2 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("email2Email", "email")
      ]


-- | 
data EmailAttempted = EmailAttempted
  { emailAttemptedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , emailAttemptedObjectUnderscoretype :: Text -- ^ The event relates to an email action.
  , emailAttemptedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , emailAttemptedMetric :: Text -- ^ An email could not be sent to the delivery provider and will be retried. The `failure_message` provides the reason for the failure.
  , emailAttemptedData :: EmailAttemptedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EmailAttempted where
  parseJSON = genericParseJSON optionsEmailAttempted
instance ToJSON EmailAttempted where
  toJSON = genericToJSON optionsEmailAttempted

optionsEmailAttempted :: Options
optionsEmailAttempted =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("emailAttemptedEventUnderscoreid", "event_id")
      , ("emailAttemptedObjectUnderscoretype", "object_type")
      , ("emailAttemptedTimestamp", "timestamp")
      , ("emailAttemptedMetric", "metric")
      , ("emailAttemptedData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data EmailAttemptedAllOfData = EmailAttemptedAllOfData
  { emailAttemptedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , emailAttemptedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , emailAttemptedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , emailAttemptedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , emailAttemptedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , emailAttemptedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , emailAttemptedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , emailAttemptedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , emailAttemptedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , emailAttemptedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , emailAttemptedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , emailAttemptedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , emailAttemptedAllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , emailAttemptedAllOfDataFailureUnderscoremessage :: Text -- ^ Indicates the reason that an attempted message failed.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EmailAttemptedAllOfData where
  parseJSON = genericParseJSON optionsEmailAttemptedAllOfData
instance ToJSON EmailAttemptedAllOfData where
  toJSON = genericToJSON optionsEmailAttemptedAllOfData

optionsEmailAttemptedAllOfData :: Options
optionsEmailAttemptedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("emailAttemptedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("emailAttemptedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("emailAttemptedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("emailAttemptedAllOfDataActionUnderscoreid", "action_id")
      , ("emailAttemptedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("emailAttemptedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("emailAttemptedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("emailAttemptedAllOfDataIdentifiers", "identifiers")
      , ("emailAttemptedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("emailAttemptedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("emailAttemptedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("emailAttemptedAllOfDataContentUnderscoreid", "content_id")
      , ("emailAttemptedAllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("emailAttemptedAllOfDataFailureUnderscoremessage", "failure_message")
      ]


-- | 
data EmailBounced = EmailBounced
  { emailBouncedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , emailBouncedObjectUnderscoretype :: Text -- ^ The event relates to an email action.
  , emailBouncedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , emailBouncedMetric :: Text -- ^ The delivery provider could not deliver an email.
  , emailBouncedData :: EmailBouncedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EmailBounced where
  parseJSON = genericParseJSON optionsEmailBounced
instance ToJSON EmailBounced where
  toJSON = genericToJSON optionsEmailBounced

optionsEmailBounced :: Options
optionsEmailBounced =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("emailBouncedEventUnderscoreid", "event_id")
      , ("emailBouncedObjectUnderscoretype", "object_type")
      , ("emailBouncedTimestamp", "timestamp")
      , ("emailBouncedMetric", "metric")
      , ("emailBouncedData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data EmailBouncedAllOfData = EmailBouncedAllOfData
  { emailBouncedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , emailBouncedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , emailBouncedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , emailBouncedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , emailBouncedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , emailBouncedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , emailBouncedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , emailBouncedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , emailBouncedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , emailBouncedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , emailBouncedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , emailBouncedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , emailBouncedAllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , emailBouncedAllOfDataSubject :: Text -- ^ The subject of the email.
  , emailBouncedAllOfDataRecipient :: Text -- ^ The recipient address for an action.
  , emailBouncedAllOfDataFailureUnderscoremessage :: Text -- ^ Indicates the reason that an attempted message failed.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EmailBouncedAllOfData where
  parseJSON = genericParseJSON optionsEmailBouncedAllOfData
instance ToJSON EmailBouncedAllOfData where
  toJSON = genericToJSON optionsEmailBouncedAllOfData

optionsEmailBouncedAllOfData :: Options
optionsEmailBouncedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("emailBouncedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("emailBouncedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("emailBouncedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("emailBouncedAllOfDataActionUnderscoreid", "action_id")
      , ("emailBouncedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("emailBouncedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("emailBouncedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("emailBouncedAllOfDataIdentifiers", "identifiers")
      , ("emailBouncedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("emailBouncedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("emailBouncedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("emailBouncedAllOfDataContentUnderscoreid", "content_id")
      , ("emailBouncedAllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("emailBouncedAllOfDataSubject", "subject")
      , ("emailBouncedAllOfDataRecipient", "recipient")
      , ("emailBouncedAllOfDataFailureUnderscoremessage", "failure_message")
      ]


-- | 
data EmailClicked = EmailClicked
  { emailClickedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , emailClickedObjectUnderscoretype :: Text -- ^ The event relates to an email action.
  , emailClickedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , emailClickedMetric :: Text -- ^ A tracked link in an email was clicked. If the property `machine` is `true`, the click was generated by a machine. Otherwise, it was clicked by a human.
  , emailClickedData :: EmailClickedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EmailClicked where
  parseJSON = genericParseJSON optionsEmailClicked
instance ToJSON EmailClicked where
  toJSON = genericToJSON optionsEmailClicked

optionsEmailClicked :: Options
optionsEmailClicked =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("emailClickedEventUnderscoreid", "event_id")
      , ("emailClickedObjectUnderscoretype", "object_type")
      , ("emailClickedTimestamp", "timestamp")
      , ("emailClickedMetric", "metric")
      , ("emailClickedData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data EmailClickedAllOfData = EmailClickedAllOfData
  { emailClickedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , emailClickedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , emailClickedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , emailClickedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , emailClickedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , emailClickedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , emailClickedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , emailClickedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , emailClickedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , emailClickedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , emailClickedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , emailClickedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , emailClickedAllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , emailClickedAllOfDataSubject :: Text -- ^ The subject of the email.
  , emailClickedAllOfDataRecipient :: Text -- ^ The recipient address for an action.
  , emailClickedAllOfDataHref :: Text -- ^ The URL of the link that a person clicked.
  , emailClickedAllOfDataLinkUnderscoreid :: Int -- ^ The identifier for the tracked link that a person clicked or tapped.
  , emailClickedAllOfDataMachine :: Maybe Bool -- ^ If true, the click was generated by a machine.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EmailClickedAllOfData where
  parseJSON = genericParseJSON optionsEmailClickedAllOfData
instance ToJSON EmailClickedAllOfData where
  toJSON = genericToJSON optionsEmailClickedAllOfData

optionsEmailClickedAllOfData :: Options
optionsEmailClickedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("emailClickedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("emailClickedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("emailClickedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("emailClickedAllOfDataActionUnderscoreid", "action_id")
      , ("emailClickedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("emailClickedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("emailClickedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("emailClickedAllOfDataIdentifiers", "identifiers")
      , ("emailClickedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("emailClickedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("emailClickedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("emailClickedAllOfDataContentUnderscoreid", "content_id")
      , ("emailClickedAllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("emailClickedAllOfDataSubject", "subject")
      , ("emailClickedAllOfDataRecipient", "recipient")
      , ("emailClickedAllOfDataHref", "href")
      , ("emailClickedAllOfDataLinkUnderscoreid", "link_id")
      , ("emailClickedAllOfDataMachine", "machine")
      ]


-- | 
data EmailConverted = EmailConverted
  { emailConvertedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , emailConvertedObjectUnderscoretype :: Text -- ^ The event relates to an email action.
  , emailConvertedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , emailConvertedMetric :: Text -- ^ A person matched a conversion goal attributed to an email.
  , emailConvertedData :: EmailConvertedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EmailConverted where
  parseJSON = genericParseJSON optionsEmailConverted
instance ToJSON EmailConverted where
  toJSON = genericToJSON optionsEmailConverted

optionsEmailConverted :: Options
optionsEmailConverted =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("emailConvertedEventUnderscoreid", "event_id")
      , ("emailConvertedObjectUnderscoretype", "object_type")
      , ("emailConvertedTimestamp", "timestamp")
      , ("emailConvertedMetric", "metric")
      , ("emailConvertedData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data EmailConvertedAllOfData = EmailConvertedAllOfData
  { emailConvertedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , emailConvertedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , emailConvertedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , emailConvertedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , emailConvertedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , emailConvertedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , emailConvertedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , emailConvertedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , emailConvertedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , emailConvertedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , emailConvertedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , emailConvertedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , emailConvertedAllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , emailConvertedAllOfDataSubject :: Text -- ^ The subject of the email.
  , emailConvertedAllOfDataRecipient :: Text -- ^ The recipient address for an action.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EmailConvertedAllOfData where
  parseJSON = genericParseJSON optionsEmailConvertedAllOfData
instance ToJSON EmailConvertedAllOfData where
  toJSON = genericToJSON optionsEmailConvertedAllOfData

optionsEmailConvertedAllOfData :: Options
optionsEmailConvertedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("emailConvertedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("emailConvertedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("emailConvertedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("emailConvertedAllOfDataActionUnderscoreid", "action_id")
      , ("emailConvertedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("emailConvertedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("emailConvertedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("emailConvertedAllOfDataIdentifiers", "identifiers")
      , ("emailConvertedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("emailConvertedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("emailConvertedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("emailConvertedAllOfDataContentUnderscoreid", "content_id")
      , ("emailConvertedAllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("emailConvertedAllOfDataSubject", "subject")
      , ("emailConvertedAllOfDataRecipient", "recipient")
      ]


-- | 
data EmailDelivered = EmailDelivered
  { emailDeliveredEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , emailDeliveredObjectUnderscoretype :: Text -- ^ The event relates to an email action.
  , emailDeliveredTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , emailDeliveredMetric :: Text -- ^ A message was successfully delivered to a recipient.
  , emailDeliveredData :: EmailDeliveredAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EmailDelivered where
  parseJSON = genericParseJSON optionsEmailDelivered
instance ToJSON EmailDelivered where
  toJSON = genericToJSON optionsEmailDelivered

optionsEmailDelivered :: Options
optionsEmailDelivered =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("emailDeliveredEventUnderscoreid", "event_id")
      , ("emailDeliveredObjectUnderscoretype", "object_type")
      , ("emailDeliveredTimestamp", "timestamp")
      , ("emailDeliveredMetric", "metric")
      , ("emailDeliveredData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data EmailDeliveredAllOfData = EmailDeliveredAllOfData
  { emailDeliveredAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , emailDeliveredAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , emailDeliveredAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , emailDeliveredAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , emailDeliveredAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , emailDeliveredAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , emailDeliveredAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , emailDeliveredAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , emailDeliveredAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , emailDeliveredAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , emailDeliveredAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , emailDeliveredAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , emailDeliveredAllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , emailDeliveredAllOfDataSubject :: Text -- ^ The subject of the email.
  , emailDeliveredAllOfDataRecipient :: Text -- ^ The recipient address for an action.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EmailDeliveredAllOfData where
  parseJSON = genericParseJSON optionsEmailDeliveredAllOfData
instance ToJSON EmailDeliveredAllOfData where
  toJSON = genericToJSON optionsEmailDeliveredAllOfData

optionsEmailDeliveredAllOfData :: Options
optionsEmailDeliveredAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("emailDeliveredAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("emailDeliveredAllOfDataCustomerUnderscoreid", "customer_id")
      , ("emailDeliveredAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("emailDeliveredAllOfDataActionUnderscoreid", "action_id")
      , ("emailDeliveredAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("emailDeliveredAllOfDataJourneyUnderscoreid", "journey_id")
      , ("emailDeliveredAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("emailDeliveredAllOfDataIdentifiers", "identifiers")
      , ("emailDeliveredAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("emailDeliveredAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("emailDeliveredAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("emailDeliveredAllOfDataContentUnderscoreid", "content_id")
      , ("emailDeliveredAllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("emailDeliveredAllOfDataSubject", "subject")
      , ("emailDeliveredAllOfDataRecipient", "recipient")
      ]


-- | 
data EmailDrafted = EmailDrafted
  { emailDraftedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , emailDraftedObjectUnderscoretype :: Text -- ^ The event relates to an email action.
  , emailDraftedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , emailDraftedMetric :: Text -- ^ The metric recorded by the event. For `customer` events, this is whether the customer explicitly subscribed or unsubscribed.
  , emailDraftedData :: EmailDraftedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EmailDrafted where
  parseJSON = genericParseJSON optionsEmailDrafted
instance ToJSON EmailDrafted where
  toJSON = genericToJSON optionsEmailDrafted

optionsEmailDrafted :: Options
optionsEmailDrafted =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("emailDraftedEventUnderscoreid", "event_id")
      , ("emailDraftedObjectUnderscoretype", "object_type")
      , ("emailDraftedTimestamp", "timestamp")
      , ("emailDraftedMetric", "metric")
      , ("emailDraftedData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data EmailDraftedAllOfData = EmailDraftedAllOfData
  { emailDraftedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , emailDraftedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , emailDraftedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , emailDraftedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , emailDraftedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , emailDraftedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , emailDraftedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , emailDraftedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , emailDraftedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , emailDraftedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , emailDraftedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , emailDraftedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , emailDraftedAllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , emailDraftedAllOfDataSubject :: Text -- ^ The subject of the email.
  , emailDraftedAllOfDataRecipient :: Text -- ^ The recipient address for an action.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EmailDraftedAllOfData where
  parseJSON = genericParseJSON optionsEmailDraftedAllOfData
instance ToJSON EmailDraftedAllOfData where
  toJSON = genericToJSON optionsEmailDraftedAllOfData

optionsEmailDraftedAllOfData :: Options
optionsEmailDraftedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("emailDraftedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("emailDraftedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("emailDraftedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("emailDraftedAllOfDataActionUnderscoreid", "action_id")
      , ("emailDraftedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("emailDraftedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("emailDraftedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("emailDraftedAllOfDataIdentifiers", "identifiers")
      , ("emailDraftedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("emailDraftedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("emailDraftedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("emailDraftedAllOfDataContentUnderscoreid", "content_id")
      , ("emailDraftedAllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("emailDraftedAllOfDataSubject", "subject")
      , ("emailDraftedAllOfDataRecipient", "recipient")
      ]


-- | 
data EmailDropped = EmailDropped
  { emailDroppedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , emailDroppedObjectUnderscoretype :: Text -- ^ The event relates to an email action.
  , emailDroppedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , emailDroppedMetric :: Text -- ^ Customer.io did not send an email because it was addressed to a person who was suppressed.
  , emailDroppedData :: EmailDroppedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EmailDropped where
  parseJSON = genericParseJSON optionsEmailDropped
instance ToJSON EmailDropped where
  toJSON = genericToJSON optionsEmailDropped

optionsEmailDropped :: Options
optionsEmailDropped =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("emailDroppedEventUnderscoreid", "event_id")
      , ("emailDroppedObjectUnderscoretype", "object_type")
      , ("emailDroppedTimestamp", "timestamp")
      , ("emailDroppedMetric", "metric")
      , ("emailDroppedData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data EmailDroppedAllOfData = EmailDroppedAllOfData
  { emailDroppedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , emailDroppedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , emailDroppedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , emailDroppedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , emailDroppedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , emailDroppedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , emailDroppedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , emailDroppedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , emailDroppedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , emailDroppedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , emailDroppedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , emailDroppedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , emailDroppedAllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , emailDroppedAllOfDataSubject :: Text -- ^ The subject of the email.
  , emailDroppedAllOfDataRecipient :: Text -- ^ The recipient address for an action.
  , emailDroppedAllOfDataFailureUnderscoremessage :: Text -- ^ Indicates the reason that an attempted message failed.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EmailDroppedAllOfData where
  parseJSON = genericParseJSON optionsEmailDroppedAllOfData
instance ToJSON EmailDroppedAllOfData where
  toJSON = genericToJSON optionsEmailDroppedAllOfData

optionsEmailDroppedAllOfData :: Options
optionsEmailDroppedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("emailDroppedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("emailDroppedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("emailDroppedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("emailDroppedAllOfDataActionUnderscoreid", "action_id")
      , ("emailDroppedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("emailDroppedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("emailDroppedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("emailDroppedAllOfDataIdentifiers", "identifiers")
      , ("emailDroppedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("emailDroppedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("emailDroppedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("emailDroppedAllOfDataContentUnderscoreid", "content_id")
      , ("emailDroppedAllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("emailDroppedAllOfDataSubject", "subject")
      , ("emailDroppedAllOfDataRecipient", "recipient")
      , ("emailDroppedAllOfDataFailureUnderscoremessage", "failure_message")
      ]


-- | Events representing an email.
data EmailEvent = EmailEvent
  { emailEventEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , emailEventObjectUnderscoretype :: Text -- ^ The event relates to an email action.
  , emailEventTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , emailEventMetric :: Text -- ^ A message was undeliverable. Undeliverable messages are messages that have either hit a message limit, come from a newsletter that was cancelled or deleted, or an environment that has delivery disabled (which is something you might do if you’re testing an integration). If you’re not using message limits, you probably won’t see this event.
  , emailEventData :: BouncedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EmailEvent where
  parseJSON = genericParseJSON optionsEmailEvent
instance ToJSON EmailEvent where
  toJSON = genericToJSON optionsEmailEvent

optionsEmailEvent :: Options
optionsEmailEvent =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("emailEventEventUnderscoreid", "event_id")
      , ("emailEventObjectUnderscoretype", "object_type")
      , ("emailEventTimestamp", "timestamp")
      , ("emailEventMetric", "metric")
      , ("emailEventData", "data")
      ]


-- | 
data EmailEventCommon = EmailEventCommon
  { emailEventCommonEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , emailEventCommonObjectUnderscoretype :: Text -- ^ The event relates to an email action.
  , emailEventCommonTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EmailEventCommon where
  parseJSON = genericParseJSON optionsEmailEventCommon
instance ToJSON EmailEventCommon where
  toJSON = genericToJSON optionsEmailEventCommon

optionsEmailEventCommon :: Options
optionsEmailEventCommon =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("emailEventCommonEventUnderscoreid", "event_id")
      , ("emailEventCommonObjectUnderscoretype", "object_type")
      , ("emailEventCommonTimestamp", "timestamp")
      ]


-- | Describes the email events reported from Customer.io to a webhook.
data EmailEvents = EmailEvents
  { emailEventsEmailUnderscoreattempted :: Maybe Bool -- ^ Reports when a message cannot be sent to the delivery provider and will retry. Set to true to report this event type.
  , emailEventsEmailUnderscorebounced :: Maybe Bool -- ^ Reports when the delivery provider is unable to deliver a message. Set to true to report this event type.
  , emailEventsEmailUnderscoreclicked :: Maybe Bool -- ^ Reports when a person clicks a tracked link in a message. Set to true to report this event type.
  , emailEventsEmailUnderscoreconverted :: Maybe Bool -- ^ Reports a conversion. Set to true to report this event type.
  , emailEventsEmailUnderscoredeferred :: Maybe Bool -- ^ Reports when the delivery provider couldn't send a message and will retry. Set to true to report this event type.
  , emailEventsEmailUnderscoredelivered :: Maybe Bool -- ^ Reports when the delivery provider reports that a message is delivered to an inbox. Set to true to report this event type.
  , emailEventsEmailUnderscoredrafted :: Maybe Bool -- ^ Reports when a message draft is created. Set to true to report this event type.
  , emailEventsEmailUnderscoredropped :: Maybe Bool -- ^ Reports when a message isn't sent because the recipient is suppressed. Set to true to report this event type.
  , emailEventsEmailUnderscorefailed :: Maybe Bool -- ^ Reports when an email couldn't be sent to the delivery provider. Set to true to report this event type.
  , emailEventsEmailUnderscoreopened :: Maybe Bool -- ^ Reports when a recipient opens a message. Set to true to report this event type.
  , emailEventsEmailUnderscoresent :: Maybe Bool -- ^ Reports when a message is sent from Customer.io to the delivery provider. Set to true to report this event type.
  , emailEventsEmailUnderscorespammed :: Maybe Bool -- ^ Reports a recipient marks a message as spam. Set to true to report this even type.
  , emailEventsEmailUnderscoreunsubscribed :: Maybe Bool -- ^ Reports when a person unsubscribes through a particular email. Set to true to report this event type.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EmailEvents where
  parseJSON = genericParseJSON optionsEmailEvents
instance ToJSON EmailEvents where
  toJSON = genericToJSON optionsEmailEvents

optionsEmailEvents :: Options
optionsEmailEvents =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("emailEventsEmailUnderscoreattempted", "email_attempted")
      , ("emailEventsEmailUnderscorebounced", "email_bounced")
      , ("emailEventsEmailUnderscoreclicked", "email_clicked")
      , ("emailEventsEmailUnderscoreconverted", "email_converted")
      , ("emailEventsEmailUnderscoredeferred", "email_deferred")
      , ("emailEventsEmailUnderscoredelivered", "email_delivered")
      , ("emailEventsEmailUnderscoredrafted", "email_drafted")
      , ("emailEventsEmailUnderscoredropped", "email_dropped")
      , ("emailEventsEmailUnderscorefailed", "email_failed")
      , ("emailEventsEmailUnderscoreopened", "email_opened")
      , ("emailEventsEmailUnderscoresent", "email_sent")
      , ("emailEventsEmailUnderscorespammed", "email_spammed")
      , ("emailEventsEmailUnderscoreunsubscribed", "email_unsubscribed")
      ]


-- | 
data EmailFailed = EmailFailed
  { emailFailedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , emailFailedObjectUnderscoretype :: Text -- ^ The event relates to an email action.
  , emailFailedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , emailFailedMetric :: Text -- ^ An email couldn't be sent to the delivery provider.
  , emailFailedData :: EmailFailedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EmailFailed where
  parseJSON = genericParseJSON optionsEmailFailed
instance ToJSON EmailFailed where
  toJSON = genericToJSON optionsEmailFailed

optionsEmailFailed :: Options
optionsEmailFailed =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("emailFailedEventUnderscoreid", "event_id")
      , ("emailFailedObjectUnderscoretype", "object_type")
      , ("emailFailedTimestamp", "timestamp")
      , ("emailFailedMetric", "metric")
      , ("emailFailedData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data EmailFailedAllOfData = EmailFailedAllOfData
  { emailFailedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , emailFailedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , emailFailedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , emailFailedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , emailFailedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , emailFailedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , emailFailedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , emailFailedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , emailFailedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , emailFailedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , emailFailedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , emailFailedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , emailFailedAllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , emailFailedAllOfDataSubject :: Text -- ^ The subject of the email.
  , emailFailedAllOfDataFailureUnderscoremessage :: Text -- ^ Indicates the reason that an attempted message failed.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EmailFailedAllOfData where
  parseJSON = genericParseJSON optionsEmailFailedAllOfData
instance ToJSON EmailFailedAllOfData where
  toJSON = genericToJSON optionsEmailFailedAllOfData

optionsEmailFailedAllOfData :: Options
optionsEmailFailedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("emailFailedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("emailFailedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("emailFailedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("emailFailedAllOfDataActionUnderscoreid", "action_id")
      , ("emailFailedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("emailFailedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("emailFailedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("emailFailedAllOfDataIdentifiers", "identifiers")
      , ("emailFailedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("emailFailedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("emailFailedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("emailFailedAllOfDataContentUnderscoreid", "content_id")
      , ("emailFailedAllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("emailFailedAllOfDataSubject", "subject")
      , ("emailFailedAllOfDataFailureUnderscoremessage", "failure_message")
      ]


-- | 
data EmailMessage = EmailMessage
  { emailMessageId :: Maybe Int -- ^ The identifier for an action.
  , emailMessageBroadcastUnderscoreid :: Maybe Int -- ^ The identifier for a broadcast.
  , emailMessageDeduplicateUnderscoreid :: Maybe Text -- ^ An identifier in the format `id:timestamp` where the id is the id of the object you are working with (Campaigns, Deliveries, Exports, Identities, Newsletters, Segments, and Templates), and the timestamp is the last time the object was updated.
  , emailMessageName :: Maybe Text -- ^ The name of the action, if it exists.
  , emailMessageLayout :: Maybe Text -- ^ The layout used for the action, if it exists.
  , emailMessageCreated :: Maybe Int -- ^ The date time when the referenced ID was created.
  , emailMessageUpdated :: Maybe Int -- ^ The date time when the referenced ID was last updated.
  , emailMessageBody :: Maybe Text -- ^ The body of the action. You cannot modify the body if you created it with our drag-and-drop editor.
  , emailMessageType :: Maybe Text -- ^ The type of action.
  , emailMessageSendingUnderscorestate :: Maybe Text -- ^ Determines the sending behavior for the action. `automatic` sends the action automatically when triggered; `draft` queues drafts when the action is triggered; or `off` to disable the action.
  , emailMessageLanguage :: Maybe Text -- ^ The language variant for your message. If you don't use our [localization feature](/localization), or this is the default message, this value is an empty string.
  , emailMessageFrom :: Maybe Text -- ^ The address that the message is from, relevant if the action `type` is `email`.
  , emailMessageFromUnderscoreid :: Maybe Int -- ^ The identifier of the `from` address, commonly known as the \"sender\". You can [list your sender identities](#operation/listSenders) to match the ID to a specific address.
  , emailMessageReplyUnderscoreto :: Maybe Text -- ^ The address that receives replies for the message, if applicable.
  , emailMessageReplyUnderscoretoUnderscoreid :: Maybe Int -- ^ The identifier for the `reply_to` address, if applicable. You can [list your sender identities](#operation/listSenders) to match the ID to a specific address.
  , emailMessagePreprocessor :: Maybe Text -- ^ By default, we process CSS before emails leave Customer.io using Premailer. If your message included CSS and pre-processing is not disabled, this key indicates the pre-processor.
  , emailMessageRecipient :: Maybe Text -- ^ The recipient address for an action.
  , emailMessageSubject :: Maybe Text -- ^ The subject line for an `email` action.
  , emailMessageBcc :: Maybe Text -- ^ The blind-copy address(es) for this action.
  , emailMessageFakeUnderscorebcc :: Maybe Bool -- ^ If true, rather than sending true copies to BCC addresses, Customer.io sends a copy of the message with the subject line containing the recipient address(es). 
  , emailMessagePreheaderUnderscoretext :: Maybe Text -- ^ Also known as \"preview text\", this specifies the small block of text shown in an end-user's email inbox, next to, or underneath, the subject line.
  , emailMessageHeaders :: Maybe (Map.Map String Text) -- ^ An object containing headers, where the key is the header name and the value is the header value. Header names and values must be strings and cannot contain any non-ASCII characters or empty spaces. Some headers are reserved and cannot be overwritten.
  , emailMessageBodyUnderscoreamp :: Maybe Text -- ^ If your message is an email, this is the AMP-enabled body of your message. If your recipient's email client doesn't support AMP, the `body` represents your fallback message.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EmailMessage where
  parseJSON = genericParseJSON optionsEmailMessage
instance ToJSON EmailMessage where
  toJSON = genericToJSON optionsEmailMessage

optionsEmailMessage :: Options
optionsEmailMessage =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("emailMessageId", "id")
      , ("emailMessageBroadcastUnderscoreid", "broadcast_id")
      , ("emailMessageDeduplicateUnderscoreid", "deduplicate_id")
      , ("emailMessageName", "name")
      , ("emailMessageLayout", "layout")
      , ("emailMessageCreated", "created")
      , ("emailMessageUpdated", "updated")
      , ("emailMessageBody", "body")
      , ("emailMessageType", "type")
      , ("emailMessageSendingUnderscorestate", "sending_state")
      , ("emailMessageLanguage", "language")
      , ("emailMessageFrom", "from")
      , ("emailMessageFromUnderscoreid", "from_id")
      , ("emailMessageReplyUnderscoreto", "reply_to")
      , ("emailMessageReplyUnderscoretoUnderscoreid", "reply_to_id")
      , ("emailMessagePreprocessor", "preprocessor")
      , ("emailMessageRecipient", "recipient")
      , ("emailMessageSubject", "subject")
      , ("emailMessageBcc", "bcc")
      , ("emailMessageFakeUnderscorebcc", "fake_bcc")
      , ("emailMessagePreheaderUnderscoretext", "preheader_text")
      , ("emailMessageHeaders", "headers")
      , ("emailMessageBodyUnderscoreamp", "body_amp")
      ]


-- | 
data EmailMessage1 = EmailMessage1
  { emailMessage1Id :: Maybe Int -- ^ The identifier for an action.
  , emailMessage1CampaignUnderscoreid :: Maybe Int -- ^ The identifier for a campaign.
  , emailMessage1ParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , emailMessage1DeduplicateUnderscoreid :: Maybe Text -- ^ An identifier in the format `id:timestamp` where the id is the id of the object you are working with (Campaigns, Deliveries, Exports, Identities, Newsletters, Segments, and Templates), and the timestamp is the last time the object was updated.
  , emailMessage1Name :: Maybe Text -- ^ The name of the action, if it exists.
  , emailMessage1Layout :: Maybe Text -- ^ The layout used for the action, if it exists.
  , emailMessage1Created :: Maybe Int -- ^ The date time when the referenced ID was created.
  , emailMessage1Updated :: Maybe Int -- ^ The date time when the referenced ID was last updated.
  , emailMessage1Body :: Maybe Text -- ^ The body of the action. For emails, this is the HTML-body of a message. You cannot modify the body if you created it with our drag-and-drop editor.
  , emailMessage1BodyUnderscoreamp :: Maybe Text -- ^ If your message is an email, this is the AMP-enabled body of your message. If your recipient's email client doesn't support AMP, the `body` represents your fallback message.
  , emailMessage1Language :: Maybe Text -- ^ The language variant for your message. If you don't use our [localization feature](/localization), or this is the default message, this value is an empty string.
  , emailMessage1Type :: Maybe Text -- ^ The type of action.
  , emailMessage1SendingUnderscorestate :: Maybe Text -- ^ Determines the sending behavior for the action. `automatic` sends the action automatically when triggered; `draft` queues drafts when the action is triggered; or `off` to disable the action.
  , emailMessage1From :: Maybe Text -- ^ The address that the message is from, relevant if the action `type` is `email`.
  , emailMessage1FromUnderscoreid :: Maybe Int -- ^ The identifier of the `from` address, commonly known as the \"sender\". You can [list your sender identities](#operation/listSenders) to match the ID to a specific address.
  , emailMessage1ReplyUnderscoreto :: Maybe Text -- ^ The address that receives replies for the message, if applicable.
  , emailMessage1ReplyUnderscoretoUnderscoreid :: Maybe Int -- ^ The identifier for the `reply_to` address, if applicable. You can [list your sender identities](#operation/listSenders) to match the ID to a specific address.
  , emailMessage1Preprocessor :: Maybe Text -- ^ By default, we process CSS before emails leave Customer.io using Premailer. If your message included CSS and pre-processing is not disabled, this key indicates the pre-processor.
  , emailMessage1Recipient :: Maybe Text -- ^ The recipient address for an action.
  , emailMessage1Subject :: Maybe Text -- ^ The subject line for an `email` action.
  , emailMessage1Bcc :: Maybe Text -- ^ The blind-copy address(es) for this action.
  , emailMessage1FakeUnderscorebcc :: Maybe Bool -- ^ If true, rather than sending true copies to BCC addresses, Customer.io sends a copy of the message with the subject line containing the recipient address(es). 
  , emailMessage1PreheaderUnderscoretext :: Maybe Text -- ^ Also known as \"preview text\", this specifies the small block of text shown in an end-user's email inbox, next to, or underneath, the subject line.
  , emailMessage1Headers :: Maybe (Map.Map String Text) -- ^ An object containing headers, where the key is the header name and the value is the header value. Header names and values must be strings and cannot contain any non-ASCII characters or empty spaces. Some headers are reserved and cannot be overwritten.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EmailMessage1 where
  parseJSON = genericParseJSON optionsEmailMessage1
instance ToJSON EmailMessage1 where
  toJSON = genericToJSON optionsEmailMessage1

optionsEmailMessage1 :: Options
optionsEmailMessage1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("emailMessage1Id", "id")
      , ("emailMessage1CampaignUnderscoreid", "campaign_id")
      , ("emailMessage1ParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("emailMessage1DeduplicateUnderscoreid", "deduplicate_id")
      , ("emailMessage1Name", "name")
      , ("emailMessage1Layout", "layout")
      , ("emailMessage1Created", "created")
      , ("emailMessage1Updated", "updated")
      , ("emailMessage1Body", "body")
      , ("emailMessage1BodyUnderscoreamp", "body_amp")
      , ("emailMessage1Language", "language")
      , ("emailMessage1Type", "type")
      , ("emailMessage1SendingUnderscorestate", "sending_state")
      , ("emailMessage1From", "from")
      , ("emailMessage1FromUnderscoreid", "from_id")
      , ("emailMessage1ReplyUnderscoreto", "reply_to")
      , ("emailMessage1ReplyUnderscoretoUnderscoreid", "reply_to_id")
      , ("emailMessage1Preprocessor", "preprocessor")
      , ("emailMessage1Recipient", "recipient")
      , ("emailMessage1Subject", "subject")
      , ("emailMessage1Bcc", "bcc")
      , ("emailMessage1FakeUnderscorebcc", "fake_bcc")
      , ("emailMessage1PreheaderUnderscoretext", "preheader_text")
      , ("emailMessage1Headers", "headers")
      ]


-- | 
data EmailOpened = EmailOpened
  { emailOpenedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , emailOpenedObjectUnderscoretype :: Text -- ^ The event relates to an email action.
  , emailOpenedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , emailOpenedMetric :: Text -- ^ An email was opened. If either property `proxied` or `prefetched` is `true`, the email was opened by a machine. Otherwise, it was opened by a human.
  , emailOpenedData :: EmailOpenedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EmailOpened where
  parseJSON = genericParseJSON optionsEmailOpened
instance ToJSON EmailOpened where
  toJSON = genericToJSON optionsEmailOpened

optionsEmailOpened :: Options
optionsEmailOpened =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("emailOpenedEventUnderscoreid", "event_id")
      , ("emailOpenedObjectUnderscoretype", "object_type")
      , ("emailOpenedTimestamp", "timestamp")
      , ("emailOpenedMetric", "metric")
      , ("emailOpenedData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data EmailOpenedAllOfData = EmailOpenedAllOfData
  { emailOpenedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , emailOpenedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , emailOpenedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , emailOpenedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , emailOpenedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , emailOpenedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , emailOpenedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , emailOpenedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , emailOpenedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , emailOpenedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , emailOpenedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , emailOpenedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , emailOpenedAllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , emailOpenedAllOfDataSubject :: Text -- ^ The subject of the email.
  , emailOpenedAllOfDataRecipient :: Text -- ^ The recipient address for an action.
  , emailOpenedAllOfDataProxied :: Maybe Bool -- ^ If true, the email was fetched by a proxy to hide the user identity, IP address, etc.
  , emailOpenedAllOfDataPrefetched :: Maybe Bool -- ^ If true, the email was opened by Gmail, Apple Privacy Protection, or a user agent identified as a bot.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EmailOpenedAllOfData where
  parseJSON = genericParseJSON optionsEmailOpenedAllOfData
instance ToJSON EmailOpenedAllOfData where
  toJSON = genericToJSON optionsEmailOpenedAllOfData

optionsEmailOpenedAllOfData :: Options
optionsEmailOpenedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("emailOpenedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("emailOpenedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("emailOpenedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("emailOpenedAllOfDataActionUnderscoreid", "action_id")
      , ("emailOpenedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("emailOpenedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("emailOpenedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("emailOpenedAllOfDataIdentifiers", "identifiers")
      , ("emailOpenedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("emailOpenedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("emailOpenedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("emailOpenedAllOfDataContentUnderscoreid", "content_id")
      , ("emailOpenedAllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("emailOpenedAllOfDataSubject", "subject")
      , ("emailOpenedAllOfDataRecipient", "recipient")
      , ("emailOpenedAllOfDataProxied", "proxied")
      , ("emailOpenedAllOfDataPrefetched", "prefetched")
      ]


-- | 
data EmailOrId = EmailOrId
  { emailOrIdIds :: Maybe [Text] -- ^ The customers that belong to this segment.
  , emailOrIdIdentifiers :: Maybe [ListActivities200ResponseActivitiesInnerCustomerIdentifiers] -- ^ The customers that belong to this segment.
  , emailOrIdNext :: Maybe Text -- ^ Indicates the next page of results. Add `?start=<next_value>` to the request to get the next page of results.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EmailOrId where
  parseJSON = genericParseJSON optionsEmailOrId
instance ToJSON EmailOrId where
  toJSON = genericToJSON optionsEmailOrId

optionsEmailOrId :: Options
optionsEmailOrId =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("emailOrIdIds", "ids")
      , ("emailOrIdIdentifiers", "identifiers")
      , ("emailOrIdNext", "next")
      ]


-- | 
data EmailSent = EmailSent
  { emailSentEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , emailSentObjectUnderscoretype :: Text -- ^ The event relates to an email action.
  , emailSentTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , emailSentMetric :: Text -- ^ A message was successfully sent. If you enabled the *Body Content* option with your webhook, the payload includes the `content` of your message.
  , emailSentData :: EmailSentAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EmailSent where
  parseJSON = genericParseJSON optionsEmailSent
instance ToJSON EmailSent where
  toJSON = genericToJSON optionsEmailSent

optionsEmailSent :: Options
optionsEmailSent =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("emailSentEventUnderscoreid", "event_id")
      , ("emailSentObjectUnderscoretype", "object_type")
      , ("emailSentTimestamp", "timestamp")
      , ("emailSentMetric", "metric")
      , ("emailSentData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data EmailSentAllOfData = EmailSentAllOfData
  { emailSentAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , emailSentAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , emailSentAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , emailSentAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , emailSentAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , emailSentAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , emailSentAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , emailSentAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , emailSentAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , emailSentAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , emailSentAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , emailSentAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , emailSentAllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , emailSentAllOfDataContent :: Maybe Text -- ^ The body content of your email. This key only appears if you enabled the *Body Content* option when setting up your webhook.
  , emailSentAllOfDataSubject :: Text -- ^ The subject of the email.
  , emailSentAllOfDataRecipient :: Text -- ^ The recipient address for an action.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EmailSentAllOfData where
  parseJSON = genericParseJSON optionsEmailSentAllOfData
instance ToJSON EmailSentAllOfData where
  toJSON = genericToJSON optionsEmailSentAllOfData

optionsEmailSentAllOfData :: Options
optionsEmailSentAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("emailSentAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("emailSentAllOfDataCustomerUnderscoreid", "customer_id")
      , ("emailSentAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("emailSentAllOfDataActionUnderscoreid", "action_id")
      , ("emailSentAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("emailSentAllOfDataJourneyUnderscoreid", "journey_id")
      , ("emailSentAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("emailSentAllOfDataIdentifiers", "identifiers")
      , ("emailSentAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("emailSentAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("emailSentAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("emailSentAllOfDataContentUnderscoreid", "content_id")
      , ("emailSentAllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("emailSentAllOfDataContent", "content")
      , ("emailSentAllOfDataSubject", "subject")
      , ("emailSentAllOfDataRecipient", "recipient")
      ]


-- | 
data EmailSpammed = EmailSpammed
  { emailSpammedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , emailSpammedObjectUnderscoretype :: Text -- ^ The event relates to an email action.
  , emailSpammedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , emailSpammedMetric :: Text -- ^ A recipient marked an email as spam.
  , emailSpammedData :: EmailSpammedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EmailSpammed where
  parseJSON = genericParseJSON optionsEmailSpammed
instance ToJSON EmailSpammed where
  toJSON = genericToJSON optionsEmailSpammed

optionsEmailSpammed :: Options
optionsEmailSpammed =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("emailSpammedEventUnderscoreid", "event_id")
      , ("emailSpammedObjectUnderscoretype", "object_type")
      , ("emailSpammedTimestamp", "timestamp")
      , ("emailSpammedMetric", "metric")
      , ("emailSpammedData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data EmailSpammedAllOfData = EmailSpammedAllOfData
  { emailSpammedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , emailSpammedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , emailSpammedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , emailSpammedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , emailSpammedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , emailSpammedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , emailSpammedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , emailSpammedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , emailSpammedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , emailSpammedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , emailSpammedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , emailSpammedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , emailSpammedAllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , emailSpammedAllOfDataSubject :: Text -- ^ The subject of the email.
  , emailSpammedAllOfDataRecipient :: Text -- ^ The recipient address for an action.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EmailSpammedAllOfData where
  parseJSON = genericParseJSON optionsEmailSpammedAllOfData
instance ToJSON EmailSpammedAllOfData where
  toJSON = genericToJSON optionsEmailSpammedAllOfData

optionsEmailSpammedAllOfData :: Options
optionsEmailSpammedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("emailSpammedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("emailSpammedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("emailSpammedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("emailSpammedAllOfDataActionUnderscoreid", "action_id")
      , ("emailSpammedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("emailSpammedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("emailSpammedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("emailSpammedAllOfDataIdentifiers", "identifiers")
      , ("emailSpammedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("emailSpammedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("emailSpammedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("emailSpammedAllOfDataContentUnderscoreid", "content_id")
      , ("emailSpammedAllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("emailSpammedAllOfDataSubject", "subject")
      , ("emailSpammedAllOfDataRecipient", "recipient")
      ]


-- | 
data EmailUndeliverable = EmailUndeliverable
  { emailUndeliverableEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , emailUndeliverableObjectUnderscoretype :: Text -- ^ The event relates to an email action.
  , emailUndeliverableTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , emailUndeliverableMetric :: Text -- ^ A message was undeliverable. Undeliverable messages are messages that have either hit a message limit, come from a newsletter that was cancelled or deleted, or an environment that has delivery disabled (which is something you might do if you’re testing an integration). If you’re not using message limits, you probably won’t see this event.
  , emailUndeliverableData :: EmailUndeliverableAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EmailUndeliverable where
  parseJSON = genericParseJSON optionsEmailUndeliverable
instance ToJSON EmailUndeliverable where
  toJSON = genericToJSON optionsEmailUndeliverable

optionsEmailUndeliverable :: Options
optionsEmailUndeliverable =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("emailUndeliverableEventUnderscoreid", "event_id")
      , ("emailUndeliverableObjectUnderscoretype", "object_type")
      , ("emailUndeliverableTimestamp", "timestamp")
      , ("emailUndeliverableMetric", "metric")
      , ("emailUndeliverableData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data EmailUndeliverableAllOfData = EmailUndeliverableAllOfData
  { emailUndeliverableAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , emailUndeliverableAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , emailUndeliverableAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , emailUndeliverableAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , emailUndeliverableAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , emailUndeliverableAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , emailUndeliverableAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , emailUndeliverableAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , emailUndeliverableAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , emailUndeliverableAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , emailUndeliverableAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , emailUndeliverableAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , emailUndeliverableAllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , emailUndeliverableAllOfDataSubject :: Text -- ^ The subject of the email.
  , emailUndeliverableAllOfDataRecipient :: Text -- ^ The recipient address for an action.
  , emailUndeliverableAllOfDataFailureUnderscoremessage :: Text -- ^ Indicates the reason that an attempted message failed.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EmailUndeliverableAllOfData where
  parseJSON = genericParseJSON optionsEmailUndeliverableAllOfData
instance ToJSON EmailUndeliverableAllOfData where
  toJSON = genericToJSON optionsEmailUndeliverableAllOfData

optionsEmailUndeliverableAllOfData :: Options
optionsEmailUndeliverableAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("emailUndeliverableAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("emailUndeliverableAllOfDataCustomerUnderscoreid", "customer_id")
      , ("emailUndeliverableAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("emailUndeliverableAllOfDataActionUnderscoreid", "action_id")
      , ("emailUndeliverableAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("emailUndeliverableAllOfDataJourneyUnderscoreid", "journey_id")
      , ("emailUndeliverableAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("emailUndeliverableAllOfDataIdentifiers", "identifiers")
      , ("emailUndeliverableAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("emailUndeliverableAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("emailUndeliverableAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("emailUndeliverableAllOfDataContentUnderscoreid", "content_id")
      , ("emailUndeliverableAllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("emailUndeliverableAllOfDataSubject", "subject")
      , ("emailUndeliverableAllOfDataRecipient", "recipient")
      , ("emailUndeliverableAllOfDataFailureUnderscoremessage", "failure_message")
      ]


-- | 
data EmailUnsubscribed = EmailUnsubscribed
  { emailUnsubscribedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , emailUnsubscribedObjectUnderscoretype :: Text -- ^ The event relates to an email action.
  , emailUnsubscribedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , emailUnsubscribedMetric :: Text -- ^ The recipient unsubscribed based on a particular message.
  , emailUnsubscribedData :: EmailUnsubscribedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EmailUnsubscribed where
  parseJSON = genericParseJSON optionsEmailUnsubscribed
instance ToJSON EmailUnsubscribed where
  toJSON = genericToJSON optionsEmailUnsubscribed

optionsEmailUnsubscribed :: Options
optionsEmailUnsubscribed =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("emailUnsubscribedEventUnderscoreid", "event_id")
      , ("emailUnsubscribedObjectUnderscoretype", "object_type")
      , ("emailUnsubscribedTimestamp", "timestamp")
      , ("emailUnsubscribedMetric", "metric")
      , ("emailUnsubscribedData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data EmailUnsubscribedAllOfData = EmailUnsubscribedAllOfData
  { emailUnsubscribedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , emailUnsubscribedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , emailUnsubscribedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , emailUnsubscribedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , emailUnsubscribedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , emailUnsubscribedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , emailUnsubscribedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , emailUnsubscribedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , emailUnsubscribedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , emailUnsubscribedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , emailUnsubscribedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , emailUnsubscribedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , emailUnsubscribedAllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , emailUnsubscribedAllOfDataSubject :: Text -- ^ The subject of the email.
  , emailUnsubscribedAllOfDataRecipient :: Text -- ^ The recipient address for an action.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EmailUnsubscribedAllOfData where
  parseJSON = genericParseJSON optionsEmailUnsubscribedAllOfData
instance ToJSON EmailUnsubscribedAllOfData where
  toJSON = genericToJSON optionsEmailUnsubscribedAllOfData

optionsEmailUnsubscribedAllOfData :: Options
optionsEmailUnsubscribedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("emailUnsubscribedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("emailUnsubscribedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("emailUnsubscribedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("emailUnsubscribedAllOfDataActionUnderscoreid", "action_id")
      , ("emailUnsubscribedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("emailUnsubscribedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("emailUnsubscribedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("emailUnsubscribedAllOfDataIdentifiers", "identifiers")
      , ("emailUnsubscribedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("emailUnsubscribedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("emailUnsubscribedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("emailUnsubscribedAllOfDataContentUnderscoreid", "content_id")
      , ("emailUnsubscribedAllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("emailUnsubscribedAllOfDataSubject", "subject")
      , ("emailUnsubscribedAllOfDataRecipient", "recipient")
      ]


-- | 
data Emails = Emails
  { emailsEmail :: Text -- ^ The email address of the recipient. This address must be unique in your workspace. If more than one person has the same `email` attribute, your request will produce an error.
  , emailsData :: Maybe (Map.Map String Value) -- ^ Merge data associated with the recipient.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Emails where
  parseJSON = genericParseJSON optionsEmails
instance ToJSON Emails where
  toJSON = genericToJSON optionsEmails

optionsEmails :: Options
optionsEmails =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("emailsEmail", "email")
      , ("emailsData", "data")
      ]


-- | 
data ErrorsInner = ErrorsInner
  { errorsInnerReason :: Maybe Text -- ^ The reason for the error.
  , errorsInnerField :: Maybe Text -- ^ The field containing the error.
  , errorsInnerMessage :: Maybe Text -- ^ A detailed description of the error in the offending field.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ErrorsInner where
  parseJSON = genericParseJSON optionsErrorsInner
instance ToJSON ErrorsInner where
  toJSON = genericToJSON optionsErrorsInner

optionsErrorsInner :: Options
optionsErrorsInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("errorsInnerReason", "reason")
      , ("errorsInnerField", "field")
      , ("errorsInnerMessage", "message")
      ]


-- | 
data EspSuppression = EspSuppression
  { espSuppressionCategory :: Maybe Text -- ^ The reason the addresses are suppressed.
  , espSuppressionSuppressions :: Maybe [GetSuppression200ResponseSuppressionsInner] -- ^ The addresses suppressed in this category.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EspSuppression where
  parseJSON = genericParseJSON optionsEspSuppression
instance ToJSON EspSuppression where
  toJSON = genericToJSON optionsEspSuppression

optionsEspSuppression :: Options
optionsEspSuppression =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("espSuppressionCategory", "category")
      , ("espSuppressionSuppressions", "suppressions")
      ]


-- | Contains your import parameters.
data Event = Event
  { eventName :: Text -- ^ A friendly name for your import. This helps you identify your import.
  , eventDataUnderscorefileUnderscoreurl :: Text -- ^ The URL or path to the CSV file you want to import.
  , eventType :: Text -- ^ The type of import.
  , eventIdentifier :: Text -- ^ The type of identifier you want to use to identify people in your sheet—`id` or `email`. At least one column in the CSV must contain an identifier.
  , eventDataUnderscoretoUnderscoreprocess :: Maybe Text -- ^ Determines whether your import operation performs `all` add/update operations, only adds items (`only_new`), or only updates existing items (`only_existing`). Defaults to `all`. If `import_type` is `event`, you can only use `all` or `only_existing`.   This field was previously called `people_to_process` - we still support it but will deprecate it soon. 
  , eventDescription :: Maybe Text -- ^ A helpful description that can help you find and recognize your import operation.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Event where
  parseJSON = genericParseJSON optionsEvent
instance ToJSON Event where
  toJSON = genericToJSON optionsEvent

optionsEvent :: Options
optionsEvent =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("eventName", "name")
      , ("eventDataUnderscorefileUnderscoreurl", "data_file_url")
      , ("eventType", "type")
      , ("eventIdentifier", "identifier")
      , ("eventDataUnderscoretoUnderscoreprocess", "data_to_process")
      , ("eventDescription", "description")
      ]


-- | 
data EventCommonData = EventCommonData
  { eventCommonDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , eventCommonDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , eventCommonDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , eventCommonDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , eventCommonDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , eventCommonDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , eventCommonDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , eventCommonDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , eventCommonDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , eventCommonDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , eventCommonDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , eventCommonDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , eventCommonDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EventCommonData where
  parseJSON = genericParseJSON optionsEventCommonData
instance ToJSON EventCommonData where
  toJSON = genericToJSON optionsEventCommonData

optionsEventCommonData :: Options
optionsEventCommonData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("eventCommonDataTriggerUnderscoreid", "trigger_id")
      , ("eventCommonDataCustomerUnderscoreid", "customer_id")
      , ("eventCommonDataDeliveryUnderscoreid", "delivery_id")
      , ("eventCommonDataActionUnderscoreid", "action_id")
      , ("eventCommonDataBroadcastUnderscoreid", "broadcast_id")
      , ("eventCommonDataJourneyUnderscoreid", "journey_id")
      , ("eventCommonDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("eventCommonDataIdentifiers", "identifiers")
      , ("eventCommonDataCampaignUnderscoreid", "campaign_id")
      , ("eventCommonDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("eventCommonDataNewsletterUnderscoreid", "newsletter_id")
      , ("eventCommonDataContentUnderscoreid", "content_id")
      , ("eventCommonDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      ]


-- | 
data EventsRequest = EventsRequest
  { eventsRequestName :: Text -- ^ The name of the event. In general, this should be the name of the screen or deep link path that a person viewed, making it easy to segment your audience or trigger campaigns from these events. Make sure you trim leading and trailing spaces from this field.
  , eventsRequestId :: Maybe Text -- ^ An identifier used to deduplicate events. This value must be a [ULID](https://github.com/ulid/spec). If an event has the same value as an event we previously received, we won't show or process the duplicate. Note - our Python and Ruby libraries do not pass this id.
  , eventsRequestType :: Text -- ^ Sets the event type. If your event isn't a `page` or `screen` type event, we automatically set this property to `event`.
  , eventsRequestTimestamp :: Maybe Int -- ^ The unix timestamp when the event took place. If you don't provide this value, we use the date-time when we receive the event. 
  , eventsRequestData :: Maybe (Map.Map String Value) -- ^ Additional information that you might want to reference in a message using liquid or use to set attributes on your customer (referenced by `customer_id`).
  , eventsRequestAnonymousUnderscoreid :: Text -- ^ An identifier for an anonymous event, like a cookie. If set as an attribute on a person, any events bearing the same anonymous value are associated with this person. This value must be unique and is not reusable.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON EventsRequest where
  parseJSON = genericParseJSON optionsEventsRequest
instance ToJSON EventsRequest where
  toJSON = genericToJSON optionsEventsRequest

optionsEventsRequest :: Options
optionsEventsRequest =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("eventsRequestName", "name")
      , ("eventsRequestId", "id")
      , ("eventsRequestType", "type")
      , ("eventsRequestTimestamp", "timestamp")
      , ("eventsRequestData", "data")
      , ("eventsRequestAnonymousUnderscoreid", "anonymous_id")
      ]


-- | Metadata about an export.
data ExportObject = ExportObject
  { exportObjectId :: Maybe Int -- ^ The identifier for the export.
  , exportObjectUserUnderscoreid :: Maybe Int -- ^ The user who created the export.
  , exportObjectUserUnderscoreemail :: Maybe Text -- ^ The email of the user who created the export.
  , exportObjectTotal :: Maybe Int -- ^ The number of entries in the export. Exports report 0 until done.
  , exportObjectDeduplicateUnderscoreid :: Maybe Text -- ^ An identifier in the format `id:timestamp` where the id is the id of the object you are working with (Campaigns, Deliveries, Exports, Identities, Newsletters, Segments, and Templates), and the timestamp is the last time the object was updated.
  , exportObjectType :: Maybe Text -- ^ The type of information contained in the export.
  , exportObjectFailed :: Maybe Bool -- ^ If true, the export was unsuccessful.
  , exportObjectDescription :: Maybe Text -- ^ A description of the export.
  , exportObjectDownloads :: Maybe Int -- ^ Counts the total number of times the export has been downloaded.
  , exportObjectCreatedUnderscoreat :: Maybe Int -- ^ The date time when the referenced ID was created.
  , exportObjectUpdatedUnderscoreat :: Maybe Int -- ^ The date time when the referenced ID was last updated.
  , exportObjectStatus :: Maybe Text -- ^ The state of your export where `done` indicates an export that you can download, `pending`, indicates that your export is not ready to download, and `failed` indicates an export that has failed and will not be downloadable.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ExportObject where
  parseJSON = genericParseJSON optionsExportObject
instance ToJSON ExportObject where
  toJSON = genericToJSON optionsExportObject

optionsExportObject :: Options
optionsExportObject =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("exportObjectId", "id")
      , ("exportObjectUserUnderscoreid", "user_id")
      , ("exportObjectUserUnderscoreemail", "user_email")
      , ("exportObjectTotal", "total")
      , ("exportObjectDeduplicateUnderscoreid", "deduplicate_id")
      , ("exportObjectType", "type")
      , ("exportObjectFailed", "failed")
      , ("exportObjectDescription", "description")
      , ("exportObjectDownloads", "downloads")
      , ("exportObjectCreatedUnderscoreat", "created_at")
      , ("exportObjectUpdatedUnderscoreat", "updated_at")
      , ("exportObjectStatus", "status")
      ]


-- | Contains properties shared by export filters.
data ExportSharedProps = ExportSharedProps
  { exportSharedPropsStart :: Maybe Int -- ^ The unix timestamp representing the beginning of the export.
  , exportSharedPropsEnd :: Maybe Int -- ^ The unix timestamp representing the end of the export.
  , exportSharedPropsAttributes :: Maybe [Text] -- ^ The names of attributes you want to include in your export; each attribute name is an additional column in the export. If your message included liquid, you may add the attribute names used in your message so you can see the values populated for each delivery.
  , exportSharedPropsMetric :: Maybe Text -- ^ Determines the metric(s) you want to return.
  , exportSharedPropsDrafts :: Maybe Bool -- ^ If true, your request returns both drafts and active/sent messages.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ExportSharedProps where
  parseJSON = genericParseJSON optionsExportSharedProps
instance ToJSON ExportSharedProps where
  toJSON = genericToJSON optionsExportSharedProps

optionsExportSharedProps :: Options
optionsExportSharedProps =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("exportSharedPropsStart", "start")
      , ("exportSharedPropsEnd", "end")
      , ("exportSharedPropsAttributes", "attributes")
      , ("exportSharedPropsMetric", "metric")
      , ("exportSharedPropsDrafts", "drafts")
      ]


-- | The type of information contained in the export.
data ExportType = ExportType
  { 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ExportType where
  parseJSON = genericParseJSON optionsExportType
instance ToJSON ExportType where
  toJSON = genericToJSON optionsExportType

optionsExportType :: Options
optionsExportType =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ 
      ]


-- | 
data FCM = FCM
  { fCMMessage :: FCMMessage -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON FCM where
  parseJSON = genericParseJSON optionsFCM
instance ToJSON FCM where
  toJSON = genericToJSON optionsFCM

optionsFCM :: Options
optionsFCM =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("fCMMessage", "message")
      ]


-- | The base object for all FCM payloads.
data FCMMessage = FCMMessage
  { fCMMessageApns :: FCMMessageApns -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON FCMMessage where
  parseJSON = genericParseJSON optionsFCMMessage
instance ToJSON FCMMessage where
  toJSON = genericToJSON optionsFCMMessage

optionsFCMMessage :: Options
optionsFCMMessage =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("fCMMessageApns", "apns")
      ]


-- | Defines a payload for iOS devices sent through Firebase Cloud Messaging (FCM).
data FCMMessageApns = FCMMessageApns
  { fCMMessageApnsHeaders :: Maybe Value -- ^ Headers defined by [Apple's payload reference](https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/sending_notification_requests_to_apns) that you want to pass through FCM.
  , fCMMessageApnsPayload :: FCMMessageApnsPayload -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON FCMMessageApns where
  parseJSON = genericParseJSON optionsFCMMessageApns
instance ToJSON FCMMessageApns where
  toJSON = genericToJSON optionsFCMMessageApns

optionsFCMMessageApns :: Options
optionsFCMMessageApns =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("fCMMessageApnsHeaders", "headers")
      , ("fCMMessageApnsPayload", "payload")
      ]


-- | Contains a push payload.
newtype FCMMessageApnsPayload = FCMMessageApnsPayload { unFCMMessageApnsPayload :: (Map.Map Text Value) }
  deriving (Show, Eq, FromJSON, ToJSON, Generic, Data)

-- | A push payload intended for an iOS device.
data FCMMessageApnsPayloadAps = FCMMessageApnsPayloadAps
  { fCMMessageApnsPayloadApsAlert :: Maybe FCMMessageApnsPayloadApsAlert -- ^ 
  , fCMMessageApnsPayloadApsBadge :: Maybe Int -- ^ The number you want to display on your app's icon. Set to 0 to remove the current badge, if any.
  , fCMMessageApnsPayloadApsSound :: Maybe FCMMessageApnsPayloadApsSound -- ^ 
  , fCMMessageApnsPayloadApsThreadDashid :: Maybe Text -- ^ An identifier to group related notifications.
  , fCMMessageApnsPayloadApsCategory :: Maybe Text -- ^ The notification’s type. This string must correspond to the identifier of one of the `UNNotificationCategory` objects you register at launch time.
  , fCMMessageApnsPayloadApsContentDashavailable :: Maybe Int -- ^ The background notification flag. Use `1` without an `alert` to perform a silent update. `0` indicates a normal push notification.
  , fCMMessageApnsPayloadApsMutableDashcontent :: Maybe Int -- ^ If you use the Customer.io SDK, you *must* set this value to `1` to support images and \"delivered\" metrics from your push notifications. When the value is 1, your notification is passed to your notification service app extension before delivery. Use your extension to modify the notification’s content. 
  , fCMMessageApnsPayloadApsTargetDashcontentDashid :: Maybe Text -- ^ The identifier of the window brought forward.
  , fCMMessageApnsPayloadApsInterruptionDashlevel :: Maybe Text -- ^ Indicates the importance and delivery timing of a notification.
  , fCMMessageApnsPayloadApsRelevanceDashscore :: Maybe Double -- ^ A number between 0 and 1. The highest score is considered the \"most relevant\"  and is featured in the notification summary.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON FCMMessageApnsPayloadAps where
  parseJSON = genericParseJSON optionsFCMMessageApnsPayloadAps
instance ToJSON FCMMessageApnsPayloadAps where
  toJSON = genericToJSON optionsFCMMessageApnsPayloadAps

optionsFCMMessageApnsPayloadAps :: Options
optionsFCMMessageApnsPayloadAps =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("fCMMessageApnsPayloadApsAlert", "alert")
      , ("fCMMessageApnsPayloadApsBadge", "badge")
      , ("fCMMessageApnsPayloadApsSound", "sound")
      , ("fCMMessageApnsPayloadApsThreadDashid", "thread-id")
      , ("fCMMessageApnsPayloadApsCategory", "category")
      , ("fCMMessageApnsPayloadApsContentDashavailable", "content-available")
      , ("fCMMessageApnsPayloadApsMutableDashcontent", "mutable-content")
      , ("fCMMessageApnsPayloadApsTargetDashcontentDashid", "target-content-id")
      , ("fCMMessageApnsPayloadApsInterruptionDashlevel", "interruption-level")
      , ("fCMMessageApnsPayloadApsRelevanceDashscore", "relevance-score")
      ]


-- | 
data FCMMessageApnsPayloadApsAlert = FCMMessageApnsPayloadApsAlert
  { fCMMessageApnsPayloadApsAlertBody :: Maybe Text -- ^ The body of your push notification.
  , fCMMessageApnsPayloadApsAlertTitle :: Maybe Text -- ^ The title of your push notification.
  , fCMMessageApnsPayloadApsAlertSubtitle :: Maybe Text -- ^ Additional information that explains the purpose of the notification.
  , fCMMessageApnsPayloadApsAlertLaunchDashimage :: Maybe Text -- ^ The name of the launch image file you want to display. When a user launches your app, they'll see this image or storyboard file rather than your app’s normal launch image.
  , fCMMessageApnsPayloadApsAlertTitleDashlocDashkey :: Maybe Text -- ^ The key for a localized title string in your app’s Localizable.strings files.
  , fCMMessageApnsPayloadApsAlertTitleDashlocDashargs :: Maybe [Text] -- ^ An array of replacement value strings for variables in your title string. Each %@ character in the title-loc-key is replaced by a value from this array, in the order they appear in the title string.
  , fCMMessageApnsPayloadApsAlertSubtitleDashlocDashkey :: Maybe Text -- ^ The key for a localized subtitle string in your app’s Localizable.strings file.
  , fCMMessageApnsPayloadApsAlertSubtitleDashlocDashargs :: Maybe [Text] -- ^ An array of replacement value strings for variables in your subtitle string. Each %@ character in the subtitle-loc-key is replaced by a value from this array, in the order they appear in the subtitle string.
  , fCMMessageApnsPayloadApsAlertLocDashkey :: Maybe Text -- ^ The key for a localized message string in your app’s Localizable.strings file.
  , fCMMessageApnsPayloadApsAlertLocDashargs :: Maybe [Text] -- ^ An array of replacement value strings for variables in your message text. Each %@ character in the loc-key is replaced by a value from this array, in the order they appear in the message body.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON FCMMessageApnsPayloadApsAlert where
  parseJSON = genericParseJSON optionsFCMMessageApnsPayloadApsAlert
instance ToJSON FCMMessageApnsPayloadApsAlert where
  toJSON = genericToJSON optionsFCMMessageApnsPayloadApsAlert

optionsFCMMessageApnsPayloadApsAlert :: Options
optionsFCMMessageApnsPayloadApsAlert =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("fCMMessageApnsPayloadApsAlertBody", "body")
      , ("fCMMessageApnsPayloadApsAlertTitle", "title")
      , ("fCMMessageApnsPayloadApsAlertSubtitle", "subtitle")
      , ("fCMMessageApnsPayloadApsAlertLaunchDashimage", "launch-image")
      , ("fCMMessageApnsPayloadApsAlertTitleDashlocDashkey", "title-loc-key")
      , ("fCMMessageApnsPayloadApsAlertTitleDashlocDashargs", "title-loc-args")
      , ("fCMMessageApnsPayloadApsAlertSubtitleDashlocDashkey", "subtitle-loc-key")
      , ("fCMMessageApnsPayloadApsAlertSubtitleDashlocDashargs", "subtitle-loc-args")
      , ("fCMMessageApnsPayloadApsAlertLocDashkey", "loc-key")
      , ("fCMMessageApnsPayloadApsAlertLocDashargs", "loc-args")
      ]


-- | 
data FCMMessageApnsPayloadApsSound = FCMMessageApnsPayloadApsSound
  { fCMMessageApnsPayloadApsSoundCritical :: Maybe Int -- ^ 1 indicates critical. 0 is not critical.
  , fCMMessageApnsPayloadApsSoundName :: Maybe Text -- ^ The name of a sound file in your app’s main bundle or in the Library/Sounds folder of your app’s container directory. Use “default” to play the system sound.
  , fCMMessageApnsPayloadApsSoundVolume :: Maybe Double -- ^ The volume for a critical alert between 0 and 1, where 0 is silent and 1 is full volume.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON FCMMessageApnsPayloadApsSound where
  parseJSON = genericParseJSON optionsFCMMessageApnsPayloadApsSound
instance ToJSON FCMMessageApnsPayloadApsSound where
  toJSON = genericToJSON optionsFCMMessageApnsPayloadApsSound

optionsFCMMessageApnsPayloadApsSound :: Options
optionsFCMMessageApnsPayloadApsSound =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("fCMMessageApnsPayloadApsSoundCritical", "critical")
      , ("fCMMessageApnsPayloadApsSoundName", "name")
      , ("fCMMessageApnsPayloadApsSoundVolume", "volume")
      ]


-- | Contains properties interpreted by the Customer.io iOS SDK.
data FCMMessageApnsPayloadCIO = FCMMessageApnsPayloadCIO
  { fCMMessageApnsPayloadCIOPush :: FCMMessageApnsPayloadCIOPush -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON FCMMessageApnsPayloadCIO where
  parseJSON = genericParseJSON optionsFCMMessageApnsPayloadCIO
instance ToJSON FCMMessageApnsPayloadCIO where
  toJSON = genericToJSON optionsFCMMessageApnsPayloadCIO

optionsFCMMessageApnsPayloadCIO :: Options
optionsFCMMessageApnsPayloadCIO =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("fCMMessageApnsPayloadCIOPush", "push")
      ]


-- | A push payload for the iOS SDK.
data FCMMessageApnsPayloadCIOPush = FCMMessageApnsPayloadCIOPush
  { fCMMessageApnsPayloadCIOPushTitle :: Maybe Text -- ^ The title of your push notification.
  , fCMMessageApnsPayloadCIOPushBody :: Maybe Text -- ^ The body of your push notification.
  , fCMMessageApnsPayloadCIOPushLink :: Maybe Text -- ^ A deep link (to a page in your app), or a link to a web page.
  , fCMMessageApnsPayloadCIOPushImage :: Maybe Text -- ^ The URL of an HTTPS image that you want to use for your message.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON FCMMessageApnsPayloadCIOPush where
  parseJSON = genericParseJSON optionsFCMMessageApnsPayloadCIOPush
instance ToJSON FCMMessageApnsPayloadCIOPush where
  toJSON = genericToJSON optionsFCMMessageApnsPayloadCIOPush

optionsFCMMessageApnsPayloadCIOPush :: Options
optionsFCMMessageApnsPayloadCIOPush =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("fCMMessageApnsPayloadCIOPushTitle", "title")
      , ("fCMMessageApnsPayloadCIOPushBody", "body")
      , ("fCMMessageApnsPayloadCIOPushLink", "link")
      , ("fCMMessageApnsPayloadCIOPushImage", "image")
      ]


-- | 
data Failed = Failed
  { failedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , failedObjectUnderscoretype :: Text -- ^ The event relates to an email action.
  , failedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , failedMetric :: Text -- ^ An email couldn't be sent to the delivery provider.
  , failedData :: FailedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Failed where
  parseJSON = genericParseJSON optionsFailed
instance ToJSON Failed where
  toJSON = genericToJSON optionsFailed

optionsFailed :: Options
optionsFailed =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("failedEventUnderscoreid", "event_id")
      , ("failedObjectUnderscoretype", "object_type")
      , ("failedTimestamp", "timestamp")
      , ("failedMetric", "metric")
      , ("failedData", "data")
      ]


-- | 
data Failed1 = Failed1
  { failed1EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , failed1ObjectUnderscoretype :: Text -- ^ The event relates to an email action.
  , failed1Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , failed1Metric :: Text -- ^ A message was undeliverable. Undeliverable messages are messages that have either hit a message limit, come from a newsletter that was cancelled or deleted, or an environment that has delivery disabled (which is something you might do if you’re testing an integration). If you’re not using message limits, you probably won’t see this event.
  , failed1Data :: BouncedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Failed1 where
  parseJSON = genericParseJSON optionsFailed1
instance ToJSON Failed1 where
  toJSON = genericToJSON optionsFailed1

optionsFailed1 :: Options
optionsFailed1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("failed1EventUnderscoreid", "event_id")
      , ("failed1ObjectUnderscoretype", "object_type")
      , ("failed1Timestamp", "timestamp")
      , ("failed1Metric", "metric")
      , ("failed1Data", "data")
      ]


-- | 
data Failed10 = Failed10
  { failed10EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , failed10ObjectUnderscoretype :: Text -- ^ The event relates to an push notification.
  , failed10Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , failed10Metric :: Text -- ^ A push notification couldn't be sent to the delivery provider.
  , failed10Data :: EmailAttemptedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Failed10 where
  parseJSON = genericParseJSON optionsFailed10
instance ToJSON Failed10 where
  toJSON = genericToJSON optionsFailed10

optionsFailed10 :: Options
optionsFailed10 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("failed10EventUnderscoreid", "event_id")
      , ("failed10ObjectUnderscoretype", "object_type")
      , ("failed10Timestamp", "timestamp")
      , ("failed10Metric", "metric")
      , ("failed10Data", "data")
      ]


-- | 
data Failed11 = Failed11
  { failed11EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , failed11ObjectUnderscoretype :: Text -- ^ The event relates to an push notification.
  , failed11Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , failed11Metric :: Text -- ^ A message was undeliverable. Undeliverable messages are messages that have either hit a message limit, come from a newsletter that was cancelled or deleted, or an environment that has delivery disabled (which is something you might do if you’re testing an integration). If you’re not using message limits, you probably won’t see this event.
  , failed11Data :: EmailAttemptedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Failed11 where
  parseJSON = genericParseJSON optionsFailed11
instance ToJSON Failed11 where
  toJSON = genericToJSON optionsFailed11

optionsFailed11 :: Options
optionsFailed11 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("failed11EventUnderscoreid", "event_id")
      , ("failed11ObjectUnderscoretype", "object_type")
      , ("failed11Timestamp", "timestamp")
      , ("failed11Metric", "metric")
      , ("failed11Data", "data")
      ]


-- | 
data Failed12 = Failed12
  { failed12EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , failed12ObjectUnderscoretype :: Text -- ^ The event relates to a Slack message.
  , failed12Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , failed12Metric :: Text -- ^ A slack message failed.
  , failed12Data :: SmsUndeliverableAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Failed12 where
  parseJSON = genericParseJSON optionsFailed12
instance ToJSON Failed12 where
  toJSON = genericToJSON optionsFailed12

optionsFailed12 :: Options
optionsFailed12 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("failed12EventUnderscoreid", "event_id")
      , ("failed12ObjectUnderscoretype", "object_type")
      , ("failed12Timestamp", "timestamp")
      , ("failed12Metric", "metric")
      , ("failed12Data", "data")
      ]


-- | 
data Failed13 = Failed13
  { failed13EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , failed13ObjectUnderscoretype :: Text -- ^ The event relates to a Slack message.
  , failed13Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , failed13Metric :: Text -- ^ A message was undeliverable. Undeliverable messages are messages that have either hit a message limit, come from a newsletter that was cancelled or deleted, or an environment that has delivery disabled (which is something you might do if you’re testing an integration). If you’re not using message limits, you probably won’t see this event.
  , failed13Data :: SmsUndeliverableAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Failed13 where
  parseJSON = genericParseJSON optionsFailed13
instance ToJSON Failed13 where
  toJSON = genericToJSON optionsFailed13

optionsFailed13 :: Options
optionsFailed13 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("failed13EventUnderscoreid", "event_id")
      , ("failed13ObjectUnderscoretype", "object_type")
      , ("failed13Timestamp", "timestamp")
      , ("failed13Metric", "metric")
      , ("failed13Data", "data")
      ]


-- | 
data Failed14 = Failed14
  { failed14EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , failed14ObjectUnderscoretype :: Text -- ^ The event relates to a webhook.
  , failed14Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , failed14Metric :: Text -- ^ A webhook failed to send.
  , failed14Data :: SlackUndeliverableAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Failed14 where
  parseJSON = genericParseJSON optionsFailed14
instance ToJSON Failed14 where
  toJSON = genericToJSON optionsFailed14

optionsFailed14 :: Options
optionsFailed14 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("failed14EventUnderscoreid", "event_id")
      , ("failed14ObjectUnderscoretype", "object_type")
      , ("failed14Timestamp", "timestamp")
      , ("failed14Metric", "metric")
      , ("failed14Data", "data")
      ]


-- | 
data Failed15 = Failed15
  { failed15EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , failed15ObjectUnderscoretype :: Text -- ^ The event relates to a webhook.
  , failed15Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , failed15Metric :: Text -- ^ A webhook/message was undeliverable. Undeliverable messages are messages that have either hit a message limit, come from a newsletter that was cancelled or deleted, or an environment that has delivery disabled (which is something you might do if you’re testing an integration). If you’re not using message limits, you probably won’t see this event.
  , failed15Data :: SlackUndeliverableAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Failed15 where
  parseJSON = genericParseJSON optionsFailed15
instance ToJSON Failed15 where
  toJSON = genericToJSON optionsFailed15

optionsFailed15 :: Options
optionsFailed15 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("failed15EventUnderscoreid", "event_id")
      , ("failed15ObjectUnderscoretype", "object_type")
      , ("failed15Timestamp", "timestamp")
      , ("failed15Metric", "metric")
      , ("failed15Data", "data")
      ]


-- | 
data Failed16 = Failed16
  { failed16EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , failed16ObjectUnderscoretype :: Text -- ^ The event relates to an in-app message.
  , failed16Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , failed16Metric :: Text -- ^ An in-app message failed to send.
  , failed16Data :: WebhookUndeliverableAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Failed16 where
  parseJSON = genericParseJSON optionsFailed16
instance ToJSON Failed16 where
  toJSON = genericToJSON optionsFailed16

optionsFailed16 :: Options
optionsFailed16 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("failed16EventUnderscoreid", "event_id")
      , ("failed16ObjectUnderscoretype", "object_type")
      , ("failed16Timestamp", "timestamp")
      , ("failed16Metric", "metric")
      , ("failed16Data", "data")
      ]


-- | 
data Failed2 = Failed2
  { failed2EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , failed2ObjectUnderscoretype :: Text -- ^ The event relates to an push notification.
  , failed2Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , failed2Metric :: Text -- ^ A push notification couldn't be sent to the delivery provider.
  , failed2Data :: AttemptedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Failed2 where
  parseJSON = genericParseJSON optionsFailed2
instance ToJSON Failed2 where
  toJSON = genericToJSON optionsFailed2

optionsFailed2 :: Options
optionsFailed2 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("failed2EventUnderscoreid", "event_id")
      , ("failed2ObjectUnderscoretype", "object_type")
      , ("failed2Timestamp", "timestamp")
      , ("failed2Metric", "metric")
      , ("failed2Data", "data")
      ]


-- | 
data Failed3 = Failed3
  { failed3EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , failed3ObjectUnderscoretype :: Text -- ^ The event relates to an push notification.
  , failed3Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , failed3Metric :: Text -- ^ A message was undeliverable. Undeliverable messages are messages that have either hit a message limit, come from a newsletter that was cancelled or deleted, or an environment that has delivery disabled (which is something you might do if you’re testing an integration). If you’re not using message limits, you probably won’t see this event.
  , failed3Data :: AttemptedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Failed3 where
  parseJSON = genericParseJSON optionsFailed3
instance ToJSON Failed3 where
  toJSON = genericToJSON optionsFailed3

optionsFailed3 :: Options
optionsFailed3 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("failed3EventUnderscoreid", "event_id")
      , ("failed3ObjectUnderscoretype", "object_type")
      , ("failed3Timestamp", "timestamp")
      , ("failed3Metric", "metric")
      , ("failed3Data", "data")
      ]


-- | 
data Failed4 = Failed4
  { failed4EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , failed4ObjectUnderscoretype :: Text -- ^ The event relates to an in-app message.
  , failed4Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , failed4Metric :: Text -- ^ An in-app message failed to send.
  , failed4Data :: Attempted2AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Failed4 where
  parseJSON = genericParseJSON optionsFailed4
instance ToJSON Failed4 where
  toJSON = genericToJSON optionsFailed4

optionsFailed4 :: Options
optionsFailed4 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("failed4EventUnderscoreid", "event_id")
      , ("failed4ObjectUnderscoretype", "object_type")
      , ("failed4Timestamp", "timestamp")
      , ("failed4Metric", "metric")
      , ("failed4Data", "data")
      ]


-- | 
data Failed5 = Failed5
  { failed5EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , failed5ObjectUnderscoretype :: Text -- ^ The event relates to an SMS message.
  , failed5Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , failed5Metric :: Text -- ^ An SMS couldn't be sent to the delivery provider.
  , failed5Data :: Attempted2AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Failed5 where
  parseJSON = genericParseJSON optionsFailed5
instance ToJSON Failed5 where
  toJSON = genericToJSON optionsFailed5

optionsFailed5 :: Options
optionsFailed5 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("failed5EventUnderscoreid", "event_id")
      , ("failed5ObjectUnderscoretype", "object_type")
      , ("failed5Timestamp", "timestamp")
      , ("failed5Metric", "metric")
      , ("failed5Data", "data")
      ]


-- | 
data Failed6 = Failed6
  { failed6EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , failed6ObjectUnderscoretype :: Text -- ^ The event relates to a Slack message.
  , failed6Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , failed6Metric :: Text -- ^ A slack message failed.
  , failed6Data :: Attempted2AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Failed6 where
  parseJSON = genericParseJSON optionsFailed6
instance ToJSON Failed6 where
  toJSON = genericToJSON optionsFailed6

optionsFailed6 :: Options
optionsFailed6 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("failed6EventUnderscoreid", "event_id")
      , ("failed6ObjectUnderscoretype", "object_type")
      , ("failed6Timestamp", "timestamp")
      , ("failed6Metric", "metric")
      , ("failed6Data", "data")
      ]


-- | 
data Failed7 = Failed7
  { failed7EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , failed7ObjectUnderscoretype :: Text -- ^ The event relates to a Slack message.
  , failed7Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , failed7Metric :: Text -- ^ A message was undeliverable. Undeliverable messages are messages that have either hit a message limit, come from a newsletter that was cancelled or deleted, or an environment that has delivery disabled (which is something you might do if you’re testing an integration). If you’re not using message limits, you probably won’t see this event.
  , failed7Data :: Attempted2AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Failed7 where
  parseJSON = genericParseJSON optionsFailed7
instance ToJSON Failed7 where
  toJSON = genericToJSON optionsFailed7

optionsFailed7 :: Options
optionsFailed7 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("failed7EventUnderscoreid", "event_id")
      , ("failed7ObjectUnderscoretype", "object_type")
      , ("failed7Timestamp", "timestamp")
      , ("failed7Metric", "metric")
      , ("failed7Data", "data")
      ]


-- | 
data Failed8 = Failed8
  { failed8EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , failed8ObjectUnderscoretype :: Text -- ^ The event relates to a webhook.
  , failed8Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , failed8Metric :: Text -- ^ A webhook failed to send.
  , failed8Data :: Attempted2AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Failed8 where
  parseJSON = genericParseJSON optionsFailed8
instance ToJSON Failed8 where
  toJSON = genericToJSON optionsFailed8

optionsFailed8 :: Options
optionsFailed8 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("failed8EventUnderscoreid", "event_id")
      , ("failed8ObjectUnderscoretype", "object_type")
      , ("failed8Timestamp", "timestamp")
      , ("failed8Metric", "metric")
      , ("failed8Data", "data")
      ]


-- | 
data Failed9 = Failed9
  { failed9EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , failed9ObjectUnderscoretype :: Text -- ^ The event relates to a webhook.
  , failed9Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , failed9Metric :: Text -- ^ A webhook/message was undeliverable. Undeliverable messages are messages that have either hit a message limit, come from a newsletter that was cancelled or deleted, or an environment that has delivery disabled (which is something you might do if you’re testing an integration). If you’re not using message limits, you probably won’t see this event.
  , failed9Data :: Attempted2AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Failed9 where
  parseJSON = genericParseJSON optionsFailed9
instance ToJSON Failed9 where
  toJSON = genericToJSON optionsFailed9

optionsFailed9 :: Options
optionsFailed9 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("failed9EventUnderscoreid", "event_id")
      , ("failed9ObjectUnderscoretype", "object_type")
      , ("failed9Timestamp", "timestamp")
      , ("failed9Metric", "metric")
      , ("failed9Data", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data FailedAllOfData = FailedAllOfData
  { failedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , failedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , failedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , failedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , failedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , failedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , failedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , failedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , failedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , failedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , failedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , failedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , failedAllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , failedAllOfDataSubject :: Text -- ^ The subject of the email.
  , failedAllOfDataFailureUnderscoremessage :: Text -- ^ Indicates the reason that an attempted message failed.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON FailedAllOfData where
  parseJSON = genericParseJSON optionsFailedAllOfData
instance ToJSON FailedAllOfData where
  toJSON = genericToJSON optionsFailedAllOfData

optionsFailedAllOfData :: Options
optionsFailedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("failedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("failedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("failedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("failedAllOfDataActionUnderscoreid", "action_id")
      , ("failedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("failedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("failedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("failedAllOfDataIdentifiers", "identifiers")
      , ("failedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("failedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("failedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("failedAllOfDataContentUnderscoreid", "content_id")
      , ("failedAllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("failedAllOfDataSubject", "subject")
      , ("failedAllOfDataFailureUnderscoremessage", "failure_message")
      ]


-- | 
data FcmAndroid = FcmAndroid
  { fcmAndroidMessage :: SendPushRequestAllOfCustomPayloadAndroid -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON FcmAndroid where
  parseJSON = genericParseJSON optionsFcmAndroid
instance ToJSON FcmAndroid where
  toJSON = genericToJSON optionsFcmAndroid

optionsFcmAndroid :: Options
optionsFcmAndroid =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("fcmAndroidMessage", "message")
      ]


-- | 
data FcmAndroidWithSdk = FcmAndroidWithSdk
  { fcmAndroidWithSdkMessage :: FcmAndroidWithSdkMessage -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON FcmAndroidWithSdk where
  parseJSON = genericParseJSON optionsFcmAndroidWithSdk
instance ToJSON FcmAndroidWithSdk where
  toJSON = genericToJSON optionsFcmAndroidWithSdk

optionsFcmAndroidWithSdk :: Options
optionsFcmAndroidWithSdk =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("fcmAndroidWithSdkMessage", "message")
      ]


-- | The parent object for all push payloads.
data FcmAndroidWithSdkMessage = FcmAndroidWithSdkMessage
  { fcmAndroidWithSdkMessageData :: FcmBasicPushMessageData -- ^ 
  , fcmAndroidWithSdkMessageAndroid :: Maybe DataObjectOnlyAndroid -- ^ 
  , fcmAndroidWithSdkMessageNotification :: NotificationAndDataObjectNotification -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON FcmAndroidWithSdkMessage where
  parseJSON = genericParseJSON optionsFcmAndroidWithSdkMessage
instance ToJSON FcmAndroidWithSdkMessage where
  toJSON = genericToJSON optionsFcmAndroidWithSdkMessage

optionsFcmAndroidWithSdkMessage :: Options
optionsFcmAndroidWithSdkMessage =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("fcmAndroidWithSdkMessageData", "data")
      , ("fcmAndroidWithSdkMessageAndroid", "android")
      , ("fcmAndroidWithSdkMessageNotification", "notification")
      ]


-- | A custom push payload for Android devices.
data FcmAndroidWithoutSdk = FcmAndroidWithoutSdk
  { fcmAndroidWithoutSdkMessage :: SendPushRequestAllOfCustomPayloadAndroidMessage -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON FcmAndroidWithoutSdk where
  parseJSON = genericParseJSON optionsFcmAndroidWithoutSdk
instance ToJSON FcmAndroidWithoutSdk where
  toJSON = genericToJSON optionsFcmAndroidWithoutSdk

optionsFcmAndroidWithoutSdk :: Options
optionsFcmAndroidWithoutSdk =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("fcmAndroidWithoutSdkMessage", "message")
      ]


-- | 
data FcmBasicPush = FcmBasicPush
  { fcmBasicPushMessage :: FcmBasicPushMessage -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON FcmBasicPush where
  parseJSON = genericParseJSON optionsFcmBasicPush
instance ToJSON FcmBasicPush where
  toJSON = genericToJSON optionsFcmBasicPush

optionsFcmBasicPush :: Options
optionsFcmBasicPush =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("fcmBasicPushMessage", "message")
      ]


-- | The parent object for all custom push payloads.
data FcmBasicPushMessage = FcmBasicPushMessage
  { fcmBasicPushMessageNotification :: FcmBasicPushMessageNotification -- ^ 
  , fcmBasicPushMessageData :: Maybe FcmBasicPushMessageData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON FcmBasicPushMessage where
  parseJSON = genericParseJSON optionsFcmBasicPushMessage
instance ToJSON FcmBasicPushMessage where
  toJSON = genericToJSON optionsFcmBasicPushMessage

optionsFcmBasicPushMessage :: Options
optionsFcmBasicPushMessage =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("fcmBasicPushMessageNotification", "notification")
      , ("fcmBasicPushMessageData", "data")
      ]


-- | Contains the &#x60;link&#x60; property (interpreted by the SDK) and additional properties that you want to pass to your app.
data FcmBasicPushMessageData = FcmBasicPushMessageData
  { fcmBasicPushMessageDataLink :: Maybe Text -- ^ A deep link (to a page in your app), or a link to a web page.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON FcmBasicPushMessageData where
  parseJSON = genericParseJSON optionsFcmBasicPushMessageData
instance ToJSON FcmBasicPushMessageData where
  toJSON = genericToJSON optionsFcmBasicPushMessageData

optionsFcmBasicPushMessageData :: Options
optionsFcmBasicPushMessageData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("fcmBasicPushMessageDataLink", "link")
      ]


-- | Contains properties interpreted by the SDK except for the &#x60;link&#x60;.
data FcmBasicPushMessageNotification = FcmBasicPushMessageNotification
  { fcmBasicPushMessageNotificationTitle :: Maybe Text -- ^ The title of your push notification.
  , fcmBasicPushMessageNotificationBody :: Text -- ^ The body of your push notification.
  , fcmBasicPushMessageNotificationImage :: Maybe Text -- ^ The URL of an HTTPS image that you want to use for your message.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON FcmBasicPushMessageNotification where
  parseJSON = genericParseJSON optionsFcmBasicPushMessageNotification
instance ToJSON FcmBasicPushMessageNotification where
  toJSON = genericToJSON optionsFcmBasicPushMessageNotification

optionsFcmBasicPushMessageNotification :: Options
optionsFcmBasicPushMessageNotification =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("fcmBasicPushMessageNotificationTitle", "title")
      , ("fcmBasicPushMessageNotificationBody", "body")
      , ("fcmBasicPushMessageNotificationImage", "image")
      ]


-- | 
data FcmIosWithSdk = FcmIosWithSdk
  { fcmIosWithSdkMessage :: FCMMessage -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON FcmIosWithSdk where
  parseJSON = genericParseJSON optionsFcmIosWithSdk
instance ToJSON FcmIosWithSdk where
  toJSON = genericToJSON optionsFcmIosWithSdk

optionsFcmIosWithSdk :: Options
optionsFcmIosWithSdk =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("fcmIosWithSdkMessage", "message")
      ]


-- | 
data FcmIosWithoutSdk = FcmIosWithoutSdk
  { fcmIosWithoutSdkMessage :: FcmIosWithoutSdkMessage -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON FcmIosWithoutSdk where
  parseJSON = genericParseJSON optionsFcmIosWithoutSdk
instance ToJSON FcmIosWithoutSdk where
  toJSON = genericToJSON optionsFcmIosWithoutSdk

optionsFcmIosWithoutSdk :: Options
optionsFcmIosWithoutSdk =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("fcmIosWithoutSdkMessage", "message")
      ]


-- | The base object for all Firebase payloads.
data FcmIosWithoutSdkMessage = FcmIosWithoutSdkMessage
  { fcmIosWithoutSdkMessageApns :: FcmIosWithoutSdkMessageApns -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON FcmIosWithoutSdkMessage where
  parseJSON = genericParseJSON optionsFcmIosWithoutSdkMessage
instance ToJSON FcmIosWithoutSdkMessage where
  toJSON = genericToJSON optionsFcmIosWithoutSdkMessage

optionsFcmIosWithoutSdkMessage :: Options
optionsFcmIosWithoutSdkMessage =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("fcmIosWithoutSdkMessageApns", "apns")
      ]


-- | Defines a push notification for iOS devices.
data FcmIosWithoutSdkMessageApns = FcmIosWithoutSdkMessageApns
  { fcmIosWithoutSdkMessageApnsHeaders :: Maybe Value -- ^ Headers defined by [Apple's payload reference](https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/sending_notification_requests_to_apns) that you want to pass through FCM.
  , fcmIosWithoutSdkMessageApnsPayload :: FcmIosWithoutSdkMessageApnsPayload -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON FcmIosWithoutSdkMessageApns where
  parseJSON = genericParseJSON optionsFcmIosWithoutSdkMessageApns
instance ToJSON FcmIosWithoutSdkMessageApns where
  toJSON = genericToJSON optionsFcmIosWithoutSdkMessageApns

optionsFcmIosWithoutSdkMessageApns :: Options
optionsFcmIosWithoutSdkMessageApns =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("fcmIosWithoutSdkMessageApnsHeaders", "headers")
      , ("fcmIosWithoutSdkMessageApnsPayload", "payload")
      ]


-- | 
data FcmIosWithoutSdkMessageApnsPayload = FcmIosWithoutSdkMessageApnsPayload
  { fcmIosWithoutSdkMessageApnsPayloadAps :: Maybe FCMMessageApnsPayloadAps -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON FcmIosWithoutSdkMessageApnsPayload where
  parseJSON = genericParseJSON optionsFcmIosWithoutSdkMessageApnsPayload
instance ToJSON FcmIosWithoutSdkMessageApnsPayload where
  toJSON = genericToJSON optionsFcmIosWithoutSdkMessageApnsPayload

optionsFcmIosWithoutSdkMessageApnsPayload :: Options
optionsFcmIosWithoutSdkMessageApnsPayload =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("fcmIosWithoutSdkMessageApnsPayloadAps", "aps")
      ]


-- | Used to layout an in-app message in a fixed grid.
data FixedGridWidget = FixedGridWidget
  { fixedGridWidgetType :: Text -- ^ Defines the widget type.
  , fixedGridWidgetItemPadding :: Maybe Text -- ^ The padding between items in your grid.
  , fixedGridWidgetColumns :: Int -- ^ The number of columns in your grid.
  , fixedGridWidgetChildAspectRatio :: Maybe Double -- ^ The aspect ratio for items in the grid. Defaults to 1.0
  , fixedGridWidgetComponents :: [Value] -- ^ An array of child components that you want to make available inside this widget.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON FixedGridWidget where
  parseJSON = genericParseJSON optionsFixedGridWidget
instance ToJSON FixedGridWidget where
  toJSON = genericToJSON optionsFixedGridWidget

optionsFixedGridWidget :: Options
optionsFixedGridWidget =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("fixedGridWidgetType", "type")
      , ("fixedGridWidgetItemPadding", "itemPadding")
      , ("fixedGridWidgetColumns", "columns")
      , ("fixedGridWidgetChildAspectRatio", "childAspectRatio")
      , ("fixedGridWidgetComponents", "components")
      ]


-- | Displays a series of components in a horizontal list, like if you want to put an image and text next to each other.
data FixedHorizontalListWidget = FixedHorizontalListWidget
  { fixedHorizontalListWidgetType :: Maybe Text -- ^ Defines the widget type.
  , fixedHorizontalListWidgetMainAxisAlignment :: Maybe Text -- ^ The mainAxisAlignment property supports the following options.
  , fixedHorizontalListWidgetCrossAxisAlignment :: Maybe Text -- ^ The crossAxisAlignment property supports the following options
  , fixedHorizontalListWidgetComponents :: Maybe [Value] -- ^ An array of child components that you want to make available inside this widget.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON FixedHorizontalListWidget where
  parseJSON = genericParseJSON optionsFixedHorizontalListWidget
instance ToJSON FixedHorizontalListWidget where
  toJSON = genericToJSON optionsFixedHorizontalListWidget

optionsFixedHorizontalListWidget :: Options
optionsFixedHorizontalListWidget =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("fixedHorizontalListWidgetType", "type")
      , ("fixedHorizontalListWidgetMainAxisAlignment", "mainAxisAlignment")
      , ("fixedHorizontalListWidgetCrossAxisAlignment", "crossAxisAlignment")
      , ("fixedHorizontalListWidgetComponents", "components")
      ]


-- | A series of components that you can scroll through, like a carousel.
data FixedHorizontalScrollWidget = FixedHorizontalScrollWidget
  { fixedHorizontalScrollWidgetType :: Maybe Text -- ^ Defines the widget type
  , fixedHorizontalScrollWidgetHeight :: Maybe Int -- ^ The height of the widget in pixels.
  , fixedHorizontalScrollWidgetComponents :: Maybe [Value] -- ^ An array of child components that you want to make available inside this widget.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON FixedHorizontalScrollWidget where
  parseJSON = genericParseJSON optionsFixedHorizontalScrollWidget
instance ToJSON FixedHorizontalScrollWidget where
  toJSON = genericToJSON optionsFixedHorizontalScrollWidget

optionsFixedHorizontalScrollWidget :: Options
optionsFixedHorizontalScrollWidget =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("fixedHorizontalScrollWidgetType", "type")
      , ("fixedHorizontalScrollWidgetHeight", "height")
      , ("fixedHorizontalScrollWidgetComponents", "components")
      ]


-- | Displays a series of components in a vertical list.
data FixedListWidget = FixedListWidget
  { fixedListWidgetType :: Maybe Text -- ^ Defines the widget type.
  , fixedListWidgetMainAxisAlignment :: Maybe Text -- ^ The mainAxisAlignment property supports the following options.
  , fixedListWidgetCrossAxisAlignment :: Maybe Text -- ^ The crossAxisAlignment property supports the following options
  , fixedListWidgetComponents :: Maybe [Value] -- ^ An array of child components that you want to make available inside this widget.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON FixedListWidget where
  parseJSON = genericParseJSON optionsFixedListWidget
instance ToJSON FixedListWidget where
  toJSON = genericToJSON optionsFixedListWidget

optionsFixedListWidget :: Options
optionsFixedListWidget =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("fixedListWidgetType", "type")
      , ("fixedListWidgetMainAxisAlignment", "mainAxisAlignment")
      , ("fixedListWidgetCrossAxisAlignment", "crossAxisAlignment")
      , ("fixedListWidgetComponents", "components")
      ]


-- | 
data Form = Form
  { formId :: Maybe Int -- ^ The identifier for a campaign.
  , formDeduplicateUnderscoreid :: Maybe Text -- ^ An identifier in the format `id:timestamp` where the id is the id of the object you are working with (Campaigns, Deliveries, Exports, Identities, Newsletters, Segments, and Templates), and the timestamp is the last time the object was updated.
  , formName :: Maybe Text -- ^ The name of the campaign.
  , formType :: Maybe Text -- ^ The type of campaign trigger. **Sunsetting on March 30, 2025**
  , formCreated :: Maybe Int -- ^ The date time when the referenced ID was created.
  , formUpdated :: Maybe Int -- ^ The date time when the referenced ID was last updated.
  , formActive :: Maybe Bool -- ^ If true, the campaign is active and can still send messages.
  , formState :: Maybe Text -- ^ The status of the campaign.
  , formActions :: Maybe [SegmentActionsInner] -- ^ An array of actions contained within the campaign.
  , formFirstUnderscorestarted :: Maybe Int -- ^ The date and time when you first started the campaign and it first became eligible to be triggered.
  , formTags :: Maybe [Text] -- ^ An array of tags you set on this campaign.
  , formFilterUnderscoresegmentUnderscoreids :: Maybe [Int] -- ^ A list of segments used in the campaign filter, returned if the campaign audience was filtered on one or more segments.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Form where
  parseJSON = genericParseJSON optionsForm
instance ToJSON Form where
  toJSON = genericToJSON optionsForm

optionsForm :: Options
optionsForm =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("formId", "id")
      , ("formDeduplicateUnderscoreid", "deduplicate_id")
      , ("formName", "name")
      , ("formType", "type")
      , ("formCreated", "created")
      , ("formUpdated", "updated")
      , ("formActive", "active")
      , ("formState", "state")
      , ("formActions", "actions")
      , ("formFirstUnderscorestarted", "first_started")
      , ("formTags", "tags")
      , ("formFilterUnderscoresegmentUnderscoreids", "filter_segment_ids")
      ]


-- | Describes an archived message delivery.
data GetArchivedMessage200Response = GetArchivedMessage200Response
  { getArchivedMessage200ResponseArchivedUnderscoremessage :: Maybe GetArchivedMessage200ResponseArchivedMessage -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetArchivedMessage200Response where
  parseJSON = genericParseJSON optionsGetArchivedMessage200Response
instance ToJSON GetArchivedMessage200Response where
  toJSON = genericToJSON optionsGetArchivedMessage200Response

optionsGetArchivedMessage200Response :: Options
optionsGetArchivedMessage200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getArchivedMessage200ResponseArchivedUnderscoremessage", "archived_message")
      ]


-- | An archived message, including a complete message body. 
data GetArchivedMessage200ResponseArchivedMessage = GetArchivedMessage200ResponseArchivedMessage
  { getArchivedMessage200ResponseArchivedMessageId :: Maybe Text -- ^ The identifier for a delivery—the instance of a message intended for an individual recipient.
  , getArchivedMessage200ResponseArchivedMessageBody :: Maybe Text -- ^ The body of the variant. You cannot modify the body if you created it with our drag-and-drop editor.
  , getArchivedMessage200ResponseArchivedMessageFrom :: Maybe Text -- ^ The address that the message is from, relevant if the action `type` is `email`.
  , getArchivedMessage200ResponseArchivedMessageReplyUnderscoreto :: Maybe Text -- ^ The address that receives replies for the message, if applicable.
  , getArchivedMessage200ResponseArchivedMessageRecipient :: Maybe Text -- ^ The recipient address for an action.
  , getArchivedMessage200ResponseArchivedMessageSubject :: Maybe Text -- ^ The subject line for an `email` action.
  , getArchivedMessage200ResponseArchivedMessageBcc :: Maybe Text -- ^ The blind-copy address(es) for this action.
  , getArchivedMessage200ResponseArchivedMessageFakeUnderscorebcc :: Maybe Bool -- ^ If true, rather than sending true copies to BCC addresses, Customer.io sends a copy of the message with the subject line containing the recipient address(es). 
  , getArchivedMessage200ResponseArchivedMessagePreheaderUnderscoretext :: Maybe Text -- ^ Also known as \"preview text\", this specifies the small block of text shown in an end-user's email inbox, next to, or underneath, the subject line.
  , getArchivedMessage200ResponseArchivedMessageUrl :: Maybe Text -- ^ The URL of a webhook or action.
  , getArchivedMessage200ResponseArchivedMessageRequestUnderscoremethod :: Maybe Text -- ^ The method used in conjunction with a webhook `url`.
  , getArchivedMessage200ResponseArchivedMessageHeaders :: Maybe (Map.Map String Text) -- ^ An object containing headers, where the key is the header name and the value is the header value. Header names and values must be strings and cannot contain any non-ASCII characters or empty spaces. Some headers are reserved and cannot be overwritten.
  , getArchivedMessage200ResponseArchivedMessageForgotten :: Maybe Bool -- ^ If true, Customer.io does not retain the message content.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetArchivedMessage200ResponseArchivedMessage where
  parseJSON = genericParseJSON optionsGetArchivedMessage200ResponseArchivedMessage
instance ToJSON GetArchivedMessage200ResponseArchivedMessage where
  toJSON = genericToJSON optionsGetArchivedMessage200ResponseArchivedMessage

optionsGetArchivedMessage200ResponseArchivedMessage :: Options
optionsGetArchivedMessage200ResponseArchivedMessage =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getArchivedMessage200ResponseArchivedMessageId", "id")
      , ("getArchivedMessage200ResponseArchivedMessageBody", "body")
      , ("getArchivedMessage200ResponseArchivedMessageFrom", "from")
      , ("getArchivedMessage200ResponseArchivedMessageReplyUnderscoreto", "reply_to")
      , ("getArchivedMessage200ResponseArchivedMessageRecipient", "recipient")
      , ("getArchivedMessage200ResponseArchivedMessageSubject", "subject")
      , ("getArchivedMessage200ResponseArchivedMessageBcc", "bcc")
      , ("getArchivedMessage200ResponseArchivedMessageFakeUnderscorebcc", "fake_bcc")
      , ("getArchivedMessage200ResponseArchivedMessagePreheaderUnderscoretext", "preheader_text")
      , ("getArchivedMessage200ResponseArchivedMessageUrl", "url")
      , ("getArchivedMessage200ResponseArchivedMessageRequestUnderscoremethod", "request_method")
      , ("getArchivedMessage200ResponseArchivedMessageHeaders", "headers")
      , ("getArchivedMessage200ResponseArchivedMessageForgotten", "forgotten")
      ]


-- | 
data GetBroadcast200Response = GetBroadcast200Response
  { getBroadcast200ResponseBroadcast :: Maybe ListBroadcasts200ResponseBroadcastsInner -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetBroadcast200Response where
  parseJSON = genericParseJSON optionsGetBroadcast200Response
instance ToJSON GetBroadcast200Response where
  toJSON = genericToJSON optionsGetBroadcast200Response

optionsGetBroadcast200Response :: Options
optionsGetBroadcast200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getBroadcast200ResponseBroadcast", "broadcast")
      ]


-- | 
data GetBroadcastAction200Response = GetBroadcastAction200Response
  { getBroadcastAction200ResponseAction :: Maybe BroadcastActions200ResponseActionsInner -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetBroadcastAction200Response where
  parseJSON = genericParseJSON optionsGetBroadcastAction200Response
instance ToJSON GetBroadcastAction200Response where
  toJSON = genericToJSON optionsGetBroadcastAction200Response

optionsGetBroadcastAction200Response :: Options
optionsGetBroadcastAction200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getBroadcastAction200ResponseAction", "action")
      ]


-- | 
data GetCampaignAction200Response = GetCampaignAction200Response
  { getCampaignAction200ResponseAction :: Maybe ListCampaignActions200ResponseActionsInner -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetCampaignAction200Response where
  parseJSON = genericParseJSON optionsGetCampaignAction200Response
instance ToJSON GetCampaignAction200Response where
  toJSON = genericToJSON optionsGetCampaignAction200Response

optionsGetCampaignAction200Response :: Options
optionsGetCampaignAction200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getCampaignAction200ResponseAction", "action")
      ]


-- | 
data GetCampaignMessages200Response = GetCampaignMessages200Response
  { getCampaignMessages200ResponseMessages :: Maybe [BroadcastMessages200ResponseMessagesInner] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetCampaignMessages200Response where
  parseJSON = genericParseJSON optionsGetCampaignMessages200Response
instance ToJSON GetCampaignMessages200Response where
  toJSON = genericToJSON optionsGetCampaignMessages200Response

optionsGetCampaignMessages200Response :: Options
optionsGetCampaignMessages200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getCampaignMessages200ResponseMessages", "messages")
      ]


-- | 
data GetCampaigns200Response = GetCampaigns200Response
  { getCampaigns200ResponseCampaign :: Maybe GetCampaigns200ResponseCampaign -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetCampaigns200Response where
  parseJSON = genericParseJSON optionsGetCampaigns200Response
instance ToJSON GetCampaigns200Response where
  toJSON = genericToJSON optionsGetCampaigns200Response

optionsGetCampaigns200Response :: Options
optionsGetCampaigns200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getCampaigns200ResponseCampaign", "campaign")
      ]


-- | A campaign in your workspace with one of seven types of campaign triggers.
data GetCampaigns200ResponseCampaign = GetCampaigns200ResponseCampaign
  { getCampaigns200ResponseCampaignId :: Maybe Int -- ^ The identifier for a campaign.
  , getCampaigns200ResponseCampaignDeduplicateUnderscoreid :: Maybe Text -- ^ An identifier in the format `id:timestamp` where the id is the id of the object you are working with (Campaigns, Deliveries, Exports, Identities, Newsletters, Segments, and Templates), and the timestamp is the last time the object was updated.
  , getCampaigns200ResponseCampaignName :: Maybe Text -- ^ The name of the campaign.
  , getCampaigns200ResponseCampaignType :: Maybe Text -- ^ The type of campaign trigger. **Sunsetting on March 30, 2025**
  , getCampaigns200ResponseCampaignCreated :: Maybe Int -- ^ The date time when the referenced ID was created.
  , getCampaigns200ResponseCampaignUpdated :: Maybe Int -- ^ The date time when the referenced ID was last updated.
  , getCampaigns200ResponseCampaignActive :: Maybe Bool -- ^ If true, the campaign is active and can still send messages.
  , getCampaigns200ResponseCampaignState :: Maybe Text -- ^ The status of the campaign.
  , getCampaigns200ResponseCampaignActions :: Maybe [SegmentActionsInner] -- ^ An array of actions contained within the campaign.
  , getCampaigns200ResponseCampaignFirstUnderscorestarted :: Maybe Int -- ^ The date and time when you first started the campaign and it first became eligible to be triggered.
  , getCampaigns200ResponseCampaignTags :: Maybe [Text] -- ^ An array of tags you set on this campaign.
  , getCampaigns200ResponseCampaignTriggerUnderscoresegmentUnderscoreids :: Maybe [Int] -- ^ A list of segments used in the campaign trigger, returned if the campaign trigger included one or more segment conditions.
  , getCampaigns200ResponseCampaignFilterUnderscoresegmentUnderscoreids :: Maybe [Int] -- ^ A list of segments used in the campaign filter, returned if the campaign audience was filtered on one or more segments.
  , getCampaigns200ResponseCampaignMsgUnderscoretemplates :: Maybe [SegmentMsgTemplatesInner] -- ^ Indicates the message templates used in this campaign.
  , getCampaigns200ResponseCampaignEventUnderscorename :: Maybe Text -- ^ The name of the event. How you reference the event in campaigns or segments.
  , getCampaigns200ResponseCampaignFrequency :: Maybe Text -- ^ How often a person will receive this campaign based on the date specified in the campaign trigger.
  , getCampaigns200ResponseCampaignDateUnderscoreattribute :: Maybe Text -- ^ The attribute on people's profiles you use to configure the date of the campaign trigger.
  , getCampaigns200ResponseCampaignTimezone :: Maybe Text -- ^ The timezone you set to configure the date of the campaign trigger.
  , getCampaigns200ResponseCampaignUseUnderscorecustomerUnderscoretimezone :: Maybe Bool -- ^ If you chose \"the user's timezone\" while configuring the date of the campaign trigger, this is `true`. Otherwise, you set a specific timezone so it's `false`.
  , getCampaigns200ResponseCampaignStartUnderscorehour :: Maybe Int -- ^ The hour you set the campaign to trigger. Follows the 24-hour clock.
  , getCampaigns200ResponseCampaignStartUnderscoreminutes :: Maybe Int -- ^ The minutes you set the campaign to trigger. Follows the 24-hour clock.
  , getCampaigns200ResponseCampaignObjectUnderscoretypeUnderscoreid :: Maybe Int -- ^ The the object type ID of the trigger.
  , getCampaigns200ResponseCampaignFilterUnderscoreobjectUnderscoreattributes :: Maybe Text -- ^ A list of object attributes used in the campaign filter, returned if the campaign audience was filtered on one or more object attributes.
  , getCampaigns200ResponseCampaignFilterUnderscorerelationshipUnderscoreattributes :: Maybe Text -- ^ A list of relationship attributes used in the campaign filter, returned if the campaign audience was filtered on one or more relationship attributes.
  , getCampaigns200ResponseCampaignAudience :: Maybe ObjectAudience -- ^ 
  , getCampaigns200ResponseCampaignRelationshipUnderscoreattributeUnderscoretriggers :: Maybe Value -- ^ A list of relationship attributes used to trigger the campaign.
  , getCampaigns200ResponseCampaignObjectUnderscoreattributeUnderscoretriggers :: Maybe Value -- ^ A list of object attributes used to trigger the campaign.
  , getCampaigns200ResponseCampaignWebhookUnderscoreid :: Maybe Int -- ^ The ID of the webhook trigger generated by Customer.io.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetCampaigns200ResponseCampaign where
  parseJSON = genericParseJSON optionsGetCampaigns200ResponseCampaign
instance ToJSON GetCampaigns200ResponseCampaign where
  toJSON = genericToJSON optionsGetCampaigns200ResponseCampaign

optionsGetCampaigns200ResponseCampaign :: Options
optionsGetCampaigns200ResponseCampaign =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getCampaigns200ResponseCampaignId", "id")
      , ("getCampaigns200ResponseCampaignDeduplicateUnderscoreid", "deduplicate_id")
      , ("getCampaigns200ResponseCampaignName", "name")
      , ("getCampaigns200ResponseCampaignType", "type")
      , ("getCampaigns200ResponseCampaignCreated", "created")
      , ("getCampaigns200ResponseCampaignUpdated", "updated")
      , ("getCampaigns200ResponseCampaignActive", "active")
      , ("getCampaigns200ResponseCampaignState", "state")
      , ("getCampaigns200ResponseCampaignActions", "actions")
      , ("getCampaigns200ResponseCampaignFirstUnderscorestarted", "first_started")
      , ("getCampaigns200ResponseCampaignTags", "tags")
      , ("getCampaigns200ResponseCampaignTriggerUnderscoresegmentUnderscoreids", "trigger_segment_ids")
      , ("getCampaigns200ResponseCampaignFilterUnderscoresegmentUnderscoreids", "filter_segment_ids")
      , ("getCampaigns200ResponseCampaignMsgUnderscoretemplates", "msg_templates")
      , ("getCampaigns200ResponseCampaignEventUnderscorename", "event_name")
      , ("getCampaigns200ResponseCampaignFrequency", "frequency")
      , ("getCampaigns200ResponseCampaignDateUnderscoreattribute", "date_attribute")
      , ("getCampaigns200ResponseCampaignTimezone", "timezone")
      , ("getCampaigns200ResponseCampaignUseUnderscorecustomerUnderscoretimezone", "use_customer_timezone")
      , ("getCampaigns200ResponseCampaignStartUnderscorehour", "start_hour")
      , ("getCampaigns200ResponseCampaignStartUnderscoreminutes", "start_minutes")
      , ("getCampaigns200ResponseCampaignObjectUnderscoretypeUnderscoreid", "object_type_id")
      , ("getCampaigns200ResponseCampaignFilterUnderscoreobjectUnderscoreattributes", "filter_object_attributes")
      , ("getCampaigns200ResponseCampaignFilterUnderscorerelationshipUnderscoreattributes", "filter_relationship_attributes")
      , ("getCampaigns200ResponseCampaignAudience", "audience")
      , ("getCampaigns200ResponseCampaignRelationshipUnderscoreattributeUnderscoretriggers", "relationship_attribute_triggers")
      , ("getCampaigns200ResponseCampaignObjectUnderscoreattributeUnderscoretriggers", "object_attribute_triggers")
      , ("getCampaigns200ResponseCampaignWebhookUnderscoreid", "webhook_id")
      ]


-- | 
data GetCioAllowlist200Response = GetCioAllowlist200Response
  { getCioAllowlist200ResponseIpUnderscoreaddresses :: Maybe [Text] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetCioAllowlist200Response where
  parseJSON = genericParseJSON optionsGetCioAllowlist200Response
instance ToJSON GetCioAllowlist200Response where
  toJSON = genericToJSON optionsGetCioAllowlist200Response

optionsGetCioAllowlist200Response :: Options
optionsGetCioAllowlist200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getCioAllowlist200ResponseIpUnderscoreaddresses", "ip_addresses")
      ]


-- | 
data GetCollections200Response = GetCollections200Response
  { getCollections200ResponseCollections :: Maybe [GetCollections200ResponseCollectionsInner] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetCollections200Response where
  parseJSON = genericParseJSON optionsGetCollections200Response
instance ToJSON GetCollections200Response where
  toJSON = genericToJSON optionsGetCollections200Response

optionsGetCollections200Response :: Options
optionsGetCollections200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getCollections200ResponseCollections", "collections")
      ]


-- | 
data GetCollections200ResponseCollectionsInner = GetCollections200ResponseCollectionsInner
  { getCollections200ResponseCollectionsInnerBytes :: Maybe Int -- ^ The size of the collection in bytes.
  , getCollections200ResponseCollectionsInnerCreatedUnderscoreat :: Maybe Int -- ^ The date time when the referenced ID was created.
  , getCollections200ResponseCollectionsInnerUpdatedUnderscoreat :: Maybe Int -- ^ The date time when the referenced ID was last updated.
  , getCollections200ResponseCollectionsInnerId :: Maybe Int -- ^ The identifier for the collection. This is how you'll reference the collection from the API.
  , getCollections200ResponseCollectionsInnerName :: Maybe Text -- ^ The name of the collection. This is how you'll reference the collection in liquid, e.g. `{{collection_name.data_property}}`.
  , getCollections200ResponseCollectionsInnerRows :: Maybe Int -- ^ Represents the number of objects in the `data` array or CSV rows in your collection schema.
  , getCollections200ResponseCollectionsInnerSchema :: Maybe [Text] -- ^ Lists the top-level keys that you can reference within this collection. Customer.io does not enforce any of these keys as required from your `data`.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetCollections200ResponseCollectionsInner where
  parseJSON = genericParseJSON optionsGetCollections200ResponseCollectionsInner
instance ToJSON GetCollections200ResponseCollectionsInner where
  toJSON = genericToJSON optionsGetCollections200ResponseCollectionsInner

optionsGetCollections200ResponseCollectionsInner :: Options
optionsGetCollections200ResponseCollectionsInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getCollections200ResponseCollectionsInnerBytes", "bytes")
      , ("getCollections200ResponseCollectionsInnerCreatedUnderscoreat", "created_at")
      , ("getCollections200ResponseCollectionsInnerUpdatedUnderscoreat", "updated_at")
      , ("getCollections200ResponseCollectionsInnerId", "id")
      , ("getCollections200ResponseCollectionsInnerName", "name")
      , ("getCollections200ResponseCollectionsInnerRows", "rows")
      , ("getCollections200ResponseCollectionsInnerSchema", "schema")
      ]


-- | Describes an individual message delivery. The object contains keys for all possible parents of the message (&#x60;newsletter_id&#x60;, &#x60;broadcast_id&#x60;, etc) but only the parents of the delivery are populated. Other parent IDs are null.
data GetMessage200Response = GetMessage200Response
  { getMessage200ResponseMessage :: Maybe BroadcastMessages200ResponseMessagesInner -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetMessage200Response where
  parseJSON = genericParseJSON optionsGetMessage200Response
instance ToJSON GetMessage200Response where
  toJSON = genericToJSON optionsGetMessage200Response

optionsGetMessage200Response :: Options
optionsGetMessage200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getMessage200ResponseMessage", "message")
      ]


-- | 
data GetNewsletterMsgMeta200Response = GetNewsletterMsgMeta200Response
  { getNewsletterMsgMeta200ResponseMessages :: Maybe [BroadcastMessages200ResponseMessagesInner] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetNewsletterMsgMeta200Response where
  parseJSON = genericParseJSON optionsGetNewsletterMsgMeta200Response
instance ToJSON GetNewsletterMsgMeta200Response where
  toJSON = genericToJSON optionsGetNewsletterMsgMeta200Response

optionsGetNewsletterMsgMeta200Response :: Options
optionsGetNewsletterMsgMeta200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getNewsletterMsgMeta200ResponseMessages", "messages")
      ]


-- | 
data GetNewsletterTestGroups200Response = GetNewsletterTestGroups200Response
  { getNewsletterTestGroups200ResponseTestUnderscoregroups :: Maybe [GetNewsletterTestGroups200ResponseTestGroupsInner] -- ^ Each object represents one of the test groups.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetNewsletterTestGroups200Response where
  parseJSON = genericParseJSON optionsGetNewsletterTestGroups200Response
instance ToJSON GetNewsletterTestGroups200Response where
  toJSON = genericToJSON optionsGetNewsletterTestGroups200Response

optionsGetNewsletterTestGroups200Response :: Options
optionsGetNewsletterTestGroups200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getNewsletterTestGroups200ResponseTestUnderscoregroups", "test_groups")
      ]


-- | 
data GetNewsletterTestGroups200ResponseTestGroupsInner = GetNewsletterTestGroups200ResponseTestGroupsInner
  { getNewsletterTestGroups200ResponseTestGroupsInnerId :: Maybe Int -- ^ The ID of the A/B test group.
  , getNewsletterTestGroups200ResponseTestGroupsInnerName :: Maybe Text -- ^ The name of the A/B test group.
  , getNewsletterTestGroups200ResponseTestGroupsInnerLabel :: Maybe Text -- ^ The name of the variant.
  , getNewsletterTestGroups200ResponseTestGroupsInnerWinner :: Maybe Bool -- ^ Whether this variant is the winner of the test.
  , getNewsletterTestGroups200ResponseTestGroupsInnerContentUnderscoreids :: Maybe [Text] -- ^ A list of content_ids for each variant in the test group.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetNewsletterTestGroups200ResponseTestGroupsInner where
  parseJSON = genericParseJSON optionsGetNewsletterTestGroups200ResponseTestGroupsInner
instance ToJSON GetNewsletterTestGroups200ResponseTestGroupsInner where
  toJSON = genericToJSON optionsGetNewsletterTestGroups200ResponseTestGroupsInner

optionsGetNewsletterTestGroups200ResponseTestGroupsInner :: Options
optionsGetNewsletterTestGroups200ResponseTestGroupsInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getNewsletterTestGroups200ResponseTestGroupsInnerId", "id")
      , ("getNewsletterTestGroups200ResponseTestGroupsInnerName", "name")
      , ("getNewsletterTestGroups200ResponseTestGroupsInnerLabel", "label")
      , ("getNewsletterTestGroups200ResponseTestGroupsInnerWinner", "winner")
      , ("getNewsletterTestGroups200ResponseTestGroupsInnerContentUnderscoreids", "content_ids")
      ]


-- | 
data GetNewsletterVariant200Response = GetNewsletterVariant200Response
  { getNewsletterVariant200ResponseContent :: Maybe ListNewsletterVariants200ResponseContentsInner -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetNewsletterVariant200Response where
  parseJSON = genericParseJSON optionsGetNewsletterVariant200Response
instance ToJSON GetNewsletterVariant200Response where
  toJSON = genericToJSON optionsGetNewsletterVariant200Response

optionsGetNewsletterVariant200Response :: Options
optionsGetNewsletterVariant200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getNewsletterVariant200ResponseContent", "content")
      ]


-- | 
data GetNewsletters200Response = GetNewsletters200Response
  { getNewsletters200ResponseNewsletter :: Maybe ListNewsletters200ResponseNewslettersInner -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetNewsletters200Response where
  parseJSON = genericParseJSON optionsGetNewsletters200Response
instance ToJSON GetNewsletters200Response where
  toJSON = genericToJSON optionsGetNewsletters200Response

optionsGetNewsletters200Response :: Options
optionsGetNewsletters200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getNewsletters200ResponseNewsletter", "newsletter")
      ]


-- | 
data GetObjectAttributes200Response = GetObjectAttributes200Response
  { getObjectAttributes200ResponseObject :: Maybe GetObjectAttributes200ResponseObject -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetObjectAttributes200Response where
  parseJSON = genericParseJSON optionsGetObjectAttributes200Response
instance ToJSON GetObjectAttributes200Response where
  toJSON = genericToJSON optionsGetObjectAttributes200Response

optionsGetObjectAttributes200Response :: Options
optionsGetObjectAttributes200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getObjectAttributes200ResponseObject", "object")
      ]


-- | The object specified in the endpoint path
data GetObjectAttributes200ResponseObject = GetObjectAttributes200ResponseObject
  { getObjectAttributes200ResponseObjectAttributes :: Maybe (Map.Map String Value) -- ^ Attributes assigned to this object.
  , getObjectAttributes200ResponseObjectTimestamps :: Maybe (Map.Map String Int) -- ^ The epoch timestamps when corresponding attributes were set on the object.
  , getObjectAttributes200ResponseObjectIdentifiers :: Maybe GetObjectAttributes200ResponseObjectIdentifiers -- ^ 
  , getObjectAttributes200ResponseObjectObjectUnderscoretypeUnderscoreid :: Maybe Text -- ^ The object type an object belongs to—like \"Companies\" or \"Accounts\". Object type IDs are string-formatted integers that begin at `1` and increment for each new type.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetObjectAttributes200ResponseObject where
  parseJSON = genericParseJSON optionsGetObjectAttributes200ResponseObject
instance ToJSON GetObjectAttributes200ResponseObject where
  toJSON = genericToJSON optionsGetObjectAttributes200ResponseObject

optionsGetObjectAttributes200ResponseObject :: Options
optionsGetObjectAttributes200ResponseObject =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getObjectAttributes200ResponseObjectAttributes", "attributes")
      , ("getObjectAttributes200ResponseObjectTimestamps", "timestamps")
      , ("getObjectAttributes200ResponseObjectIdentifiers", "identifiers")
      , ("getObjectAttributes200ResponseObjectObjectUnderscoretypeUnderscoreid", "object_type_id")
      ]


-- | Identifies an object.
data GetObjectAttributes200ResponseObjectIdentifiers = GetObjectAttributes200ResponseObjectIdentifiers
  { getObjectAttributes200ResponseObjectIdentifiersCioUnderscoreobjectUnderscoreid :: Maybe Text -- ^ A unique identifier set by Customer.io, used to reference a person if you want to update their identifiers.
  , getObjectAttributes200ResponseObjectIdentifiersId :: Maybe Text -- ^ The ID of a customer profile, analogous to a \"person\" in the UI. If your workspace supports multiple identifiers (email and ID), this value can be null.
  , getObjectAttributes200ResponseObjectIdentifiersEmail :: Maybe Text -- ^ The email address of the customer.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetObjectAttributes200ResponseObjectIdentifiers where
  parseJSON = genericParseJSON optionsGetObjectAttributes200ResponseObjectIdentifiers
instance ToJSON GetObjectAttributes200ResponseObjectIdentifiers where
  toJSON = genericToJSON optionsGetObjectAttributes200ResponseObjectIdentifiers

optionsGetObjectAttributes200ResponseObjectIdentifiers :: Options
optionsGetObjectAttributes200ResponseObjectIdentifiers =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getObjectAttributes200ResponseObjectIdentifiersCioUnderscoreobjectUnderscoreid", "cio_object_id")
      , ("getObjectAttributes200ResponseObjectIdentifiersId", "id")
      , ("getObjectAttributes200ResponseObjectIdentifiersEmail", "email")
      ]


-- | 
data GetObjectRelationships200Response = GetObjectRelationships200Response
  { getObjectRelationships200ResponseCioUnderscorerelationships :: Maybe [Value] -- ^ A list of people related to the object specified in the endpoint path.
  , getObjectRelationships200ResponseNext :: Maybe Text -- ^ Indicates the next page of results. Add `?start=<next_value>` to the request to get the next page of results.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetObjectRelationships200Response where
  parseJSON = genericParseJSON optionsGetObjectRelationships200Response
instance ToJSON GetObjectRelationships200Response where
  toJSON = genericToJSON optionsGetObjectRelationships200Response

optionsGetObjectRelationships200Response :: Options
optionsGetObjectRelationships200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getObjectRelationships200ResponseCioUnderscorerelationships", "cio_relationships")
      , ("getObjectRelationships200ResponseNext", "next")
      ]


-- | 
data GetObjectTypes200Response = GetObjectTypes200Response
  { getObjectTypes200ResponseTypes :: Maybe [GetObjectTypes200ResponseTypesInner] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetObjectTypes200Response where
  parseJSON = genericParseJSON optionsGetObjectTypes200Response
instance ToJSON GetObjectTypes200Response where
  toJSON = genericToJSON optionsGetObjectTypes200Response

optionsGetObjectTypes200Response :: Options
optionsGetObjectTypes200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getObjectTypes200ResponseTypes", "types")
      ]


-- | 
data GetObjectTypes200ResponseTypesInner = GetObjectTypes200ResponseTypesInner
  { getObjectTypes200ResponseTypesInnerId :: Maybe Text -- ^ The `object_type_id` that you'll use with the Journeys Track API to create or modify objects. Object type IDs are integers passed as strings.
  , getObjectTypes200ResponseTypesInnerName :: Maybe Text -- ^ The name of the object type.
  , getObjectTypes200ResponseTypesInnerSingularUnderscorename :: Maybe Text -- ^ The singular name of the object type.
  , getObjectTypes200ResponseTypesInnerSlug :: Maybe Text -- ^ The slug of the page in the Customer.io UI for the object type.
  , getObjectTypes200ResponseTypesInnerSingularUnderscoreslug :: Maybe Text -- ^ The singular slug of the page in the Customer.io UI for the object type.
  , getObjectTypes200ResponseTypesInnerEnabled :: Maybe Bool -- ^ If true, the object type is enabled.
  , getObjectTypes200ResponseTypesInnerIcon :: Maybe Text -- ^ The name of the icon or emoji that represents the object type in the Customer.io UI. Most commonly, you'll see this in the left-side navigation panel in Journeys.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetObjectTypes200ResponseTypesInner where
  parseJSON = genericParseJSON optionsGetObjectTypes200ResponseTypesInner
instance ToJSON GetObjectTypes200ResponseTypesInner where
  toJSON = genericToJSON optionsGetObjectTypes200ResponseTypesInner

optionsGetObjectTypes200ResponseTypesInner :: Options
optionsGetObjectTypes200ResponseTypesInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getObjectTypes200ResponseTypesInnerId", "id")
      , ("getObjectTypes200ResponseTypesInnerName", "name")
      , ("getObjectTypes200ResponseTypesInnerSingularUnderscorename", "singular_name")
      , ("getObjectTypes200ResponseTypesInnerSlug", "slug")
      , ("getObjectTypes200ResponseTypesInnerSingularUnderscoreslug", "singular_slug")
      , ("getObjectTypes200ResponseTypesInnerEnabled", "enabled")
      , ("getObjectTypes200ResponseTypesInnerIcon", "icon")
      ]


-- | 
data GetObjectsFilter200Response = GetObjectsFilter200Response
  { getObjectsFilter200ResponseIdentifiers :: Maybe [GetObjectsFilter200ResponseIdentifiersInner] -- ^ 
  , getObjectsFilter200ResponseIds :: Maybe [Text] -- ^ A list of object IDs matching the object_type_id and filter in the request. Items are the same as the `object_id` values under `identifiers`, but this array may be easier to search/sort through if you have a large number of objects and don't need to to use the `cio_object_id`.
  , getObjectsFilter200ResponseNext :: Maybe Text -- ^ Indicates the next page of results. Add `?start=<next_value>` to the request to get the next page of results.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetObjectsFilter200Response where
  parseJSON = genericParseJSON optionsGetObjectsFilter200Response
instance ToJSON GetObjectsFilter200Response where
  toJSON = genericToJSON optionsGetObjectsFilter200Response

optionsGetObjectsFilter200Response :: Options
optionsGetObjectsFilter200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getObjectsFilter200ResponseIdentifiers", "identifiers")
      , ("getObjectsFilter200ResponseIds", "ids")
      , ("getObjectsFilter200ResponseNext", "next")
      ]


-- | 
data GetObjectsFilter200ResponseIdentifiersInner = GetObjectsFilter200ResponseIdentifiersInner
  { getObjectsFilter200ResponseIdentifiersInnerCioUnderscoreobjectUnderscoreid :: Maybe Text -- ^ The canonical, immutable identifier for the object, assigned by Customer.io.
  , getObjectsFilter200ResponseIdentifiersInnerObjectUnderscoreid :: Maybe Text -- ^ The ID of the object, assigned by you or your systems.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetObjectsFilter200ResponseIdentifiersInner where
  parseJSON = genericParseJSON optionsGetObjectsFilter200ResponseIdentifiersInner
instance ToJSON GetObjectsFilter200ResponseIdentifiersInner where
  toJSON = genericToJSON optionsGetObjectsFilter200ResponseIdentifiersInner

optionsGetObjectsFilter200ResponseIdentifiersInner :: Options
optionsGetObjectsFilter200ResponseIdentifiersInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getObjectsFilter200ResponseIdentifiersInnerCioUnderscoreobjectUnderscoreid", "cio_object_id")
      , ("getObjectsFilter200ResponseIdentifiersInnerObjectUnderscoreid", "object_id")
      ]


-- | 
data GetObjectsFilterRequest = GetObjectsFilterRequest
  { getObjectsFilterRequestObjectUnderscoretypeUnderscoreid :: Text -- ^ The type of object you want to search in. Object type IDs are integers passed as strings.
  , getObjectsFilterRequestFilter :: ObjectFilter -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetObjectsFilterRequest where
  parseJSON = genericParseJSON optionsGetObjectsFilterRequest
instance ToJSON GetObjectsFilterRequest where
  toJSON = genericToJSON optionsGetObjectsFilterRequest

optionsGetObjectsFilterRequest :: Options
optionsGetObjectsFilterRequest =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getObjectsFilterRequestObjectUnderscoretypeUnderscoreid", "object_type_id")
      , ("getObjectsFilterRequestFilter", "filter")
      ]


-- | 
data GetPeopleById200Response = GetPeopleById200Response
  { getPeopleById200ResponseCustomers :: Maybe [GetPersonAttributes200Response] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetPeopleById200Response where
  parseJSON = genericParseJSON optionsGetPeopleById200Response
instance ToJSON GetPeopleById200Response where
  toJSON = genericToJSON optionsGetPeopleById200Response

optionsGetPeopleById200Response :: Options
optionsGetPeopleById200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getPeopleById200ResponseCustomers", "customers")
      ]


-- | 
data GetPeopleByIdRequest = GetPeopleByIdRequest
  { getPeopleByIdRequestIds :: [Text] -- ^ An array of up to 100 customer IDs.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetPeopleByIdRequest where
  parseJSON = genericParseJSON optionsGetPeopleByIdRequest
instance ToJSON GetPeopleByIdRequest where
  toJSON = genericToJSON optionsGetPeopleByIdRequest

optionsGetPeopleByIdRequest :: Options
optionsGetPeopleByIdRequest =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getPeopleByIdRequestIds", "ids")
      ]


-- | 
data GetPeopleEmail200Response = GetPeopleEmail200Response
  { getPeopleEmail200ResponseResults :: Maybe [GetPeopleEmail200ResponseResultsInner] -- ^ A list of customers matching the email address in your query.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetPeopleEmail200Response where
  parseJSON = genericParseJSON optionsGetPeopleEmail200Response
instance ToJSON GetPeopleEmail200Response where
  toJSON = genericToJSON optionsGetPeopleEmail200Response

optionsGetPeopleEmail200Response :: Options
optionsGetPeopleEmail200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getPeopleEmail200ResponseResults", "results")
      ]


-- | 
data GetPeopleEmail200ResponseResultsInner = GetPeopleEmail200ResponseResultsInner
  { getPeopleEmail200ResponseResultsInnerEmail :: Text -- ^ A person's email address, if set.
  , getPeopleEmail200ResponseResultsInnerId :: Text -- ^ A person's unique ID, if set.
  , getPeopleEmail200ResponseResultsInnerCioUnderscoreid :: Text -- ^ A unique identifier set by Customer.io, used to reference a person if you want to update their identifiers.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetPeopleEmail200ResponseResultsInner where
  parseJSON = genericParseJSON optionsGetPeopleEmail200ResponseResultsInner
instance ToJSON GetPeopleEmail200ResponseResultsInner where
  toJSON = genericToJSON optionsGetPeopleEmail200ResponseResultsInner

optionsGetPeopleEmail200ResponseResultsInner :: Options
optionsGetPeopleEmail200ResponseResultsInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getPeopleEmail200ResponseResultsInnerEmail", "email")
      , ("getPeopleEmail200ResponseResultsInnerId", "id")
      , ("getPeopleEmail200ResponseResultsInnerCioUnderscoreid", "cio_id")
      ]


-- | 
data GetPeopleFilter200Response = GetPeopleFilter200Response
  { getPeopleFilter200ResponseIdentifiers :: Maybe [GetPeopleEmail200ResponseResultsInner] -- ^ An array of objects, where each object represents a customer. Each object contains identifiers for a customer.
  , getPeopleFilter200ResponseIds :: Maybe [Text] -- ^ In general, you should use the `identifiers` array. This array contains identifiers for people captured in your filter. However, as of June 2021, some workspaces let you add people without an `id`. Entries without an `id` are empty strings in this array, where the `identifiers` array contains more complete information for each person captured in the filter. 
  , getPeopleFilter200ResponseNext :: Maybe Text -- ^ The `start` value for the next page of results.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetPeopleFilter200Response where
  parseJSON = genericParseJSON optionsGetPeopleFilter200Response
instance ToJSON GetPeopleFilter200Response where
  toJSON = genericToJSON optionsGetPeopleFilter200Response

optionsGetPeopleFilter200Response :: Options
optionsGetPeopleFilter200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getPeopleFilter200ResponseIdentifiers", "identifiers")
      , ("getPeopleFilter200ResponseIds", "ids")
      , ("getPeopleFilter200ResponseNext", "next")
      ]


-- | 
data GetPeopleFilterRequest = GetPeopleFilterRequest
  { getPeopleFilterRequestFilter :: AudienceFilter1 -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetPeopleFilterRequest where
  parseJSON = genericParseJSON optionsGetPeopleFilterRequest
instance ToJSON GetPeopleFilterRequest where
  toJSON = genericToJSON optionsGetPeopleFilterRequest

optionsGetPeopleFilterRequest :: Options
optionsGetPeopleFilterRequest =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getPeopleFilterRequestFilter", "filter")
      ]


-- | 
data GetPersonActivities200Response = GetPersonActivities200Response
  { getPersonActivities200ResponseActivities :: Maybe [ListActivities200ResponseActivitiesInner] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetPersonActivities200Response where
  parseJSON = genericParseJSON optionsGetPersonActivities200Response
instance ToJSON GetPersonActivities200Response where
  toJSON = genericToJSON optionsGetPersonActivities200Response

optionsGetPersonActivities200Response :: Options
optionsGetPersonActivities200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getPersonActivities200ResponseActivities", "activities")
      ]


-- | 
data GetPersonAttributes200Response = GetPersonAttributes200Response
  { getPersonAttributes200ResponseCustomer :: Maybe GetPersonAttributes200ResponseCustomer -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetPersonAttributes200Response where
  parseJSON = genericParseJSON optionsGetPersonAttributes200Response
instance ToJSON GetPersonAttributes200Response where
  toJSON = genericToJSON optionsGetPersonAttributes200Response

optionsGetPersonAttributes200Response :: Options
optionsGetPersonAttributes200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getPersonAttributes200ResponseCustomer", "customer")
      ]


-- | The profile you referenced by ID in the request.
data GetPersonAttributes200ResponseCustomer = GetPersonAttributes200ResponseCustomer
  { getPersonAttributes200ResponseCustomerId :: Maybe Text -- ^ The customer ID referenced in the request.
  , getPersonAttributes200ResponseCustomerIdentifiers :: Maybe ListActivities200ResponseActivitiesInnerCustomerIdentifiers -- ^ 
  , getPersonAttributes200ResponseCustomerAttributes :: Maybe GetPersonAttributes200ResponseCustomerAttributes -- ^ 
  , getPersonAttributes200ResponseCustomerTimestamps :: Maybe GetPersonAttributes200ResponseCustomerTimestamps -- ^ 
  , getPersonAttributes200ResponseCustomerUnsubscribed :: Maybe Bool -- ^ If true, the person is unsubscribed from messages.
  , getPersonAttributes200ResponseCustomerDevices :: Maybe [GetPersonAttributes200ResponseCustomerDevicesInner] -- ^ Lists the devices associated with the customer profile.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetPersonAttributes200ResponseCustomer where
  parseJSON = genericParseJSON optionsGetPersonAttributes200ResponseCustomer
instance ToJSON GetPersonAttributes200ResponseCustomer where
  toJSON = genericToJSON optionsGetPersonAttributes200ResponseCustomer

optionsGetPersonAttributes200ResponseCustomer :: Options
optionsGetPersonAttributes200ResponseCustomer =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getPersonAttributes200ResponseCustomerId", "id")
      , ("getPersonAttributes200ResponseCustomerIdentifiers", "identifiers")
      , ("getPersonAttributes200ResponseCustomerAttributes", "attributes")
      , ("getPersonAttributes200ResponseCustomerTimestamps", "timestamps")
      , ("getPersonAttributes200ResponseCustomerUnsubscribed", "unsubscribed")
      , ("getPersonAttributes200ResponseCustomerDevices", "devices")
      ]


-- | Contains attributes assigned to this profile, including your workspace&#39;s people-identifiers (by default, these are &#x60;id&#x60;, &#x60;email&#x60;, and &#x60;cio_id&#x60;). Attributes are all stored as strings.
newtype GetPersonAttributes200ResponseCustomerAttributes = GetPersonAttributes200ResponseCustomerAttributes { unGetPersonAttributes200ResponseCustomerAttributes :: (Map.Map Text Text) }
  deriving (Show, Eq, FromJSON, ToJSON, Generic, Data)

-- | The properties representing an individual device. [Our SDK&#39;s](/sdk/) gather all the properties defined below automatically, unless you disable the &#x60;autoTrackDeviceAttributes&#x60; setting. You can reference the properties outside the &#x60;attributes&#x60; object in segments or in Liquid.
data GetPersonAttributes200ResponseCustomerDevicesInner = GetPersonAttributes200ResponseCustomerDevicesInner
  { getPersonAttributes200ResponseCustomerDevicesInnerId :: Text -- ^ The device token.
  , getPersonAttributes200ResponseCustomerDevicesInnerLastUnderscoreused :: Maybe Int -- ^ The `timestamp` when you last identified this device. If you don't pass a timestamp when you add or update a device, we use the time of the request itself. Our SDKs identify a device when a person launches their app.
  , getPersonAttributes200ResponseCustomerDevicesInnerPlatform :: Text -- ^ The device/messaging platform.
  , getPersonAttributes200ResponseCustomerDevicesInnerAttributes :: Maybe SendPushRequestAllOfCustomDeviceAllOfAttributes -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetPersonAttributes200ResponseCustomerDevicesInner where
  parseJSON = genericParseJSON optionsGetPersonAttributes200ResponseCustomerDevicesInner
instance ToJSON GetPersonAttributes200ResponseCustomerDevicesInner where
  toJSON = genericToJSON optionsGetPersonAttributes200ResponseCustomerDevicesInner

optionsGetPersonAttributes200ResponseCustomerDevicesInner :: Options
optionsGetPersonAttributes200ResponseCustomerDevicesInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getPersonAttributes200ResponseCustomerDevicesInnerId", "id")
      , ("getPersonAttributes200ResponseCustomerDevicesInnerLastUnderscoreused", "last_used")
      , ("getPersonAttributes200ResponseCustomerDevicesInnerPlatform", "platform")
      , ("getPersonAttributes200ResponseCustomerDevicesInnerAttributes", "attributes")
      ]


-- | The epoch timestamps when corresponding attributes were set on the customer profile.
data GetPersonAttributes200ResponseCustomerTimestamps = GetPersonAttributes200ResponseCustomerTimestamps
  { getPersonAttributes200ResponseCustomerTimestampsCioUnderscoreid :: Maybe Int -- ^ The date-time when `cio_id` was assigned.
  , getPersonAttributes200ResponseCustomerTimestampsUnderscorelastUnderscoreemailed :: Maybe Int -- ^ The date-time when you last emailed a person.
  , getPersonAttributes200ResponseCustomerTimestampsEmail :: Maybe Int -- ^ The date-time when the person's email address was added.
  , getPersonAttributes200ResponseCustomerTimestampsId :: Maybe Int -- ^ The date-time when the person's ID was generated.
  , getPersonAttributes200ResponseCustomerTimestampsUnsubscribed :: Maybe Int -- ^ The date-time when the person unsubscribed.
  , getPersonAttributes200ResponseCustomerTimestampsUnderscorecioUnderscoresubscriptionUnderscorepreferencesUnderscorecomputed :: Maybe Int -- ^ Because this value is computed and not actually set on a person, this value is always 0
  , getPersonAttributes200ResponseCustomerTimestampsCioUnderscoresubscriptionUnderscorepreferences :: Maybe Int -- ^ The datetime when a person's subscription preferences were last updated.
  , getPersonAttributes200ResponseCustomerTimestampsAdditionalProperties :: Maybe Value -- ^ Timestamps when attributes assigned to the person were set.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetPersonAttributes200ResponseCustomerTimestamps where
  parseJSON = genericParseJSON optionsGetPersonAttributes200ResponseCustomerTimestamps
instance ToJSON GetPersonAttributes200ResponseCustomerTimestamps where
  toJSON = genericToJSON optionsGetPersonAttributes200ResponseCustomerTimestamps

optionsGetPersonAttributes200ResponseCustomerTimestamps :: Options
optionsGetPersonAttributes200ResponseCustomerTimestamps =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getPersonAttributes200ResponseCustomerTimestampsCioUnderscoreid", "cio_id")
      , ("getPersonAttributes200ResponseCustomerTimestampsUnderscorelastUnderscoreemailed", "_last_emailed")
      , ("getPersonAttributes200ResponseCustomerTimestampsEmail", "email")
      , ("getPersonAttributes200ResponseCustomerTimestampsId", "id")
      , ("getPersonAttributes200ResponseCustomerTimestampsUnsubscribed", "unsubscribed")
      , ("getPersonAttributes200ResponseCustomerTimestampsUnderscorecioUnderscoresubscriptionUnderscorepreferencesUnderscorecomputed", "_cio_subscription_preferences_computed")
      , ("getPersonAttributes200ResponseCustomerTimestampsCioUnderscoresubscriptionUnderscorepreferences", "cio_subscription_preferences")
      , ("getPersonAttributes200ResponseCustomerTimestampsAdditionalProperties", "additionalProperties")
      ]


-- | 
data GetPersonMessages200Response = GetPersonMessages200Response
  { getPersonMessages200ResponseMessages :: Maybe [GetPersonMessages200ResponseMessagesInner] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetPersonMessages200Response where
  parseJSON = genericParseJSON optionsGetPersonMessages200Response
instance ToJSON GetPersonMessages200Response where
  toJSON = genericToJSON optionsGetPersonMessages200Response

optionsGetPersonMessages200Response :: Options
optionsGetPersonMessages200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getPersonMessages200ResponseMessages", "messages")
      ]


-- | 
data GetPersonMessages200ResponseMessagesInner = GetPersonMessages200ResponseMessagesInner
  { getPersonMessages200ResponseMessagesInnerId :: Maybe Text -- ^ The message identifier.
  , getPersonMessages200ResponseMessagesInnerDeduplicateUnderscoreid :: Maybe Text -- ^ A group identifier to deduplicate messages (useful if a customer may have received multiple messages of the same type).
  , getPersonMessages200ResponseMessagesInnerMsgUnderscoretemplateUnderscoreid :: Maybe Text -- ^ The message template the message was created from.
  , getPersonMessages200ResponseMessagesInnerCustomerUnderscoreid :: Maybe Text -- ^ The customer the message was sent to.
  , getPersonMessages200ResponseMessagesInnerCampaignUnderscoreid :: Maybe Int -- ^ The campaign the message belongs to.
  , getPersonMessages200ResponseMessagesInnerActionUnderscoreid :: Maybe Int -- ^ The identifier for the message action within the campaign or broadcast the message belonged to.
  , getPersonMessages200ResponseMessagesInnerRecipient :: Maybe Text -- ^ The address of the recipient. May be an email address, MSISDN, or a device UUID.
  , getPersonMessages200ResponseMessagesInnerSubject :: Maybe Text -- ^ The subject line of the message.
  , getPersonMessages200ResponseMessagesInnerMetrics :: Maybe GetPersonMessages200ResponseMessagesInnerMetrics -- ^ 
  , getPersonMessages200ResponseMessagesInnerCreated :: Maybe Int -- ^ The date and time when the message was created.
  , getPersonMessages200ResponseMessagesInnerFailureUnderscoremessage :: Maybe Text -- ^ An error, if the message did not make it to the customer.
  , getPersonMessages200ResponseMessagesInnerNewsletterUnderscoreid :: Maybe Int -- ^ The newsletter that the message was sent as a part of, if applicable.
  , getPersonMessages200ResponseMessagesInnerContentUnderscoreid :: Maybe Int -- ^ The newsletter variant for the message, if applicable.
  , getPersonMessages200ResponseMessagesInnerBroadcastUnderscoreid :: Maybe Int -- ^ The broadcast the message was sent as a part of, if applicable.
  , getPersonMessages200ResponseMessagesInnerType :: Maybe Text -- ^ The type of message.
  , getPersonMessages200ResponseMessagesInnerForgotten :: Maybe Bool -- ^ If true, the message content was forgotten.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetPersonMessages200ResponseMessagesInner where
  parseJSON = genericParseJSON optionsGetPersonMessages200ResponseMessagesInner
instance ToJSON GetPersonMessages200ResponseMessagesInner where
  toJSON = genericToJSON optionsGetPersonMessages200ResponseMessagesInner

optionsGetPersonMessages200ResponseMessagesInner :: Options
optionsGetPersonMessages200ResponseMessagesInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getPersonMessages200ResponseMessagesInnerId", "id")
      , ("getPersonMessages200ResponseMessagesInnerDeduplicateUnderscoreid", "deduplicate_id")
      , ("getPersonMessages200ResponseMessagesInnerMsgUnderscoretemplateUnderscoreid", "msg_template_id")
      , ("getPersonMessages200ResponseMessagesInnerCustomerUnderscoreid", "customer_id")
      , ("getPersonMessages200ResponseMessagesInnerCampaignUnderscoreid", "campaign_id")
      , ("getPersonMessages200ResponseMessagesInnerActionUnderscoreid", "action_id")
      , ("getPersonMessages200ResponseMessagesInnerRecipient", "recipient")
      , ("getPersonMessages200ResponseMessagesInnerSubject", "subject")
      , ("getPersonMessages200ResponseMessagesInnerMetrics", "metrics")
      , ("getPersonMessages200ResponseMessagesInnerCreated", "created")
      , ("getPersonMessages200ResponseMessagesInnerFailureUnderscoremessage", "failure_message")
      , ("getPersonMessages200ResponseMessagesInnerNewsletterUnderscoreid", "newsletter_id")
      , ("getPersonMessages200ResponseMessagesInnerContentUnderscoreid", "content_id")
      , ("getPersonMessages200ResponseMessagesInnerBroadcastUnderscoreid", "broadcast_id")
      , ("getPersonMessages200ResponseMessagesInnerType", "type")
      , ("getPersonMessages200ResponseMessagesInnerForgotten", "forgotten")
      ]


-- | Contains information about the send and delivery time of the message.
data GetPersonMessages200ResponseMessagesInnerMetrics = GetPersonMessages200ResponseMessagesInnerMetrics
  { getPersonMessages200ResponseMessagesInnerMetricsDelivered :: Maybe Int -- ^ The date and time when the customer received the message.
  , getPersonMessages200ResponseMessagesInnerMetricsSent :: Maybe Int -- ^ The date and time when the message was sent.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetPersonMessages200ResponseMessagesInnerMetrics where
  parseJSON = genericParseJSON optionsGetPersonMessages200ResponseMessagesInnerMetrics
instance ToJSON GetPersonMessages200ResponseMessagesInnerMetrics where
  toJSON = genericToJSON optionsGetPersonMessages200ResponseMessagesInnerMetrics

optionsGetPersonMessages200ResponseMessagesInnerMetrics :: Options
optionsGetPersonMessages200ResponseMessagesInnerMetrics =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getPersonMessages200ResponseMessagesInnerMetricsDelivered", "delivered")
      , ("getPersonMessages200ResponseMessagesInnerMetricsSent", "sent")
      ]


-- | 
data GetPersonRelationships200Response = GetPersonRelationships200Response
  { getPersonRelationships200ResponseCioUnderscorerelationships :: Maybe [GetPersonRelationships200ResponseCioRelationshipsInner] -- ^ A list of \"objects\" that the customer is related to; each JSON object in the array represents an \"object\" in Customer.io.
  , getPersonRelationships200ResponseNext :: Maybe Text -- ^ Indicates the next page of results. Add `?start=<next_value>` to the request to get the next page of results.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetPersonRelationships200Response where
  parseJSON = genericParseJSON optionsGetPersonRelationships200Response
instance ToJSON GetPersonRelationships200Response where
  toJSON = genericToJSON optionsGetPersonRelationships200Response

optionsGetPersonRelationships200Response :: Options
optionsGetPersonRelationships200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getPersonRelationships200ResponseCioUnderscorerelationships", "cio_relationships")
      , ("getPersonRelationships200ResponseNext", "next")
      ]


-- | 
data GetPersonRelationships200ResponseCioRelationshipsInner = GetPersonRelationships200ResponseCioRelationshipsInner
  { getPersonRelationships200ResponseCioRelationshipsInnerObjectUnderscoretypeUnderscoreid :: Maybe Int -- ^ The type of object that the customer is related to.
  , getPersonRelationships200ResponseCioRelationshipsInnerIdentifiers :: Maybe GetPersonRelationships200ResponseCioRelationshipsInnerIdentifiers -- ^ 
  , getPersonRelationships200ResponseCioRelationshipsInnerAttributes :: Maybe (Map.Map String Value) -- ^ Attributes for the relationship between the person and the object.
  , getPersonRelationships200ResponseCioRelationshipsInnerTimestamps :: Maybe (Map.Map String Int) -- ^ Unix timestamps when the object's attributes were last updated.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetPersonRelationships200ResponseCioRelationshipsInner where
  parseJSON = genericParseJSON optionsGetPersonRelationships200ResponseCioRelationshipsInner
instance ToJSON GetPersonRelationships200ResponseCioRelationshipsInner where
  toJSON = genericToJSON optionsGetPersonRelationships200ResponseCioRelationshipsInner

optionsGetPersonRelationships200ResponseCioRelationshipsInner :: Options
optionsGetPersonRelationships200ResponseCioRelationshipsInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getPersonRelationships200ResponseCioRelationshipsInnerObjectUnderscoretypeUnderscoreid", "object_type_id")
      , ("getPersonRelationships200ResponseCioRelationshipsInnerIdentifiers", "identifiers")
      , ("getPersonRelationships200ResponseCioRelationshipsInnerAttributes", "attributes")
      , ("getPersonRelationships200ResponseCioRelationshipsInnerTimestamps", "timestamps")
      ]


-- | The &#x60;object_id&#x60; and &#x60;cio_object_id&#x60; that a person is related to.
data GetPersonRelationships200ResponseCioRelationshipsInnerIdentifiers = GetPersonRelationships200ResponseCioRelationshipsInnerIdentifiers
  { getPersonRelationships200ResponseCioRelationshipsInnerIdentifiersObjectUnderscoreid :: Maybe Text -- ^ The ID of the object that the customer is related to.
  , getPersonRelationships200ResponseCioRelationshipsInnerIdentifiersCioUnderscoreobjectUnderscoreid :: Maybe Text -- ^ The canonical, immutable identifier for the object that the customer is related to.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetPersonRelationships200ResponseCioRelationshipsInnerIdentifiers where
  parseJSON = genericParseJSON optionsGetPersonRelationships200ResponseCioRelationshipsInnerIdentifiers
instance ToJSON GetPersonRelationships200ResponseCioRelationshipsInnerIdentifiers where
  toJSON = genericToJSON optionsGetPersonRelationships200ResponseCioRelationshipsInnerIdentifiers

optionsGetPersonRelationships200ResponseCioRelationshipsInnerIdentifiers :: Options
optionsGetPersonRelationships200ResponseCioRelationshipsInnerIdentifiers =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getPersonRelationships200ResponseCioRelationshipsInnerIdentifiersObjectUnderscoreid", "object_id")
      , ("getPersonRelationships200ResponseCioRelationshipsInnerIdentifiersCioUnderscoreobjectUnderscoreid", "cio_object_id")
      ]


-- | 
data GetPersonSegments200Response = GetPersonSegments200Response
  { getPersonSegments200ResponseSegments :: Maybe [GetPersonSegments200ResponseSegmentsInner] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetPersonSegments200Response where
  parseJSON = genericParseJSON optionsGetPersonSegments200Response
instance ToJSON GetPersonSegments200Response where
  toJSON = genericToJSON optionsGetPersonSegments200Response

optionsGetPersonSegments200Response :: Options
optionsGetPersonSegments200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getPersonSegments200ResponseSegments", "segments")
      ]


-- | 
data GetPersonSegments200ResponseSegmentsInner = GetPersonSegments200ResponseSegmentsInner
  { getPersonSegments200ResponseSegmentsInnerId :: Maybe Int -- ^ The segment identifier.
  , getPersonSegments200ResponseSegmentsInnerName :: Maybe Text -- ^ The name of the segment.
  , getPersonSegments200ResponseSegmentsInnerDescription :: Maybe Text -- ^ The description of the segment, as entered in the UI.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetPersonSegments200ResponseSegmentsInner where
  parseJSON = genericParseJSON optionsGetPersonSegments200ResponseSegmentsInner
instance ToJSON GetPersonSegments200ResponseSegmentsInner where
  toJSON = genericToJSON optionsGetPersonSegments200ResponseSegmentsInner

optionsGetPersonSegments200ResponseSegmentsInner :: Options
optionsGetPersonSegments200ResponseSegmentsInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getPersonSegments200ResponseSegmentsInnerId", "id")
      , ("getPersonSegments200ResponseSegmentsInnerName", "name")
      , ("getPersonSegments200ResponseSegmentsInnerDescription", "description")
      ]


-- | 
data GetPersonSubscriptionPreferences200Response = GetPersonSubscriptionPreferences200Response
  { getPersonSubscriptionPreferences200ResponseCustomer :: Maybe GetPersonSubscriptionPreferences200ResponseCustomer -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetPersonSubscriptionPreferences200Response where
  parseJSON = genericParseJSON optionsGetPersonSubscriptionPreferences200Response
instance ToJSON GetPersonSubscriptionPreferences200Response where
  toJSON = genericToJSON optionsGetPersonSubscriptionPreferences200Response

optionsGetPersonSubscriptionPreferences200Response :: Options
optionsGetPersonSubscriptionPreferences200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getPersonSubscriptionPreferences200ResponseCustomer", "customer")
      ]


-- | The profile you referenced by ID in the request.
data GetPersonSubscriptionPreferences200ResponseCustomer = GetPersonSubscriptionPreferences200ResponseCustomer
  { getPersonSubscriptionPreferences200ResponseCustomerId :: Maybe Text -- ^ The ID of a customer profile, analogous to a \"person\" in the UI. If your workspace supports multiple identifiers (email and ID), this value can be null.
  , getPersonSubscriptionPreferences200ResponseCustomerIdentifiers :: Maybe ListActivities200ResponseActivitiesInnerCustomerIdentifiers -- ^ 
  , getPersonSubscriptionPreferences200ResponseCustomerTopics :: Maybe [GetPersonSubscriptionPreferences200ResponseCustomerTopicsInner] -- ^ A list of all subscription preferences for the customer.
  , getPersonSubscriptionPreferences200ResponseCustomerUnsubscribed :: Maybe Bool -- ^ If true, the customer is unsubscribed from all messaging. If false, the customer is subscribed according to their topic preferences.
  , getPersonSubscriptionPreferences200ResponseCustomerHeader :: Maybe GetPersonSubscriptionPreferences200ResponseCustomerHeader -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetPersonSubscriptionPreferences200ResponseCustomer where
  parseJSON = genericParseJSON optionsGetPersonSubscriptionPreferences200ResponseCustomer
instance ToJSON GetPersonSubscriptionPreferences200ResponseCustomer where
  toJSON = genericToJSON optionsGetPersonSubscriptionPreferences200ResponseCustomer

optionsGetPersonSubscriptionPreferences200ResponseCustomer :: Options
optionsGetPersonSubscriptionPreferences200ResponseCustomer =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getPersonSubscriptionPreferences200ResponseCustomerId", "id")
      , ("getPersonSubscriptionPreferences200ResponseCustomerIdentifiers", "identifiers")
      , ("getPersonSubscriptionPreferences200ResponseCustomerTopics", "topics")
      , ("getPersonSubscriptionPreferences200ResponseCustomerUnsubscribed", "unsubscribed")
      , ("getPersonSubscriptionPreferences200ResponseCustomerHeader", "header")
      ]


-- | 
data GetPersonSubscriptionPreferences200ResponseCustomerHeader = GetPersonSubscriptionPreferences200ResponseCustomerHeader
  { getPersonSubscriptionPreferences200ResponseCustomerHeaderTitle :: Maybe Text -- ^ The header of the subscription preferences page.
  , getPersonSubscriptionPreferences200ResponseCustomerHeaderSubtitle :: Maybe Text -- ^ The subtitle or headline beneath the header of the subscription preferences page.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetPersonSubscriptionPreferences200ResponseCustomerHeader where
  parseJSON = genericParseJSON optionsGetPersonSubscriptionPreferences200ResponseCustomerHeader
instance ToJSON GetPersonSubscriptionPreferences200ResponseCustomerHeader where
  toJSON = genericToJSON optionsGetPersonSubscriptionPreferences200ResponseCustomerHeader

optionsGetPersonSubscriptionPreferences200ResponseCustomerHeader :: Options
optionsGetPersonSubscriptionPreferences200ResponseCustomerHeader =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getPersonSubscriptionPreferences200ResponseCustomerHeaderTitle", "title")
      , ("getPersonSubscriptionPreferences200ResponseCustomerHeaderSubtitle", "subtitle")
      ]


-- | 
data GetPersonSubscriptionPreferences200ResponseCustomerTopicsInner = GetPersonSubscriptionPreferences200ResponseCustomerTopicsInner
  { getPersonSubscriptionPreferences200ResponseCustomerTopicsInnerId :: Maybe Text -- ^ System-generated ID of the topic.
  , getPersonSubscriptionPreferences200ResponseCustomerTopicsInnerSubscribed :: Maybe Bool -- ^ If true, the customer is subscribed to the topic. If false, the customer is unsubscribed from the topic.
  , getPersonSubscriptionPreferences200ResponseCustomerTopicsInnerName :: Maybe Text -- ^ The name of the subscription topic.
  , getPersonSubscriptionPreferences200ResponseCustomerTopicsInnerDescription :: Maybe Text -- ^ The (optional) description of the topic.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetPersonSubscriptionPreferences200ResponseCustomerTopicsInner where
  parseJSON = genericParseJSON optionsGetPersonSubscriptionPreferences200ResponseCustomerTopicsInner
instance ToJSON GetPersonSubscriptionPreferences200ResponseCustomerTopicsInner where
  toJSON = genericToJSON optionsGetPersonSubscriptionPreferences200ResponseCustomerTopicsInner

optionsGetPersonSubscriptionPreferences200ResponseCustomerTopicsInner :: Options
optionsGetPersonSubscriptionPreferences200ResponseCustomerTopicsInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getPersonSubscriptionPreferences200ResponseCustomerTopicsInnerId", "id")
      , ("getPersonSubscriptionPreferences200ResponseCustomerTopicsInnerSubscribed", "subscribed")
      , ("getPersonSubscriptionPreferences200ResponseCustomerTopicsInnerName", "name")
      , ("getPersonSubscriptionPreferences200ResponseCustomerTopicsInnerDescription", "description")
      ]


-- | 
data GetPersonSubscriptionPreferences400Response = GetPersonSubscriptionPreferences400Response
  { getPersonSubscriptionPreferences400ResponseMeta :: Maybe GetPersonSubscriptionPreferences400ResponseMeta -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetPersonSubscriptionPreferences400Response where
  parseJSON = genericParseJSON optionsGetPersonSubscriptionPreferences400Response
instance ToJSON GetPersonSubscriptionPreferences400Response where
  toJSON = genericToJSON optionsGetPersonSubscriptionPreferences400Response

optionsGetPersonSubscriptionPreferences400Response :: Options
optionsGetPersonSubscriptionPreferences400Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getPersonSubscriptionPreferences400ResponseMeta", "meta")
      ]


-- | 
data GetPersonSubscriptionPreferences400ResponseMeta = GetPersonSubscriptionPreferences400ResponseMeta
  { getPersonSubscriptionPreferences400ResponseMetaErrors :: Maybe [Text] -- ^ An array of errors.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetPersonSubscriptionPreferences400ResponseMeta where
  parseJSON = genericParseJSON optionsGetPersonSubscriptionPreferences400ResponseMeta
instance ToJSON GetPersonSubscriptionPreferences400ResponseMeta where
  toJSON = genericToJSON optionsGetPersonSubscriptionPreferences400ResponseMeta

optionsGetPersonSubscriptionPreferences400ResponseMeta :: Options
optionsGetPersonSubscriptionPreferences400ResponseMeta =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getPersonSubscriptionPreferences400ResponseMetaErrors", "errors")
      ]


-- | 
data GetSegmentCount200Response = GetSegmentCount200Response
  { getSegmentCount200ResponseCount :: Maybe Int -- ^ The total number of customers in the segment.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetSegmentCount200Response where
  parseJSON = genericParseJSON optionsGetSegmentCount200Response
instance ToJSON GetSegmentCount200Response where
  toJSON = genericToJSON optionsGetSegmentCount200Response

optionsGetSegmentCount200Response :: Options
optionsGetSegmentCount200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getSegmentCount200ResponseCount", "count")
      ]


-- | 
data GetSegmentDependencies200Response = GetSegmentDependencies200Response
  { getSegmentDependencies200ResponseUsedUnderscoreby :: Maybe GetSegmentDependencies200ResponseUsedBy -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetSegmentDependencies200Response where
  parseJSON = genericParseJSON optionsGetSegmentDependencies200Response
instance ToJSON GetSegmentDependencies200Response where
  toJSON = genericToJSON optionsGetSegmentDependencies200Response

optionsGetSegmentDependencies200Response :: Options
optionsGetSegmentDependencies200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getSegmentDependencies200ResponseUsedUnderscoreby", "used_by")
      ]


-- | 
data GetSegmentDependencies200ResponseUsedBy = GetSegmentDependencies200ResponseUsedBy
  { getSegmentDependencies200ResponseUsedByCampaigns :: Maybe [Int] -- ^ The campaigns that use this segment.
  , getSegmentDependencies200ResponseUsedBySentUnderscorenewsletters :: Maybe [Int] -- ^ The newsletters that you've sent that uses this segment.
  , getSegmentDependencies200ResponseUsedByDraftUnderscorenewsletters :: Maybe [Int] -- ^ The newsletters that are still in a draft state that reference this segment.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetSegmentDependencies200ResponseUsedBy where
  parseJSON = genericParseJSON optionsGetSegmentDependencies200ResponseUsedBy
instance ToJSON GetSegmentDependencies200ResponseUsedBy where
  toJSON = genericToJSON optionsGetSegmentDependencies200ResponseUsedBy

optionsGetSegmentDependencies200ResponseUsedBy :: Options
optionsGetSegmentDependencies200ResponseUsedBy =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getSegmentDependencies200ResponseUsedByCampaigns", "campaigns")
      , ("getSegmentDependencies200ResponseUsedBySentUnderscorenewsletters", "sent_newsletters")
      , ("getSegmentDependencies200ResponseUsedByDraftUnderscorenewsletters", "draft_newsletters")
      ]


-- | 
data GetSegmentMembership200Response = GetSegmentMembership200Response
  { getSegmentMembership200ResponseIds :: Maybe [Text] -- ^ The customers that belong to this segment.
  , getSegmentMembership200ResponseIdentifiers :: Maybe [IdOnlyIdentifiersInner] -- ^ The customers that belong to this segment.
  , getSegmentMembership200ResponseNext :: Maybe Text -- ^ Indicates the next page of results. Add `?start=<next_value>` to the request to get the next page of results.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetSegmentMembership200Response where
  parseJSON = genericParseJSON optionsGetSegmentMembership200Response
instance ToJSON GetSegmentMembership200Response where
  toJSON = genericToJSON optionsGetSegmentMembership200Response

optionsGetSegmentMembership200Response :: Options
optionsGetSegmentMembership200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getSegmentMembership200ResponseIds", "ids")
      , ("getSegmentMembership200ResponseIdentifiers", "identifiers")
      , ("getSegmentMembership200ResponseNext", "next")
      ]


-- | 
data GetSender200Response = GetSender200Response
  { getSender200ResponseSenderUnderscoreidentity :: Maybe ListSenders200ResponseSenderIdentitiesInner -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetSender200Response where
  parseJSON = genericParseJSON optionsGetSender200Response
instance ToJSON GetSender200Response where
  toJSON = genericToJSON optionsGetSender200Response

optionsGetSender200Response :: Options
optionsGetSender200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getSender200ResponseSenderUnderscoreidentity", "sender_identity")
      ]


-- | 
data GetSenderUsage200Response = GetSenderUsage200Response
  { getSenderUsage200ResponseCampaigns :: Maybe [Int] -- ^ The campaigns that use the sender.
  , getSenderUsage200ResponseSentUnderscorenewsletters :: Maybe [Int] -- ^ The newsletters you've sent that used the sender.
  , getSenderUsage200ResponseDraftUnderscorenewsletters :: Maybe [Int] -- ^ The newsletter drafts that are set up using the sender.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetSenderUsage200Response where
  parseJSON = genericParseJSON optionsGetSenderUsage200Response
instance ToJSON GetSenderUsage200Response where
  toJSON = genericToJSON optionsGetSenderUsage200Response

optionsGetSenderUsage200Response :: Options
optionsGetSenderUsage200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getSenderUsage200ResponseCampaigns", "campaigns")
      , ("getSenderUsage200ResponseSentUnderscorenewsletters", "sent_newsletters")
      , ("getSenderUsage200ResponseDraftUnderscorenewsletters", "draft_newsletters")
      ]


-- | 
data GetSuppression200Response = GetSuppression200Response
  { getSuppression200ResponseCategory :: Maybe Text -- ^ The reason the addresses are suppressed.
  , getSuppression200ResponseSuppressions :: Maybe [GetSuppression200ResponseSuppressionsInner] -- ^ The addresses suppressed in this category.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetSuppression200Response where
  parseJSON = genericParseJSON optionsGetSuppression200Response
instance ToJSON GetSuppression200Response where
  toJSON = genericToJSON optionsGetSuppression200Response

optionsGetSuppression200Response :: Options
optionsGetSuppression200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getSuppression200ResponseCategory", "category")
      , ("getSuppression200ResponseSuppressions", "suppressions")
      ]


-- | 
data GetSuppression200ResponseSuppressionsInner = GetSuppression200ResponseSuppressionsInner
  { getSuppression200ResponseSuppressionsInnerCreated :: Maybe Int -- ^ The timestamp (in seconds), when the ESP suppressed the address.
  , getSuppression200ResponseSuppressionsInnerEmail :: Maybe Text -- ^ The email address that the ESP suppressed.
  , getSuppression200ResponseSuppressionsInnerReason :: Maybe Text -- ^ The reason for the suppression, as [recorded by Mailgun](https://documentation.mailgun.com/en/latest/api-suppressions.html).
  , getSuppression200ResponseSuppressionsInnerStatus :: Maybe Text -- ^ The status code for the suppression, as [recorded by mailgun](https://documentation.mailgun.com/en/latest/api-suppressions.html). This is normally `550`.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetSuppression200ResponseSuppressionsInner where
  parseJSON = genericParseJSON optionsGetSuppression200ResponseSuppressionsInner
instance ToJSON GetSuppression200ResponseSuppressionsInner where
  toJSON = genericToJSON optionsGetSuppression200ResponseSuppressionsInner

optionsGetSuppression200ResponseSuppressionsInner :: Options
optionsGetSuppression200ResponseSuppressionsInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getSuppression200ResponseSuppressionsInnerCreated", "created")
      , ("getSuppression200ResponseSuppressionsInnerEmail", "email")
      , ("getSuppression200ResponseSuppressionsInnerReason", "reason")
      , ("getSuppression200ResponseSuppressionsInnerStatus", "status")
      ]


-- | 
data GetTopics200Response = GetTopics200Response
  { getTopics200ResponseTopics :: Maybe [GetTopics200ResponseTopicsInner] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetTopics200Response where
  parseJSON = genericParseJSON optionsGetTopics200Response
instance ToJSON GetTopics200Response where
  toJSON = genericToJSON optionsGetTopics200Response

optionsGetTopics200Response :: Options
optionsGetTopics200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getTopics200ResponseTopics", "topics")
      ]


-- | 
data GetTopics200ResponseTopicsInner = GetTopics200ResponseTopicsInner
  { getTopics200ResponseTopicsInnerName :: Maybe Text -- ^ The name of the subscription topic.
  , getTopics200ResponseTopicsInnerDescription :: Maybe Text -- ^ A description of the topic that you provided when you created the topic in the UI.
  , getTopics200ResponseTopicsInnerSubscribedUnderscorebyUnderscoredefault :: Maybe Bool -- ^ If false, a person is opted-out by default. If true, a person is opted-in by default.
  , getTopics200ResponseTopicsInnerId :: Maybe Int -- ^ The system-generated id for the subscription topic. Also located on the subscription center landing page. These increment up by 1, starting with 1.
  , getTopics200ResponseTopicsInnerIdentifier :: Maybe Text -- ^ The key associated with the subscription topic. The format is `topic_<id>`.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetTopics200ResponseTopicsInner where
  parseJSON = genericParseJSON optionsGetTopics200ResponseTopicsInner
instance ToJSON GetTopics200ResponseTopicsInner where
  toJSON = genericToJSON optionsGetTopics200ResponseTopicsInner

optionsGetTopics200ResponseTopicsInner :: Options
optionsGetTopics200ResponseTopicsInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getTopics200ResponseTopicsInnerName", "name")
      , ("getTopics200ResponseTopicsInnerDescription", "description")
      , ("getTopics200ResponseTopicsInnerSubscribedUnderscorebyUnderscoredefault", "subscribed_by_default")
      , ("getTopics200ResponseTopicsInnerId", "id")
      , ("getTopics200ResponseTopicsInnerIdentifier", "identifier")
      ]


-- | 
data GetTransactional200Response = GetTransactional200Response
  { getTransactional200ResponseMessage :: Maybe ListTransactional200ResponseMessagesInner -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetTransactional200Response where
  parseJSON = genericParseJSON optionsGetTransactional200Response
instance ToJSON GetTransactional200Response where
  toJSON = genericToJSON optionsGetTransactional200Response

optionsGetTransactional200Response :: Options
optionsGetTransactional200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getTransactional200ResponseMessage", "message")
      ]


-- | 
data GetTransactionalVariant200Response = GetTransactionalVariant200Response
  { getTransactionalVariant200ResponseContent :: Maybe [ListTransactionalVariants200ResponseContentsInner] -- ^ The object represents a variant.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetTransactionalVariant200Response where
  parseJSON = genericParseJSON optionsGetTransactionalVariant200Response
instance ToJSON GetTransactionalVariant200Response where
  toJSON = genericToJSON optionsGetTransactionalVariant200Response

optionsGetTransactionalVariant200Response :: Options
optionsGetTransactionalVariant200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getTransactionalVariant200ResponseContent", "content")
      ]


-- | 
data GetVariantLinks200Response = GetVariantLinks200Response
  { getVariantLinks200ResponseLinks :: Maybe [BroadcastLinks200ResponseLinksInner] -- ^ Each object in the array represents a link in your newsletter variant.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON GetVariantLinks200Response where
  parseJSON = genericParseJSON optionsGetVariantLinks200Response
instance ToJSON GetVariantLinks200Response where
  toJSON = genericToJSON optionsGetVariantLinks200Response

optionsGetVariantLinks200Response :: Options
optionsGetVariantLinks200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("getVariantLinks200ResponseLinks", "links")
      ]


-- | An array of customer ids that you want to send the broadcast to. These IDs must already exist; your request cannot create a new person.
data IDs = IDs
  { iDsIds :: [Text] -- ^ An array of IDs you want to send a broadcast to. **NOTE**: If your workspace identifies people by `email`, don't use this option. Identify your audience by `emails` instead. 
  , iDsData :: Maybe (Map.Map String Value) -- ^ Contains information you want to use to populate your broadcast.
  , iDsEmailUnderscoreaddUnderscoreduplicates :: Maybe Bool -- ^ an email address associated with more than one profile id is an error.
  , iDsEmailUnderscoreignoreUnderscoremissing :: Maybe Bool -- ^ If false a missing email address is an error.
  , iDsIdUnderscoreignoreUnderscoremissing :: Maybe Bool -- ^ If false, a missing customer ID is an error.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON IDs where
  parseJSON = genericParseJSON optionsIDs
instance ToJSON IDs where
  toJSON = genericToJSON optionsIDs

optionsIDs :: Options
optionsIDs =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("iDsIds", "ids")
      , ("iDsData", "data")
      , ("iDsEmailUnderscoreaddUnderscoreduplicates", "email_add_duplicates")
      , ("iDsEmailUnderscoreignoreUnderscoremissing", "email_ignore_missing")
      , ("iDsIdUnderscoreignoreUnderscoremissing", "id_ignore_missing")
      ]


-- | Displays an icon from an icon font that you&#39;ve loaded into your app or project. You must load your icon font in the assets section of your app configuration.
data IconWidget = IconWidget
  { iconWidgetType :: Text -- ^ Defines the widget type.
  , iconWidgetColor :: Text -- ^ The color you want to use for this content. You can only set values here that are defined under [**Content** > **In-App Messages**](https://fly.customer.io/env/last/in-app-messages).
  , iconWidgetFont :: Maybe Value -- ^ The icon font you want to use.
  , iconWidgetSize :: Maybe Int -- ^ The pixel size of the icon.
  , iconWidgetValue :: Text -- ^ The value of the icon that you want to use. For example, for font-awesome, you'd use the name of the icon.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON IconWidget where
  parseJSON = genericParseJSON optionsIconWidget
instance ToJSON IconWidget where
  toJSON = genericToJSON optionsIconWidget

optionsIconWidget :: Options
optionsIconWidget =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("iconWidgetType", "type")
      , ("iconWidgetColor", "color")
      , ("iconWidgetFont", "font")
      , ("iconWidgetSize", "size")
      , ("iconWidgetValue", "value")
      ]


-- | 
data Id = Id
  { idId :: Text -- ^ The identifier for the person represented by the transactional message. **NOTE**: If your workspace identifies people by email, use the `email` identifier instead. 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Id where
  parseJSON = genericParseJSON optionsId
instance ToJSON Id where
  toJSON = genericToJSON optionsId

optionsId :: Options
optionsId =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("idId", "id")
      ]


-- | 
data Id1 = Id1
  { id1Id :: Maybe Text -- ^ The ID of a customer profile, analogous to a \"person\" in the UI.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Id1 where
  parseJSON = genericParseJSON optionsId1
instance ToJSON Id1 where
  toJSON = genericToJSON optionsId1

optionsId1 :: Options
optionsId1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("id1Id", "id")
      ]


-- | 
data Id2 = Id2
  { id2Id :: Text -- ^ The ID of a customer profile, analogous to a \"person\" in the UI.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Id2 where
  parseJSON = genericParseJSON optionsId2
instance ToJSON Id2 where
  toJSON = genericToJSON optionsId2

optionsId2 :: Options
optionsId2 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("id2Id", "id")
      ]


-- | 
data IdOnly = IdOnly
  { idOnlyIds :: Maybe [Text] -- ^ The customers that belong to this segment.
  , idOnlyIdentifiers :: Maybe [IdOnlyIdentifiersInner] -- ^ The customers that belong to this segment.
  , idOnlyNext :: Maybe Text -- ^ Indicates the next page of results. Add `?start=<next_value>` to the request to get the next page of results.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON IdOnly where
  parseJSON = genericParseJSON optionsIdOnly
instance ToJSON IdOnly where
  toJSON = genericToJSON optionsIdOnly

optionsIdOnly :: Options
optionsIdOnly =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("idOnlyIds", "ids")
      , ("idOnlyIdentifiers", "identifiers")
      , ("idOnlyNext", "next")
      ]


-- | Contains &#x60;id&#x60; and &#x60;cio_id&#x60; identifiers for a person in a workspace that doesn&#39;t use email as an identifier. 
data IdOnlyIdentifiersInner = IdOnlyIdentifiersInner
  { idOnlyIdentifiersInnerId :: Text -- ^ A person's unique ID. This matches a value in `ids`.
  , idOnlyIdentifiersInnerCioUnderscoreid :: Text -- ^ A unique identifier set by Customer.io, used to reference a person if you want to update their identifiers.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON IdOnlyIdentifiersInner where
  parseJSON = genericParseJSON optionsIdOnlyIdentifiersInner
instance ToJSON IdOnlyIdentifiersInner where
  toJSON = genericToJSON optionsIdOnlyIdentifiersInner

optionsIdOnlyIdentifiersInner :: Options
optionsIdOnlyIdentifiersInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("idOnlyIdentifiersInnerId", "id")
      , ("idOnlyIdentifiersInnerCioUnderscoreid", "cio_id")
      ]


-- | The &#x60;action&#x60; determines the type of operation you want to perform with an object. If &#x60;identifiers.object_id&#x60; does not exist, we&#39;ll create a new object; if it exists, we&#39;ll update the object accordingly. 
data Identify = Identify
  { identifyIdentifiers :: IdentifyAllOfIdentifiers -- ^ 
  , identifyType :: Text -- ^ The operation modifies a single object—non person data.
  , identifyAction :: Text -- ^ Indicates that the operation will `identify` the the item of the specified `type`.
  , identifyAttributes :: Maybe Value -- ^ The data that belongs to the object. This is information you might want to associate with people later (through `cio_relationships`). Passing `null` or an empty string removes the attribute from the object. Some attributes have special meaning. Please refer to the list of [reserved attributes](/journeys/objects-create/#reserved-attributes). 
  , identifyCioUnderscorerelationships :: Maybe [IdentifyAllOfCioRelationshipsInner] -- ^ The people you want to associate with an object. Each object in the array represents a person.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Identify where
  parseJSON = genericParseJSON optionsIdentify
instance ToJSON Identify where
  toJSON = genericToJSON optionsIdentify

optionsIdentify :: Options
optionsIdentify =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("identifyIdentifiers", "identifiers")
      , ("identifyType", "type")
      , ("identifyAction", "action")
      , ("identifyAttributes", "attributes")
      , ("identifyCioUnderscorerelationships", "cio_relationships")
      ]


-- | Add or update a person.
data Identify1 = Identify1
  { identify1Type :: Text -- ^ The operation modifies a person in Customer.io
  , identify1Identifiers :: Identify1AllOfIdentifiers -- ^ 
  , identify1Action :: Text -- ^ Indicates that the operation will `identify` the the item of the specified `type`.
  , identify1Attributes :: Maybe Identify1AllOfAttributes -- ^ 
  , identify1CioUnderscorerelationships :: Maybe [Identify1AllOfCioRelationshipsInner] -- ^ Each object in the array represents a relationship you want to add to, or remove from, a person.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Identify1 where
  parseJSON = genericParseJSON optionsIdentify1
instance ToJSON Identify1 where
  toJSON = genericToJSON optionsIdentify1

optionsIdentify1 :: Options
optionsIdentify1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("identify1Type", "type")
      , ("identify1Identifiers", "identifiers")
      , ("identify1Action", "action")
      , ("identify1Attributes", "attributes")
      , ("identify1CioUnderscorerelationships", "cio_relationships")
      ]


-- | Attributes that you want to add or update for this person.
data Identify1AllOfAttributes = Identify1AllOfAttributes
  { identify1AllOfAttributesCioUnderscoresubscriptionUnderscorepreferences :: Maybe Identify1AllOfAttributesCioSubscriptionPreferences -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Identify1AllOfAttributes where
  parseJSON = genericParseJSON optionsIdentify1AllOfAttributes
instance ToJSON Identify1AllOfAttributes where
  toJSON = genericToJSON optionsIdentify1AllOfAttributes

optionsIdentify1AllOfAttributes :: Options
optionsIdentify1AllOfAttributes =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("identify1AllOfAttributesCioUnderscoresubscriptionUnderscorepreferences", "cio_subscription_preferences")
      ]


-- | Stores your audience&#39;s subscription preferences if you enable our [subscription center](/subscription-center/) feature. These items are set automatically when people use the unsubscribe link in your messages, but you can set preferences outside the subscription flow. To update select topic preferences while preserving those set for other topics, use JSON dot notation &#x60;\&quot;cio_subscription_preferences.topics.topic_&lt;topic ID&gt;\&quot;:&lt;boolean&gt;&#x60;.
data Identify1AllOfAttributesCioSubscriptionPreferences = Identify1AllOfAttributesCioSubscriptionPreferences
  { identify1AllOfAttributesCioSubscriptionPreferencesTopics :: Maybe (Map.Map String Bool) -- ^ Contains active topics in your workspace, named `topic_<id>`.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Identify1AllOfAttributesCioSubscriptionPreferences where
  parseJSON = genericParseJSON optionsIdentify1AllOfAttributesCioSubscriptionPreferences
instance ToJSON Identify1AllOfAttributesCioSubscriptionPreferences where
  toJSON = genericToJSON optionsIdentify1AllOfAttributesCioSubscriptionPreferences

optionsIdentify1AllOfAttributesCioSubscriptionPreferences :: Options
optionsIdentify1AllOfAttributesCioSubscriptionPreferences =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("identify1AllOfAttributesCioSubscriptionPreferencesTopics", "topics")
      ]


-- | 
data Identify1AllOfCioRelationshipsInner = Identify1AllOfCioRelationshipsInner
  { identify1AllOfCioRelationshipsInnerIdentifiers :: Maybe ObjectIdentifiersIdentifiers -- ^ 
  , identify1AllOfCioRelationshipsInnerRelationshipUnderscoreattributes :: Maybe (Map.Map String Value) -- ^ The attributes associated with a relationship. Passing null or an empty string removes the attribute from the relationship. 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Identify1AllOfCioRelationshipsInner where
  parseJSON = genericParseJSON optionsIdentify1AllOfCioRelationshipsInner
instance ToJSON Identify1AllOfCioRelationshipsInner where
  toJSON = genericToJSON optionsIdentify1AllOfCioRelationshipsInner

optionsIdentify1AllOfCioRelationshipsInner :: Options
optionsIdentify1AllOfCioRelationshipsInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("identify1AllOfCioRelationshipsInnerIdentifiers", "identifiers")
      , ("identify1AllOfCioRelationshipsInnerRelationshipUnderscoreattributes", "relationship_attributes")
      ]


-- | The person you want to perform an action for—one of either &#x60;id&#x60;, &#x60;email&#x60;, or &#x60;cio_id&#x60;. You cannot pass multiple identifiers.
data Identify1AllOfIdentifiers = Identify1AllOfIdentifiers
  { identify1AllOfIdentifiersId :: Text -- ^ The ID of a customer profile, analogous to a \"person\" in the UI.
  , identify1AllOfIdentifiersEmail :: Text -- ^ The email address of the customer.
  , identify1AllOfIdentifiersCioUnderscoreid :: Text -- ^ A unique identifier set by Customer.io, used to reference a person if you want to update their identifiers.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Identify1AllOfIdentifiers where
  parseJSON = genericParseJSON optionsIdentify1AllOfIdentifiers
instance ToJSON Identify1AllOfIdentifiers where
  toJSON = genericToJSON optionsIdentify1AllOfIdentifiers

optionsIdentify1AllOfIdentifiers :: Options
optionsIdentify1AllOfIdentifiers =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("identify1AllOfIdentifiersId", "id")
      , ("identify1AllOfIdentifiersEmail", "email")
      , ("identify1AllOfIdentifiersCioUnderscoreid", "cio_id")
      ]


-- | 
data IdentifyAllOfCioRelationshipsInner = IdentifyAllOfCioRelationshipsInner
  { identifyAllOfCioRelationshipsInnerIdentifiers :: Maybe IdentifyAllOfCioRelationshipsInnerIdentifiers -- ^ 
  , identifyAllOfCioRelationshipsInnerRelationshipUnderscoreattributes :: Maybe (Map.Map String Value) -- ^ The attributes associated with a relationship. Passing null or an empty string removes the attribute from the relationship. 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON IdentifyAllOfCioRelationshipsInner where
  parseJSON = genericParseJSON optionsIdentifyAllOfCioRelationshipsInner
instance ToJSON IdentifyAllOfCioRelationshipsInner where
  toJSON = genericToJSON optionsIdentifyAllOfCioRelationshipsInner

optionsIdentifyAllOfCioRelationshipsInner :: Options
optionsIdentifyAllOfCioRelationshipsInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("identifyAllOfCioRelationshipsInnerIdentifiers", "identifiers")
      , ("identifyAllOfCioRelationshipsInnerRelationshipUnderscoreattributes", "relationship_attributes")
      ]


-- | 
data IdentifyAllOfCioRelationshipsInnerIdentifiers = IdentifyAllOfCioRelationshipsInnerIdentifiers
  { identifyAllOfCioRelationshipsInnerIdentifiersId :: Maybe Text -- ^ The ID of a customer profile, analogous to a \"person\" in the UI.
  , identifyAllOfCioRelationshipsInnerIdentifiersEmail :: Maybe Text -- ^ The email address of the customer.
  , identifyAllOfCioRelationshipsInnerIdentifiersCioUnderscoreid :: Maybe Text -- ^ A unique identifier set by Customer.io, used to reference a person if you want to update their identifiers.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON IdentifyAllOfCioRelationshipsInnerIdentifiers where
  parseJSON = genericParseJSON optionsIdentifyAllOfCioRelationshipsInnerIdentifiers
instance ToJSON IdentifyAllOfCioRelationshipsInnerIdentifiers where
  toJSON = genericToJSON optionsIdentifyAllOfCioRelationshipsInnerIdentifiers

optionsIdentifyAllOfCioRelationshipsInnerIdentifiers :: Options
optionsIdentifyAllOfCioRelationshipsInnerIdentifiers =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("identifyAllOfCioRelationshipsInnerIdentifiersId", "id")
      , ("identifyAllOfCioRelationshipsInnerIdentifiersEmail", "email")
      , ("identifyAllOfCioRelationshipsInnerIdentifiersCioUnderscoreid", "cio_id")
      ]


-- | The identifiers for a custom object. When identifying a new object, you *must* use both the &#x60;object_type_id&#x60; and &#x60;object_id&#x60; (where &#x60;object_type_id&#x60; is an integer representing the type of object and the &#x60;object_id&#x60; is the individual identifier for the object).  If you&#39;re updating an existing object, you can use either the &#x60;object_type_id&#x60; and &#x60;object_id&#x60; or the &#x60;cio_object_id&#x60; (where &#x60;cio_object_id&#x60; is an immutable unique value that Customer.io sets for an object when you create it). 
data IdentifyAllOfIdentifiers = IdentifyAllOfIdentifiers
  { identifyAllOfIdentifiersObjectUnderscoretypeUnderscoreid :: Text -- ^ The object type an object belongs to—like \"Companies\" or \"Accounts\". Object type IDs are string-formatted integers that begin at `1` and increment for each new type.
  , identifyAllOfIdentifiersObjectUnderscoreid :: Text -- ^ The unique identifier for an object. If you use an `object_id` that already exists, we'll update the object accordingly.
  , identifyAllOfIdentifiersCioUnderscoreobjectUnderscoreid :: Text -- ^ A unique value that Customer.io sets for an object when you create it. This ID is immutable.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON IdentifyAllOfIdentifiers where
  parseJSON = genericParseJSON optionsIdentifyAllOfIdentifiers
instance ToJSON IdentifyAllOfIdentifiers where
  toJSON = genericToJSON optionsIdentifyAllOfIdentifiers

optionsIdentifyAllOfIdentifiers :: Options
optionsIdentifyAllOfIdentifiers =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("identifyAllOfIdentifiersObjectUnderscoretypeUnderscoreid", "object_type_id")
      , ("identifyAllOfIdentifiersObjectUnderscoreid", "object_id")
      , ("identifyAllOfIdentifiersCioUnderscoreobjectUnderscoreid", "cio_object_id")
      ]


-- | The &#x60;identify_anonymous&#x60; action lets you relate an object to a person who hasn&#39;t yet identified themselves by anonymous_id. When you identify the person, their anonymous relationship will carry over to the identified profile.
data IdentifyAnonymous = IdentifyAnonymous
  { identifyAnonymousIdentifiers :: IdentifyAllOfIdentifiers -- ^ 
  , identifyAnonymousType :: Text -- ^ The operation modifies a single object—non person data.
  , identifyAnonymousAction :: Text -- ^ Indicates that the operation will `identify` the item of the specified `type` and relate it to an `anonymous_id`.
  , identifyAnonymousAttributes :: Maybe Value -- ^ The data that belongs to the object. This is information you might want to associate with people later (through `cio_relationships`). Passing `null` or an empty string removes the attribute from the object. Some attributes have special meaning. Please refer to the list of [reserved attributes](/journeys/objects-create/#reserved-attributes). 
  , identifyAnonymousCioUnderscorerelationships :: Maybe [IdentifyAnonymousAllOfCioRelationshipsInner] -- ^ The anonymous people you want to associate with an object. Each object in the array contains an `anonymous_id` representing a person you haven't yet identified by `id` or `email`.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON IdentifyAnonymous where
  parseJSON = genericParseJSON optionsIdentifyAnonymous
instance ToJSON IdentifyAnonymous where
  toJSON = genericToJSON optionsIdentifyAnonymous

optionsIdentifyAnonymous :: Options
optionsIdentifyAnonymous =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("identifyAnonymousIdentifiers", "identifiers")
      , ("identifyAnonymousType", "type")
      , ("identifyAnonymousAction", "action")
      , ("identifyAnonymousAttributes", "attributes")
      , ("identifyAnonymousCioUnderscorerelationships", "cio_relationships")
      ]


-- | 
data IdentifyAnonymousAllOfCioRelationshipsInner = IdentifyAnonymousAllOfCioRelationshipsInner
  { identifyAnonymousAllOfCioRelationshipsInnerIdentifiers :: Maybe IdentifyAnonymousAllOfCioRelationshipsInnerIdentifiers -- ^ 
  , identifyAnonymousAllOfCioRelationshipsInnerRelationshipUnderscoreattributes :: Maybe Value -- ^ Coming October 2023 - The attributes associated with a relationship. Passing null or an empty string removes the attribute from the relationship.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON IdentifyAnonymousAllOfCioRelationshipsInner where
  parseJSON = genericParseJSON optionsIdentifyAnonymousAllOfCioRelationshipsInner
instance ToJSON IdentifyAnonymousAllOfCioRelationshipsInner where
  toJSON = genericToJSON optionsIdentifyAnonymousAllOfCioRelationshipsInner

optionsIdentifyAnonymousAllOfCioRelationshipsInner :: Options
optionsIdentifyAnonymousAllOfCioRelationshipsInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("identifyAnonymousAllOfCioRelationshipsInnerIdentifiers", "identifiers")
      , ("identifyAnonymousAllOfCioRelationshipsInnerRelationshipUnderscoreattributes", "relationship_attributes")
      ]


-- | 
data IdentifyAnonymousAllOfCioRelationshipsInnerIdentifiers = IdentifyAnonymousAllOfCioRelationshipsInnerIdentifiers
  { identifyAnonymousAllOfCioRelationshipsInnerIdentifiersAnonymousUnderscoreid :: Maybe Text -- ^ An identifier for an anonymous event, like a cookie. If set as an attribute on a person, any events bearing the same anonymous value are associated with this person. This value must be unique and is not reusable.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON IdentifyAnonymousAllOfCioRelationshipsInnerIdentifiers where
  parseJSON = genericParseJSON optionsIdentifyAnonymousAllOfCioRelationshipsInnerIdentifiers
instance ToJSON IdentifyAnonymousAllOfCioRelationshipsInnerIdentifiers where
  toJSON = genericToJSON optionsIdentifyAnonymousAllOfCioRelationshipsInnerIdentifiers

optionsIdentifyAnonymousAllOfCioRelationshipsInnerIdentifiers :: Options
optionsIdentifyAnonymousAllOfCioRelationshipsInnerIdentifiers =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("identifyAnonymousAllOfCioRelationshipsInnerIdentifiersAnonymousUnderscoreid", "anonymous_id")
      ]


-- | Add or update a person.
data IdentifyPerson = IdentifyPerson
  { identifyPersonType :: Text -- ^ The operation modifies a person in Customer.io
  , identifyPersonIdentifiers :: IdentifyPersonAllOfIdentifiers -- ^ 
  , identifyPersonAction :: Text -- ^ Indicates that the operation will `identify` the the item of the specified `type`.
  , identifyPersonAttributes :: Maybe IdentifyPersonAllOfAttributes -- ^ 
  , identifyPersonCioUnderscorerelationships :: Maybe [IdentifyPersonAllOfCioRelationships] -- ^ Each object in the array represents a relationship you want to add to, or remove from, a person.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON IdentifyPerson where
  parseJSON = genericParseJSON optionsIdentifyPerson
instance ToJSON IdentifyPerson where
  toJSON = genericToJSON optionsIdentifyPerson

optionsIdentifyPerson :: Options
optionsIdentifyPerson =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("identifyPersonType", "type")
      , ("identifyPersonIdentifiers", "identifiers")
      , ("identifyPersonAction", "action")
      , ("identifyPersonAttributes", "attributes")
      , ("identifyPersonCioUnderscorerelationships", "cio_relationships")
      ]


-- | Attributes that you want to add or update for this person.
data IdentifyPersonAllOfAttributes = IdentifyPersonAllOfAttributes
  { identifyPersonAllOfAttributesCioUnderscoresubscriptionUnderscorepreferences :: Maybe IdentifyPersonAllOfAttributesCioSubscriptionPreferences -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON IdentifyPersonAllOfAttributes where
  parseJSON = genericParseJSON optionsIdentifyPersonAllOfAttributes
instance ToJSON IdentifyPersonAllOfAttributes where
  toJSON = genericToJSON optionsIdentifyPersonAllOfAttributes

optionsIdentifyPersonAllOfAttributes :: Options
optionsIdentifyPersonAllOfAttributes =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("identifyPersonAllOfAttributesCioUnderscoresubscriptionUnderscorepreferences", "cio_subscription_preferences")
      ]


-- | Stores your audience&#39;s subscription preferences if you enable our [subscription center](/subscription-center/) feature. These items are set automatically when people use the unsubscribe link in your messages, but you can set preferences outside the subscription flow. To update select topic preferences while preserving those set for other topics, use JSON dot notation &#x60;\&quot;cio_subscription_preferences.topics.topic_&lt;topic ID&gt;\&quot;:&lt;boolean&gt;&#x60;.
data IdentifyPersonAllOfAttributesCioSubscriptionPreferences = IdentifyPersonAllOfAttributesCioSubscriptionPreferences
  { identifyPersonAllOfAttributesCioSubscriptionPreferencesTopics :: Maybe (Map.Map String Bool) -- ^ Contains active topics in your workspace, named `topic_<id>`.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON IdentifyPersonAllOfAttributesCioSubscriptionPreferences where
  parseJSON = genericParseJSON optionsIdentifyPersonAllOfAttributesCioSubscriptionPreferences
instance ToJSON IdentifyPersonAllOfAttributesCioSubscriptionPreferences where
  toJSON = genericToJSON optionsIdentifyPersonAllOfAttributesCioSubscriptionPreferences

optionsIdentifyPersonAllOfAttributesCioSubscriptionPreferences :: Options
optionsIdentifyPersonAllOfAttributesCioSubscriptionPreferences =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("identifyPersonAllOfAttributesCioSubscriptionPreferencesTopics", "topics")
      ]


-- | 
data IdentifyPersonAllOfCioRelationships = IdentifyPersonAllOfCioRelationships
  { identifyPersonAllOfCioRelationshipsIdentifiers :: Maybe ObjectCommonAllOfIdentifiers -- ^ 
  , identifyPersonAllOfCioRelationshipsRelationshipUnderscoreattributes :: Maybe (Map.Map String Value) -- ^ The attributes associated with a relationship. Passing null or an empty string removes the attribute from the relationship. 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON IdentifyPersonAllOfCioRelationships where
  parseJSON = genericParseJSON optionsIdentifyPersonAllOfCioRelationships
instance ToJSON IdentifyPersonAllOfCioRelationships where
  toJSON = genericToJSON optionsIdentifyPersonAllOfCioRelationships

optionsIdentifyPersonAllOfCioRelationships :: Options
optionsIdentifyPersonAllOfCioRelationships =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("identifyPersonAllOfCioRelationshipsIdentifiers", "identifiers")
      , ("identifyPersonAllOfCioRelationshipsRelationshipUnderscoreattributes", "relationship_attributes")
      ]


-- | The person you want to perform an action for—one of either &#x60;id&#x60;, &#x60;email&#x60;, or &#x60;cio_id&#x60;. You cannot pass multiple identifiers.
data IdentifyPersonAllOfIdentifiers = IdentifyPersonAllOfIdentifiers
  { identifyPersonAllOfIdentifiersId :: Text -- ^ The ID of a customer profile, analogous to a \"person\" in the UI.
  , identifyPersonAllOfIdentifiersEmail :: Text -- ^ The email address of the customer.
  , identifyPersonAllOfIdentifiersCioUnderscoreid :: Text -- ^ A unique identifier set by Customer.io, used to reference a person if you want to update their identifiers.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON IdentifyPersonAllOfIdentifiers where
  parseJSON = genericParseJSON optionsIdentifyPersonAllOfIdentifiers
instance ToJSON IdentifyPersonAllOfIdentifiers where
  toJSON = genericToJSON optionsIdentifyPersonAllOfIdentifiers

optionsIdentifyPersonAllOfIdentifiers :: Options
optionsIdentifyPersonAllOfIdentifiers =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("identifyPersonAllOfIdentifiersId", "id")
      , ("identifyPersonAllOfIdentifiersEmail", "email")
      , ("identifyPersonAllOfIdentifiersCioUnderscoreid", "cio_id")
      ]


-- | 
data Ids = Ids
  { idsId :: Text -- ^ The ID of the recipient.
  , idsData :: Maybe (Map.Map String Value) -- ^ Merge data associated with the recipient.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Ids where
  parseJSON = genericParseJSON optionsIds
instance ToJSON Ids where
  toJSON = genericToJSON optionsIds

optionsIds :: Options
optionsIds =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("idsId", "id")
      , ("idsData", "data")
      ]


-- | Displays an image. You can provide the URL of an image. Or, if you use the template designer, you can upload an image and host it directly.
data ImageWidget = ImageWidget
  { imageWidgetType :: Text -- ^ Defines the widget type.
  , imageWidgetImage :: Value -- ^ The URL of the image that you want ot use in your message.
  , imageWidgetFit :: Maybe Text -- ^ Determines how the image fits your message. Defaults to `cover`.
  , imageWidgetHeight :: Maybe Int -- ^ The height of the component in pixels, if you want to constrain it. If you don't set a height or width, we'll scale your content to fit your message or container.
  , imageWidgetWidth :: Maybe Int -- ^ The width of the component in pixels, if you want to constrain it. If you don't set a height or width, we'll scale your content to fit your message or container.
  , imageWidgetCornerRadius :: Maybe Int -- ^ Sets the radius of corners for an item in pixels, similar to the `border-radius` CSS property.
  , imageWidgetFadeInDuration :: Maybe Int -- ^ The durration for the image to fade in, in milliseconds, similar to the `fadeIn` CSS transition property.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ImageWidget where
  parseJSON = genericParseJSON optionsImageWidget
instance ToJSON ImageWidget where
  toJSON = genericToJSON optionsImageWidget

optionsImageWidget :: Options
optionsImageWidget =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("imageWidgetType", "type")
      , ("imageWidgetImage", "image")
      , ("imageWidgetFit", "fit")
      , ("imageWidgetHeight", "height")
      , ("imageWidgetWidth", "width")
      , ("imageWidgetCornerRadius", "cornerRadius")
      , ("imageWidgetFadeInDuration", "fadeInDuration")
      ]


-- | The type of identifier you want to use to identify people in your sheet—&#x60;id&#x60; or &#x60;email&#x60;. At least one column in the CSV must contain an identifier.
data ImportIdentifier = ImportIdentifier
  { 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ImportIdentifier where
  parseJSON = genericParseJSON optionsImportIdentifier
instance ToJSON ImportIdentifier where
  toJSON = genericToJSON optionsImportIdentifier

optionsImportIdentifier :: Options
optionsImportIdentifier =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ 
      ]


-- | Represents an import operation.
data ImportObject = ImportObject
  { importObjectId :: Maybe Int -- ^ This is the `import_id` you'll use if you want to [lookup your import operation](#getImport).
  , importObjectCreatedUnderscoreat :: Maybe Int -- ^ The date time when the referenced ID was created.
  , importObjectUpdatedUnderscoreat :: Maybe Int -- ^ The date time when the referenced ID was last updated.
  , importObjectName :: Maybe Text -- ^ A friendly name for your import. This helps you identify your import.
  , importObjectDescription :: Maybe Text -- ^ A helpful description that can help you find and recognize your import operation.
  , importObjectRowsUnderscoretoUnderscoreimport :: Maybe Int -- ^ The total number of importable rows we found in the CSV.
  , importObjectRowsUnderscoreimported :: Maybe Int -- ^ The number of rows we imported from the CSV.
  , importObjectState :: Maybe Text -- ^ The state of the import—whether your import is being processed, fully completed (`imported`), or if it failed.
  , importObjectType :: Maybe Text -- ^ The type of import.
  , importObjectIdentifier :: Maybe Text -- ^ The type of identifier you used to identify people in your CSV. Not applicable for object imports.
  , importObjectDataUnderscoretoUnderscoreprocess :: Maybe Text -- ^ Determines whether your import operation performs `all` add/update operations, only adds items (`only_new`), or only updates existing items (`only_existing`). Defaults to `all`. If `import_type` is `event`, you can only use `all` or `only_existing`.   This field was previously called `people_to_process` - we still support it but will deprecate it soon. 
  , importObjectPeopleUnderscoretoUnderscoreprocess :: Maybe Text -- ^ Returned for people and event imports, even if you imported using the field `data_to_process`. This field will be deprecated soon. 
  , importObjectObjectUnderscoretypeUnderscoreid :: Maybe Text -- ^ The object type an object belongs to—like \"Companies\" or \"Accounts\". Only applies to object imports.
  , importObjectError :: Maybe Text -- ^ If your import fails, this helps you understand why.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ImportObject where
  parseJSON = genericParseJSON optionsImportObject
instance ToJSON ImportObject where
  toJSON = genericToJSON optionsImportObject

optionsImportObject :: Options
optionsImportObject =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("importObjectId", "id")
      , ("importObjectCreatedUnderscoreat", "created_at")
      , ("importObjectUpdatedUnderscoreat", "updated_at")
      , ("importObjectName", "name")
      , ("importObjectDescription", "description")
      , ("importObjectRowsUnderscoretoUnderscoreimport", "rows_to_import")
      , ("importObjectRowsUnderscoreimported", "rows_imported")
      , ("importObjectState", "state")
      , ("importObjectType", "type")
      , ("importObjectIdentifier", "identifier")
      , ("importObjectDataUnderscoretoUnderscoreprocess", "data_to_process")
      , ("importObjectPeopleUnderscoretoUnderscoreprocess", "people_to_process")
      , ("importObjectObjectUnderscoretypeUnderscoreid", "object_type_id")
      , ("importObjectError", "error")
      ]


-- | 
data ImportRequest = ImportRequest
  { importRequestName :: Text -- ^ A friendly name for your import. This helps you identify your import.
  , importRequestDataUnderscorefileUnderscoreurl :: Text -- ^ The URL or path to the CSV file you want to import.
  , importRequestType :: Text -- ^ The type of import.
  , importRequestIdentifier :: Text -- ^ The type of identifier you want to use to identify people in your sheet—`id` or `email`. At least one column in the CSV must contain an identifier.
  , importRequestDataUnderscoretoUnderscoreprocess :: Maybe Text -- ^ Determines whether your import operation performs `all` add/update operations, only adds items (`only_new`), or only updates existing items (`only_existing`). Defaults to `all`. If `import_type` is `event`, you can only use `all` or `only_existing`.   This field was previously called `people_to_process` - we still support it but will deprecate it soon. 
  , importRequestDescription :: Maybe Text -- ^ A helpful description that can help you find and recognize your import operation.
  , importRequestObjectUnderscoretypeUnderscoreid :: Text -- ^ The object type an object belongs to—like \"Companies\" or \"Accounts\". Object type IDs are string-formatted integers that begin at `1` and increment for each new type.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ImportRequest where
  parseJSON = genericParseJSON optionsImportRequest
instance ToJSON ImportRequest where
  toJSON = genericToJSON optionsImportRequest

optionsImportRequest :: Options
optionsImportRequest =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("importRequestName", "name")
      , ("importRequestDataUnderscorefileUnderscoreurl", "data_file_url")
      , ("importRequestType", "type")
      , ("importRequestIdentifier", "identifier")
      , ("importRequestDataUnderscoretoUnderscoreprocess", "data_to_process")
      , ("importRequestDescription", "description")
      , ("importRequestObjectUnderscoretypeUnderscoreid", "object_type_id")
      ]


-- | The state of the import—whether your import is being processed, fully completed (&#x60;imported&#x60;), or if it failed.
data ImportState = ImportState
  { 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ImportState where
  parseJSON = genericParseJSON optionsImportState
instance ToJSON ImportState where
  toJSON = genericToJSON optionsImportState

optionsImportState :: Options
optionsImportState =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ 
      ]


-- | The type of import.
data ImportType = ImportType
  { 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ImportType where
  parseJSON = genericParseJSON optionsImportType
instance ToJSON ImportType where
  toJSON = genericToJSON optionsImportType

optionsImportType :: Options
optionsImportType =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ 
      ]


-- | 
data InAppAttempted = InAppAttempted
  { inAppAttemptedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , inAppAttemptedObjectUnderscoretype :: Text -- ^ The event relates to an in-app message.
  , inAppAttemptedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , inAppAttemptedMetric :: Text -- ^ An in-app message failed to send, but will be retried.
  , inAppAttemptedData :: InAppAttemptedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON InAppAttempted where
  parseJSON = genericParseJSON optionsInAppAttempted
instance ToJSON InAppAttempted where
  toJSON = genericToJSON optionsInAppAttempted

optionsInAppAttempted :: Options
optionsInAppAttempted =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("inAppAttemptedEventUnderscoreid", "event_id")
      , ("inAppAttemptedObjectUnderscoretype", "object_type")
      , ("inAppAttemptedTimestamp", "timestamp")
      , ("inAppAttemptedMetric", "metric")
      , ("inAppAttemptedData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data InAppAttemptedAllOfData = InAppAttemptedAllOfData
  { inAppAttemptedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , inAppAttemptedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , inAppAttemptedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , inAppAttemptedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , inAppAttemptedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , inAppAttemptedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , inAppAttemptedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , inAppAttemptedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , inAppAttemptedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , inAppAttemptedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , inAppAttemptedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , inAppAttemptedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , inAppAttemptedAllOfDataFailureUnderscoremessage :: Text -- ^ Indicates the reason that an attempted message failed.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON InAppAttemptedAllOfData where
  parseJSON = genericParseJSON optionsInAppAttemptedAllOfData
instance ToJSON InAppAttemptedAllOfData where
  toJSON = genericToJSON optionsInAppAttemptedAllOfData

optionsInAppAttemptedAllOfData :: Options
optionsInAppAttemptedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("inAppAttemptedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("inAppAttemptedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("inAppAttemptedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("inAppAttemptedAllOfDataActionUnderscoreid", "action_id")
      , ("inAppAttemptedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("inAppAttemptedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("inAppAttemptedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("inAppAttemptedAllOfDataIdentifiers", "identifiers")
      , ("inAppAttemptedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("inAppAttemptedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("inAppAttemptedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("inAppAttemptedAllOfDataContentUnderscoreid", "content_id")
      , ("inAppAttemptedAllOfDataFailureUnderscoremessage", "failure_message")
      ]


-- | 
data InAppClicked = InAppClicked
  { inAppClickedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , inAppClickedObjectUnderscoretype :: Text -- ^ The event relates to an in-app message.
  , inAppClickedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , inAppClickedMetric :: Text -- ^ The in-app message recipient clicked/tapped a component in a message with **Track Clicks** enabled. The *Track Clicks* setting is enabled by default for in-app messages. The payload includes a `tracked_response` key containing the *Action Name* of the component the person clicked/tapped. [Learn more about tracked responses and action names](/journeys/tracked-responses).
  , inAppClickedData :: InAppClickedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON InAppClicked where
  parseJSON = genericParseJSON optionsInAppClicked
instance ToJSON InAppClicked where
  toJSON = genericToJSON optionsInAppClicked

optionsInAppClicked :: Options
optionsInAppClicked =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("inAppClickedEventUnderscoreid", "event_id")
      , ("inAppClickedObjectUnderscoretype", "object_type")
      , ("inAppClickedTimestamp", "timestamp")
      , ("inAppClickedMetric", "metric")
      , ("inAppClickedData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data InAppClickedAllOfData = InAppClickedAllOfData
  { inAppClickedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , inAppClickedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , inAppClickedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , inAppClickedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , inAppClickedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , inAppClickedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , inAppClickedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , inAppClickedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , inAppClickedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , inAppClickedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , inAppClickedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , inAppClickedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , inAppClickedAllOfDataTrackedUnderscoreresponse :: Maybe Text -- ^ The *Action Name* of the action a person clicked/tapped in the message. [Learn more about tracked responses and action names](/journeys/tracked-responses).
  , inAppClickedAllOfDataRecipient :: Text -- ^ The ID or email address of the person the message was sent to. This identifier is determined by the settings in your message and the value you use to identify your app's users.
  , inAppClickedAllOfDataHref :: Text -- ^ The URL of the link that a person clicked.
  , inAppClickedAllOfDataLinkUnderscoreid :: Int -- ^ The identifier for the tracked link that a person clicked or tapped.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON InAppClickedAllOfData where
  parseJSON = genericParseJSON optionsInAppClickedAllOfData
instance ToJSON InAppClickedAllOfData where
  toJSON = genericToJSON optionsInAppClickedAllOfData

optionsInAppClickedAllOfData :: Options
optionsInAppClickedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("inAppClickedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("inAppClickedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("inAppClickedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("inAppClickedAllOfDataActionUnderscoreid", "action_id")
      , ("inAppClickedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("inAppClickedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("inAppClickedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("inAppClickedAllOfDataIdentifiers", "identifiers")
      , ("inAppClickedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("inAppClickedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("inAppClickedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("inAppClickedAllOfDataContentUnderscoreid", "content_id")
      , ("inAppClickedAllOfDataTrackedUnderscoreresponse", "tracked_response")
      , ("inAppClickedAllOfDataRecipient", "recipient")
      , ("inAppClickedAllOfDataHref", "href")
      , ("inAppClickedAllOfDataLinkUnderscoreid", "link_id")
      ]


-- | 
data InAppConverted = InAppConverted
  { inAppConvertedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , inAppConvertedObjectUnderscoretype :: Text -- ^ The event relates to an in-app message.
  , inAppConvertedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , inAppConvertedMetric :: Text -- ^ A person matched a conversion goal attributed to an in-app notification.
  , inAppConvertedData :: InAppConvertedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON InAppConverted where
  parseJSON = genericParseJSON optionsInAppConverted
instance ToJSON InAppConverted where
  toJSON = genericToJSON optionsInAppConverted

optionsInAppConverted :: Options
optionsInAppConverted =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("inAppConvertedEventUnderscoreid", "event_id")
      , ("inAppConvertedObjectUnderscoretype", "object_type")
      , ("inAppConvertedTimestamp", "timestamp")
      , ("inAppConvertedMetric", "metric")
      , ("inAppConvertedData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data InAppConvertedAllOfData = InAppConvertedAllOfData
  { inAppConvertedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , inAppConvertedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , inAppConvertedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , inAppConvertedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , inAppConvertedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , inAppConvertedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , inAppConvertedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , inAppConvertedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , inAppConvertedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , inAppConvertedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , inAppConvertedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , inAppConvertedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , inAppConvertedAllOfDataRecipient :: Text -- ^ The ID or email address of the person the message was sent to. This identifier is determined by the settings in your message and the value you use to identify your app's users.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON InAppConvertedAllOfData where
  parseJSON = genericParseJSON optionsInAppConvertedAllOfData
instance ToJSON InAppConvertedAllOfData where
  toJSON = genericToJSON optionsInAppConvertedAllOfData

optionsInAppConvertedAllOfData :: Options
optionsInAppConvertedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("inAppConvertedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("inAppConvertedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("inAppConvertedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("inAppConvertedAllOfDataActionUnderscoreid", "action_id")
      , ("inAppConvertedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("inAppConvertedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("inAppConvertedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("inAppConvertedAllOfDataIdentifiers", "identifiers")
      , ("inAppConvertedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("inAppConvertedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("inAppConvertedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("inAppConvertedAllOfDataContentUnderscoreid", "content_id")
      , ("inAppConvertedAllOfDataRecipient", "recipient")
      ]


-- | 
data InAppDrafted = InAppDrafted
  { inAppDraftedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , inAppDraftedObjectUnderscoretype :: Text -- ^ The event relates to an in-app message.
  , inAppDraftedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , inAppDraftedMetric :: Text -- ^ An in-app message draft was created.
  , inAppDraftedData :: InAppDraftedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON InAppDrafted where
  parseJSON = genericParseJSON optionsInAppDrafted
instance ToJSON InAppDrafted where
  toJSON = genericToJSON optionsInAppDrafted

optionsInAppDrafted :: Options
optionsInAppDrafted =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("inAppDraftedEventUnderscoreid", "event_id")
      , ("inAppDraftedObjectUnderscoretype", "object_type")
      , ("inAppDraftedTimestamp", "timestamp")
      , ("inAppDraftedMetric", "metric")
      , ("inAppDraftedData", "data")
      ]


-- | 
data InAppDraftedAllOfData = InAppDraftedAllOfData
  { inAppDraftedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , inAppDraftedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , inAppDraftedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , inAppDraftedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , inAppDraftedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , inAppDraftedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , inAppDraftedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , inAppDraftedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , inAppDraftedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , inAppDraftedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , inAppDraftedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , inAppDraftedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON InAppDraftedAllOfData where
  parseJSON = genericParseJSON optionsInAppDraftedAllOfData
instance ToJSON InAppDraftedAllOfData where
  toJSON = genericToJSON optionsInAppDraftedAllOfData

optionsInAppDraftedAllOfData :: Options
optionsInAppDraftedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("inAppDraftedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("inAppDraftedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("inAppDraftedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("inAppDraftedAllOfDataActionUnderscoreid", "action_id")
      , ("inAppDraftedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("inAppDraftedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("inAppDraftedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("inAppDraftedAllOfDataIdentifiers", "identifiers")
      , ("inAppDraftedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("inAppDraftedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("inAppDraftedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("inAppDraftedAllOfDataContentUnderscoreid", "content_id")
      ]


-- | Events pertaining to in-app messages.
data InAppEvent = InAppEvent
  { inAppEventEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , inAppEventObjectUnderscoretype :: Text -- ^ The event relates to an in-app message.
  , inAppEventTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , inAppEventMetric :: Text -- ^ A message was undeliverable. Undeliverable messages are messages that have either hit a message limit, come from a newsletter that was cancelled or deleted, or an environment that has delivery disabled (which is something you might do if you’re testing an integration). If you’re not using message limits, you probably won’t see this event.
  , inAppEventData :: WebhookUndeliverableAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON InAppEvent where
  parseJSON = genericParseJSON optionsInAppEvent
instance ToJSON InAppEvent where
  toJSON = genericToJSON optionsInAppEvent

optionsInAppEvent :: Options
optionsInAppEvent =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("inAppEventEventUnderscoreid", "event_id")
      , ("inAppEventObjectUnderscoretype", "object_type")
      , ("inAppEventTimestamp", "timestamp")
      , ("inAppEventMetric", "metric")
      , ("inAppEventData", "data")
      ]


-- | 
data InAppEventCommon = InAppEventCommon
  { inAppEventCommonEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , inAppEventCommonObjectUnderscoretype :: Text -- ^ The event relates to an in-app message.
  , inAppEventCommonTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON InAppEventCommon where
  parseJSON = genericParseJSON optionsInAppEventCommon
instance ToJSON InAppEventCommon where
  toJSON = genericToJSON optionsInAppEventCommon

optionsInAppEventCommon :: Options
optionsInAppEventCommon =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("inAppEventCommonEventUnderscoreid", "event_id")
      , ("inAppEventCommonObjectUnderscoretype", "object_type")
      , ("inAppEventCommonTimestamp", "timestamp")
      ]


-- | 
data InAppFailed = InAppFailed
  { inAppFailedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , inAppFailedObjectUnderscoretype :: Text -- ^ The event relates to an in-app message.
  , inAppFailedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , inAppFailedMetric :: Text -- ^ An in-app message failed to send.
  , inAppFailedData :: InAppFailedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON InAppFailed where
  parseJSON = genericParseJSON optionsInAppFailed
instance ToJSON InAppFailed where
  toJSON = genericToJSON optionsInAppFailed

optionsInAppFailed :: Options
optionsInAppFailed =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("inAppFailedEventUnderscoreid", "event_id")
      , ("inAppFailedObjectUnderscoretype", "object_type")
      , ("inAppFailedTimestamp", "timestamp")
      , ("inAppFailedMetric", "metric")
      , ("inAppFailedData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data InAppFailedAllOfData = InAppFailedAllOfData
  { inAppFailedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , inAppFailedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , inAppFailedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , inAppFailedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , inAppFailedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , inAppFailedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , inAppFailedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , inAppFailedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , inAppFailedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , inAppFailedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , inAppFailedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , inAppFailedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , inAppFailedAllOfDataFailureUnderscoremessage :: Text -- ^ Indicates the reason that an attempted message failed.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON InAppFailedAllOfData where
  parseJSON = genericParseJSON optionsInAppFailedAllOfData
instance ToJSON InAppFailedAllOfData where
  toJSON = genericToJSON optionsInAppFailedAllOfData

optionsInAppFailedAllOfData :: Options
optionsInAppFailedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("inAppFailedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("inAppFailedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("inAppFailedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("inAppFailedAllOfDataActionUnderscoreid", "action_id")
      , ("inAppFailedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("inAppFailedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("inAppFailedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("inAppFailedAllOfDataIdentifiers", "identifiers")
      , ("inAppFailedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("inAppFailedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("inAppFailedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("inAppFailedAllOfDataContentUnderscoreid", "content_id")
      , ("inAppFailedAllOfDataFailureUnderscoremessage", "failure_message")
      ]


-- | Event object passed to the listener function when user performs an action in the in-app message.
data InAppMessageActionEvent = InAppMessageActionEvent
  { inAppMessageActionEventType :: Maybe Text -- ^ Defines the event type.
  , inAppMessageActionEventDetail :: Maybe InAppMessageActionEventDetail -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON InAppMessageActionEvent where
  parseJSON = genericParseJSON optionsInAppMessageActionEvent
instance ToJSON InAppMessageActionEvent where
  toJSON = genericToJSON optionsInAppMessageActionEvent

optionsInAppMessageActionEvent :: Options
optionsInAppMessageActionEvent =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("inAppMessageActionEventType", "type")
      , ("inAppMessageActionEventDetail", "detail")
      ]


-- | 
data InAppMessageActionEventDetail = InAppMessageActionEventDetail
  { inAppMessageActionEventDetailMessageId :: Maybe Text -- ^ Identifier string of the in-app message.
  , inAppMessageActionEventDetailDeliveryId :: Maybe Text -- ^ Delivery Id for the corresponding in-app message (not present in test message).
  , inAppMessageActionEventDetailActionName :: Maybe Text -- ^ The name of the action specified when building the in-app message.
  , inAppMessageActionEventDetailActionValue :: Maybe Text -- ^ The type of action that triggered the event.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON InAppMessageActionEventDetail where
  parseJSON = genericParseJSON optionsInAppMessageActionEventDetail
instance ToJSON InAppMessageActionEventDetail where
  toJSON = genericToJSON optionsInAppMessageActionEventDetail

optionsInAppMessageActionEventDetail :: Options
optionsInAppMessageActionEventDetail =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("inAppMessageActionEventDetailMessageId", "messageId")
      , ("inAppMessageActionEventDetailDeliveryId", "deliveryId")
      , ("inAppMessageActionEventDetailActionName", "actionName")
      , ("inAppMessageActionEventDetailActionValue", "actionValue")
      ]


-- | Event object passed to the listener function when user dismisses an in-app message.
data InAppMessageDismissedEvent = InAppMessageDismissedEvent
  { inAppMessageDismissedEventType :: Maybe Text -- ^ Defines the event type.
  , inAppMessageDismissedEventDetail :: Maybe InAppMessageOpenedEventDetail -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON InAppMessageDismissedEvent where
  parseJSON = genericParseJSON optionsInAppMessageDismissedEvent
instance ToJSON InAppMessageDismissedEvent where
  toJSON = genericToJSON optionsInAppMessageDismissedEvent

optionsInAppMessageDismissedEvent :: Options
optionsInAppMessageDismissedEvent =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("inAppMessageDismissedEventType", "type")
      , ("inAppMessageDismissedEventDetail", "detail")
      ]


-- | Event object passed to the listener function when an error occurs.
data InAppMessageErrorEvent = InAppMessageErrorEvent
  { inAppMessageErrorEventType :: Maybe Text -- ^ Defines the event type.
  , inAppMessageErrorEventDetail :: Maybe InAppMessageOpenedEventDetail -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON InAppMessageErrorEvent where
  parseJSON = genericParseJSON optionsInAppMessageErrorEvent
instance ToJSON InAppMessageErrorEvent where
  toJSON = genericToJSON optionsInAppMessageErrorEvent

optionsInAppMessageErrorEvent :: Options
optionsInAppMessageErrorEvent =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("inAppMessageErrorEventType", "type")
      , ("inAppMessageErrorEventDetail", "detail")
      ]


-- | An object containing message specific data depending on the event type.
data InAppMessageEventDetail = InAppMessageEventDetail
  { inAppMessageEventDetailMessageId :: Maybe Text -- ^ Identifier string of the in-app message.
  , inAppMessageEventDetailDeliveryId :: Maybe Text -- ^ Delivery Id for the corresponding in-app message (not present in test message).
  } deriving (Show, Eq, Generic, Data)

instance FromJSON InAppMessageEventDetail where
  parseJSON = genericParseJSON optionsInAppMessageEventDetail
instance ToJSON InAppMessageEventDetail where
  toJSON = genericToJSON optionsInAppMessageEventDetail

optionsInAppMessageEventDetail :: Options
optionsInAppMessageEventDetail =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("inAppMessageEventDetailMessageId", "messageId")
      , ("inAppMessageEventDetailDeliveryId", "deliveryId")
      ]


-- | Event object passed to the listener function when user is shown an in-app message.
data InAppMessageOpenedEvent = InAppMessageOpenedEvent
  { inAppMessageOpenedEventType :: Maybe Text -- ^ Defines the event type.
  , inAppMessageOpenedEventDetail :: Maybe InAppMessageOpenedEventDetail -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON InAppMessageOpenedEvent where
  parseJSON = genericParseJSON optionsInAppMessageOpenedEvent
instance ToJSON InAppMessageOpenedEvent where
  toJSON = genericToJSON optionsInAppMessageOpenedEvent

optionsInAppMessageOpenedEvent :: Options
optionsInAppMessageOpenedEvent =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("inAppMessageOpenedEventType", "type")
      , ("inAppMessageOpenedEventDetail", "detail")
      ]


-- | An object containing message specific data depending on the event type.
data InAppMessageOpenedEventDetail = InAppMessageOpenedEventDetail
  { inAppMessageOpenedEventDetailMessageId :: Maybe Text -- ^ Identifier string of the in-app message.
  , inAppMessageOpenedEventDetailDeliveryId :: Maybe Text -- ^ Delivery Id for the corresponding in-app message (not present in test message).
  } deriving (Show, Eq, Generic, Data)

instance FromJSON InAppMessageOpenedEventDetail where
  parseJSON = genericParseJSON optionsInAppMessageOpenedEventDetail
instance ToJSON InAppMessageOpenedEventDetail where
  toJSON = genericToJSON optionsInAppMessageOpenedEventDetail

optionsInAppMessageOpenedEventDetail :: Options
optionsInAppMessageOpenedEventDetail =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("inAppMessageOpenedEventDetailMessageId", "messageId")
      , ("inAppMessageOpenedEventDetailDeliveryId", "deliveryId")
      ]


-- | Events pertaining to in-app messages.
data InAppMessages = InAppMessages
  { inAppMessagesEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , inAppMessagesObjectUnderscoretype :: Text -- ^ The event relates to an in-app message.
  , inAppMessagesTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , inAppMessagesMetric :: Text -- ^ A message was undeliverable. Undeliverable messages are messages that have either hit a message limit, come from a newsletter that was cancelled or deleted, or an environment that has delivery disabled (which is something you might do if you’re testing an integration). If you’re not using message limits, you probably won’t see this event.
  , inAppMessagesData :: Attempted2AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON InAppMessages where
  parseJSON = genericParseJSON optionsInAppMessages
instance ToJSON InAppMessages where
  toJSON = genericToJSON optionsInAppMessages

optionsInAppMessages :: Options
optionsInAppMessages =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("inAppMessagesEventUnderscoreid", "event_id")
      , ("inAppMessagesObjectUnderscoretype", "object_type")
      , ("inAppMessagesTimestamp", "timestamp")
      , ("inAppMessagesMetric", "metric")
      , ("inAppMessagesData", "data")
      ]


-- | 
data InAppOpened = InAppOpened
  { inAppOpenedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , inAppOpenedObjectUnderscoretype :: Text -- ^ The event relates to an in-app message.
  , inAppOpenedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , inAppOpenedMetric :: Text -- ^ A device opened an in-app message. Because messages appear automatically when a person opens your app (to the right page if using page rules), \"opened\" is essentially an \"impression\"—a person saw your message.
  , inAppOpenedData :: InAppOpenedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON InAppOpened where
  parseJSON = genericParseJSON optionsInAppOpened
instance ToJSON InAppOpened where
  toJSON = genericToJSON optionsInAppOpened

optionsInAppOpened :: Options
optionsInAppOpened =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("inAppOpenedEventUnderscoreid", "event_id")
      , ("inAppOpenedObjectUnderscoretype", "object_type")
      , ("inAppOpenedTimestamp", "timestamp")
      , ("inAppOpenedMetric", "metric")
      , ("inAppOpenedData", "data")
      ]


-- | 
data InAppOpenedAllOfData = InAppOpenedAllOfData
  { inAppOpenedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , inAppOpenedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , inAppOpenedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , inAppOpenedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , inAppOpenedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , inAppOpenedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , inAppOpenedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , inAppOpenedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , inAppOpenedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , inAppOpenedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , inAppOpenedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , inAppOpenedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON InAppOpenedAllOfData where
  parseJSON = genericParseJSON optionsInAppOpenedAllOfData
instance ToJSON InAppOpenedAllOfData where
  toJSON = genericToJSON optionsInAppOpenedAllOfData

optionsInAppOpenedAllOfData :: Options
optionsInAppOpenedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("inAppOpenedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("inAppOpenedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("inAppOpenedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("inAppOpenedAllOfDataActionUnderscoreid", "action_id")
      , ("inAppOpenedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("inAppOpenedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("inAppOpenedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("inAppOpenedAllOfDataIdentifiers", "identifiers")
      , ("inAppOpenedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("inAppOpenedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("inAppOpenedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("inAppOpenedAllOfDataContentUnderscoreid", "content_id")
      ]


-- | 
data InAppSent = InAppSent
  { inAppSentEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , inAppSentObjectUnderscoretype :: Text -- ^ The event relates to an in-app message.
  , inAppSentTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , inAppSentMetric :: Text -- ^ An in-app message was sent from Customer.io. Because in-app messages are only delivered when a person's app is open, there may be a significant delay between when a message is sent and when it's \"opened\". If you enabled the *Body Content* option with your webhook, the payload includes the `content` of your message.
  , inAppSentData :: InAppSentAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON InAppSent where
  parseJSON = genericParseJSON optionsInAppSent
instance ToJSON InAppSent where
  toJSON = genericToJSON optionsInAppSent

optionsInAppSent :: Options
optionsInAppSent =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("inAppSentEventUnderscoreid", "event_id")
      , ("inAppSentObjectUnderscoretype", "object_type")
      , ("inAppSentTimestamp", "timestamp")
      , ("inAppSentMetric", "metric")
      , ("inAppSentData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data InAppSentAllOfData = InAppSentAllOfData
  { inAppSentAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , inAppSentAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , inAppSentAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , inAppSentAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , inAppSentAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , inAppSentAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , inAppSentAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , inAppSentAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , inAppSentAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , inAppSentAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , inAppSentAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , inAppSentAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , inAppSentAllOfDataContent :: Maybe Text -- ^ The body of your message. This key only appears if you enabled the *Body Content* option when setting up your webhook.
  , inAppSentAllOfDataRecipient :: Text -- ^ The ID or email address of the person the message was sent to. This identifier is determined by the settings in your message and the value you use to identify your app's users.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON InAppSentAllOfData where
  parseJSON = genericParseJSON optionsInAppSentAllOfData
instance ToJSON InAppSentAllOfData where
  toJSON = genericToJSON optionsInAppSentAllOfData

optionsInAppSentAllOfData :: Options
optionsInAppSentAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("inAppSentAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("inAppSentAllOfDataCustomerUnderscoreid", "customer_id")
      , ("inAppSentAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("inAppSentAllOfDataActionUnderscoreid", "action_id")
      , ("inAppSentAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("inAppSentAllOfDataJourneyUnderscoreid", "journey_id")
      , ("inAppSentAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("inAppSentAllOfDataIdentifiers", "identifiers")
      , ("inAppSentAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("inAppSentAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("inAppSentAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("inAppSentAllOfDataContentUnderscoreid", "content_id")
      , ("inAppSentAllOfDataContent", "content")
      , ("inAppSentAllOfDataRecipient", "recipient")
      ]


-- | 
data InAppUndeliverable = InAppUndeliverable
  { inAppUndeliverableEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , inAppUndeliverableObjectUnderscoretype :: Text -- ^ The event relates to an in-app message.
  , inAppUndeliverableTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , inAppUndeliverableMetric :: Text -- ^ A message was undeliverable. Undeliverable messages are messages that have either hit a message limit, come from a newsletter that was cancelled or deleted, or an environment that has delivery disabled (which is something you might do if you’re testing an integration). If you’re not using message limits, you probably won’t see this event.
  , inAppUndeliverableData :: InAppUndeliverableAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON InAppUndeliverable where
  parseJSON = genericParseJSON optionsInAppUndeliverable
instance ToJSON InAppUndeliverable where
  toJSON = genericToJSON optionsInAppUndeliverable

optionsInAppUndeliverable :: Options
optionsInAppUndeliverable =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("inAppUndeliverableEventUnderscoreid", "event_id")
      , ("inAppUndeliverableObjectUnderscoretype", "object_type")
      , ("inAppUndeliverableTimestamp", "timestamp")
      , ("inAppUndeliverableMetric", "metric")
      , ("inAppUndeliverableData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data InAppUndeliverableAllOfData = InAppUndeliverableAllOfData
  { inAppUndeliverableAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , inAppUndeliverableAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , inAppUndeliverableAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , inAppUndeliverableAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , inAppUndeliverableAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , inAppUndeliverableAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , inAppUndeliverableAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , inAppUndeliverableAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , inAppUndeliverableAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , inAppUndeliverableAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , inAppUndeliverableAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , inAppUndeliverableAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , inAppUndeliverableAllOfDataFailureUnderscoremessage :: Text -- ^ Indicates the reason that an attempted message failed.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON InAppUndeliverableAllOfData where
  parseJSON = genericParseJSON optionsInAppUndeliverableAllOfData
instance ToJSON InAppUndeliverableAllOfData where
  toJSON = genericToJSON optionsInAppUndeliverableAllOfData

optionsInAppUndeliverableAllOfData :: Options
optionsInAppUndeliverableAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("inAppUndeliverableAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("inAppUndeliverableAllOfDataCustomerUnderscoreid", "customer_id")
      , ("inAppUndeliverableAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("inAppUndeliverableAllOfDataActionUnderscoreid", "action_id")
      , ("inAppUndeliverableAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("inAppUndeliverableAllOfDataJourneyUnderscoreid", "journey_id")
      , ("inAppUndeliverableAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("inAppUndeliverableAllOfDataIdentifiers", "identifiers")
      , ("inAppUndeliverableAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("inAppUndeliverableAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("inAppUndeliverableAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("inAppUndeliverableAllOfDataContentUnderscoreid", "content_id")
      , ("inAppUndeliverableAllOfDataFailureUnderscoremessage", "failure_message")
      ]


-- | Your payload changes depending on whether you send to iOS devices through Google&#39;s Firebase Cloud Messaging (FCM) or Apple&#39;s Push Notification service (APNs).
data IosFcmAndApns = IosFcmAndApns
  { iosFcmAndApnsMessage :: FCMMessage -- ^ 
  , iosFcmAndApnsCIO :: Maybe APNSCIO -- ^ 
  , iosFcmAndApnsAps :: Maybe FCMMessageApnsPayloadAps -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON IosFcmAndApns where
  parseJSON = genericParseJSON optionsIosFcmAndApns
instance ToJSON IosFcmAndApns where
  toJSON = genericToJSON optionsIosFcmAndApns

optionsIosFcmAndApns :: Options
optionsIosFcmAndApns =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("iosFcmAndApnsMessage", "message")
      , ("iosFcmAndApnsCIO", "CIO")
      , ("iosFcmAndApnsAps", "aps")
      ]


-- | A push payload intended for an iOS device.
data IosSharedOptions = IosSharedOptions
  { iosSharedOptionsAlert :: Maybe FCMMessageApnsPayloadApsAlert -- ^ 
  , iosSharedOptionsBadge :: Maybe Int -- ^ The number you want to display on your app's icon. Set to 0 to remove the current badge, if any.
  , iosSharedOptionsSound :: Maybe FCMMessageApnsPayloadApsSound -- ^ 
  , iosSharedOptionsThreadDashid :: Maybe Text -- ^ An identifier to group related notifications.
  , iosSharedOptionsCategory :: Maybe Text -- ^ The notification’s type. This string must correspond to the identifier of one of the `UNNotificationCategory` objects you register at launch time.
  , iosSharedOptionsContentDashavailable :: Maybe Int -- ^ The background notification flag. Use `1` without an `alert` to perform a silent update. `0` indicates a normal push notification.
  , iosSharedOptionsMutableDashcontent :: Maybe Int -- ^ If you use the Customer.io SDK, you *must* set this value to `1` to support images and \"delivered\" metrics from your push notifications. When the value is 1, your notification is passed to your notification service app extension before delivery. Use your extension to modify the notification’s content. 
  , iosSharedOptionsTargetDashcontentDashid :: Maybe Text -- ^ The identifier of the window brought forward.
  , iosSharedOptionsInterruptionDashlevel :: Maybe Text -- ^ Indicates the importance and delivery timing of a notification.
  , iosSharedOptionsRelevanceDashscore :: Maybe Double -- ^ A number between 0 and 1. The highest score is considered the \"most relevant\"  and is featured in the notification summary.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON IosSharedOptions where
  parseJSON = genericParseJSON optionsIosSharedOptions
instance ToJSON IosSharedOptions where
  toJSON = genericToJSON optionsIosSharedOptions

optionsIosSharedOptions :: Options
optionsIosSharedOptions =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("iosSharedOptionsAlert", "alert")
      , ("iosSharedOptionsBadge", "badge")
      , ("iosSharedOptionsSound", "sound")
      , ("iosSharedOptionsThreadDashid", "thread-id")
      , ("iosSharedOptionsCategory", "category")
      , ("iosSharedOptionsContentDashavailable", "content-available")
      , ("iosSharedOptionsMutableDashcontent", "mutable-content")
      , ("iosSharedOptionsTargetDashcontentDashid", "target-content-id")
      , ("iosSharedOptionsInterruptionDashlevel", "interruption-level")
      , ("iosSharedOptionsRelevanceDashscore", "relevance-score")
      ]


-- | 
data LinkMetrics = LinkMetrics
  { linkMetricsLink :: Maybe BroadcastLinks200ResponseLinksInnerLink -- ^ 
  , linkMetricsMetric :: Maybe BroadcastLinks200ResponseLinksInnerMetric -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON LinkMetrics where
  parseJSON = genericParseJSON optionsLinkMetrics
instance ToJSON LinkMetrics where
  toJSON = genericToJSON optionsLinkMetrics

optionsLinkMetrics :: Options
optionsLinkMetrics =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("linkMetricsLink", "link")
      , ("linkMetricsMetric", "metric")
      ]


-- | 
data ListActivities200Response = ListActivities200Response
  { listActivities200ResponseActivities :: Maybe [ListActivities200ResponseActivitiesInner] -- ^ 
  , listActivities200ResponseNext :: Maybe Text -- ^ Indicates the next page of results. Add `?start=<next_value>` to the request to get the next page of results.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ListActivities200Response where
  parseJSON = genericParseJSON optionsListActivities200Response
instance ToJSON ListActivities200Response where
  toJSON = genericToJSON optionsListActivities200Response

optionsListActivities200Response :: Options
optionsListActivities200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("listActivities200ResponseActivities", "activities")
      , ("listActivities200ResponseNext", "next")
      ]


-- | 
data ListActivities200ResponseActivitiesInner = ListActivities200ResponseActivitiesInner
  { listActivities200ResponseActivitiesInnerCustomerUnderscoreid :: Maybe Text -- ^ The ID of a customer profile, analogous to a \"person\" in the UI. If your workspace supports multiple identifiers (email and ID), this value can be null.
  , listActivities200ResponseActivitiesInnerCustomerUnderscoreidentifiers :: Maybe ListActivities200ResponseActivitiesInnerCustomerIdentifiers -- ^ 
  , listActivities200ResponseActivitiesInnerData :: Maybe ListActivities200ResponseActivitiesInnerData -- ^ 
  , listActivities200ResponseActivitiesInnerDeliveryUnderscoreid :: Maybe Text -- ^ The message ID.
  , listActivities200ResponseActivitiesInnerDeliveryUnderscoretype :: Maybe Text -- ^ The recipient device, if applicable.
  , listActivities200ResponseActivitiesInnerId :: Maybe Text -- ^ The identifier for the action.
  , listActivities200ResponseActivitiesInnerTimestamp :: Maybe Int -- ^ The date and time when the action occurred.
  , listActivities200ResponseActivitiesInnerType :: Maybe Text -- ^ The type of activity. Types with `_o:<object_type_id>` are for objects and types with `_r:<object_type_id>` are for relationships.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ListActivities200ResponseActivitiesInner where
  parseJSON = genericParseJSON optionsListActivities200ResponseActivitiesInner
instance ToJSON ListActivities200ResponseActivitiesInner where
  toJSON = genericToJSON optionsListActivities200ResponseActivitiesInner

optionsListActivities200ResponseActivitiesInner :: Options
optionsListActivities200ResponseActivitiesInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("listActivities200ResponseActivitiesInnerCustomerUnderscoreid", "customer_id")
      , ("listActivities200ResponseActivitiesInnerCustomerUnderscoreidentifiers", "customer_identifiers")
      , ("listActivities200ResponseActivitiesInnerData", "data")
      , ("listActivities200ResponseActivitiesInnerDeliveryUnderscoreid", "delivery_id")
      , ("listActivities200ResponseActivitiesInnerDeliveryUnderscoretype", "delivery_type")
      , ("listActivities200ResponseActivitiesInnerId", "id")
      , ("listActivities200ResponseActivitiesInnerTimestamp", "timestamp")
      , ("listActivities200ResponseActivitiesInnerType", "type")
      ]


-- | Contains identifiers for the person represented in a response—&#x60;id&#x60;, &#x60;cio_id&#x60;, and &#x60;email&#x60; (if your workspace uses the *Email or ID* setting). If the person&#39;s &#x60;id&#x60; or &#x60;email&#x60; is not set, the value will be null.  We recommend that you use this object rather than the less descriptive &#x60;customer_id&#x60;. 
data ListActivities200ResponseActivitiesInnerCustomerIdentifiers = ListActivities200ResponseActivitiesInnerCustomerIdentifiers
  { listActivities200ResponseActivitiesInnerCustomerIdentifiersEmail :: Text -- ^ A person's email address, if set.
  , listActivities200ResponseActivitiesInnerCustomerIdentifiersId :: Text -- ^ A person's unique ID, if set. This is the same as the `customer_id` if present.
  , listActivities200ResponseActivitiesInnerCustomerIdentifiersCioUnderscoreid :: Text -- ^ A unique identifier set by Customer.io, used to reference a person if you want to update their identifiers.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ListActivities200ResponseActivitiesInnerCustomerIdentifiers where
  parseJSON = genericParseJSON optionsListActivities200ResponseActivitiesInnerCustomerIdentifiers
instance ToJSON ListActivities200ResponseActivitiesInnerCustomerIdentifiers where
  toJSON = genericToJSON optionsListActivities200ResponseActivitiesInnerCustomerIdentifiers

optionsListActivities200ResponseActivitiesInnerCustomerIdentifiers :: Options
optionsListActivities200ResponseActivitiesInnerCustomerIdentifiers =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("listActivities200ResponseActivitiesInnerCustomerIdentifiersEmail", "email")
      , ("listActivities200ResponseActivitiesInnerCustomerIdentifiersId", "id")
      , ("listActivities200ResponseActivitiesInnerCustomerIdentifiersCioUnderscoreid", "cio_id")
      ]


-- | 
data ListActivities200ResponseActivitiesInnerData = ListActivities200ResponseActivitiesInnerData
  { listActivities200ResponseActivitiesInnerDataDelivered :: Maybe Int -- ^ The date-time when the message was delivered, if applicable.
  , listActivities200ResponseActivitiesInnerDataDeliveryUnderscoreid :: Maybe Text -- ^ The message ID.
  , listActivities200ResponseActivitiesInnerDataOpened :: Maybe Bool -- ^ Indicates whether or not a customer opened a message, if the message was delivered.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ListActivities200ResponseActivitiesInnerData where
  parseJSON = genericParseJSON optionsListActivities200ResponseActivitiesInnerData
instance ToJSON ListActivities200ResponseActivitiesInnerData where
  toJSON = genericToJSON optionsListActivities200ResponseActivitiesInnerData

optionsListActivities200ResponseActivitiesInnerData :: Options
optionsListActivities200ResponseActivitiesInnerData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("listActivities200ResponseActivitiesInnerDataDelivered", "delivered")
      , ("listActivities200ResponseActivitiesInnerDataDeliveryUnderscoreid", "delivery_id")
      , ("listActivities200ResponseActivitiesInnerDataOpened", "opened")
      ]


-- | 
data ListBroadcastTriggers200Response = ListBroadcastTriggers200Response
  { listBroadcastTriggers200ResponseTriggers :: Maybe [BroadcastStatus200Response] -- ^ Each object in the array represents a time that your broadcast was triggered/sent.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ListBroadcastTriggers200Response where
  parseJSON = genericParseJSON optionsListBroadcastTriggers200Response
instance ToJSON ListBroadcastTriggers200Response where
  toJSON = genericToJSON optionsListBroadcastTriggers200Response

optionsListBroadcastTriggers200Response :: Options
optionsListBroadcastTriggers200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("listBroadcastTriggers200ResponseTriggers", "triggers")
      ]


-- | 
data ListBroadcasts200Response = ListBroadcasts200Response
  { listBroadcasts200ResponseBroadcasts :: Maybe [ListBroadcasts200ResponseBroadcastsInner] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ListBroadcasts200Response where
  parseJSON = genericParseJSON optionsListBroadcasts200Response
instance ToJSON ListBroadcasts200Response where
  toJSON = genericToJSON optionsListBroadcasts200Response

optionsListBroadcasts200Response :: Options
optionsListBroadcasts200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("listBroadcasts200ResponseBroadcasts", "broadcasts")
      ]


-- | 
data ListBroadcasts200ResponseBroadcastsInner = ListBroadcasts200ResponseBroadcastsInner
  { listBroadcasts200ResponseBroadcastsInnerId :: Maybe Int -- ^ The identifier for a broadcast.
  , listBroadcasts200ResponseBroadcastsInnerDeduplicateUnderscoreid :: Maybe Text -- ^ An identifier in the format `id:timestamp` where the id is the id of the object you are working with (Campaigns, Deliveries, Exports, Identities, Newsletters, Segments, and Templates), and the timestamp is the last time the object was updated.
  , listBroadcasts200ResponseBroadcastsInnerName :: Maybe Text -- ^ The name of the broadcast.
  , listBroadcasts200ResponseBroadcastsInnerType :: Maybe Text -- ^ The type of broadcast.
  , listBroadcasts200ResponseBroadcastsInnerCreated :: Maybe Int -- ^ The date time when the referenced ID was created.
  , listBroadcasts200ResponseBroadcastsInnerUpdated :: Maybe Int -- ^ The date time when the referenced ID was last updated.
  , listBroadcasts200ResponseBroadcastsInnerActive :: Maybe Bool -- ^ If true, the broadcast is active.
  , listBroadcasts200ResponseBroadcastsInnerState :: Maybe Text -- ^ The state of the broadcast.
  , listBroadcasts200ResponseBroadcastsInnerActions :: Maybe [ListBroadcasts200ResponseBroadcastsInnerActionsInner] -- ^ A list of actions used by the broadcast.
  , listBroadcasts200ResponseBroadcastsInnerMsgUnderscoretemplateUnderscoreids :: Maybe [ListBroadcasts200ResponseBroadcastsInnerMsgTemplateIdsInner] -- ^ Indicates the message template(s) used in this broadcast.
  , listBroadcasts200ResponseBroadcastsInnerFirstUnderscorestarted :: Maybe Int -- ^ The date and time when you activated the broadcast.
  , listBroadcasts200ResponseBroadcastsInnerTags :: Maybe [Text] -- ^ An array of tags you set on this broadcast.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ListBroadcasts200ResponseBroadcastsInner where
  parseJSON = genericParseJSON optionsListBroadcasts200ResponseBroadcastsInner
instance ToJSON ListBroadcasts200ResponseBroadcastsInner where
  toJSON = genericToJSON optionsListBroadcasts200ResponseBroadcastsInner

optionsListBroadcasts200ResponseBroadcastsInner :: Options
optionsListBroadcasts200ResponseBroadcastsInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("listBroadcasts200ResponseBroadcastsInnerId", "id")
      , ("listBroadcasts200ResponseBroadcastsInnerDeduplicateUnderscoreid", "deduplicate_id")
      , ("listBroadcasts200ResponseBroadcastsInnerName", "name")
      , ("listBroadcasts200ResponseBroadcastsInnerType", "type")
      , ("listBroadcasts200ResponseBroadcastsInnerCreated", "created")
      , ("listBroadcasts200ResponseBroadcastsInnerUpdated", "updated")
      , ("listBroadcasts200ResponseBroadcastsInnerActive", "active")
      , ("listBroadcasts200ResponseBroadcastsInnerState", "state")
      , ("listBroadcasts200ResponseBroadcastsInnerActions", "actions")
      , ("listBroadcasts200ResponseBroadcastsInnerMsgUnderscoretemplateUnderscoreids", "msg_template_ids")
      , ("listBroadcasts200ResponseBroadcastsInnerFirstUnderscorestarted", "first_started")
      , ("listBroadcasts200ResponseBroadcastsInnerTags", "tags")
      ]


-- | 
data ListBroadcasts200ResponseBroadcastsInnerActionsInner = ListBroadcasts200ResponseBroadcastsInnerActionsInner
  { listBroadcasts200ResponseBroadcastsInnerActionsInnerId :: Maybe Int -- ^ The identifier for the action.
  , listBroadcasts200ResponseBroadcastsInnerActionsInnerType :: Maybe Text -- ^ The type of action.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ListBroadcasts200ResponseBroadcastsInnerActionsInner where
  parseJSON = genericParseJSON optionsListBroadcasts200ResponseBroadcastsInnerActionsInner
instance ToJSON ListBroadcasts200ResponseBroadcastsInnerActionsInner where
  toJSON = genericToJSON optionsListBroadcasts200ResponseBroadcastsInnerActionsInner

optionsListBroadcasts200ResponseBroadcastsInnerActionsInner :: Options
optionsListBroadcasts200ResponseBroadcastsInnerActionsInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("listBroadcasts200ResponseBroadcastsInnerActionsInnerId", "id")
      , ("listBroadcasts200ResponseBroadcastsInnerActionsInnerType", "type")
      ]


-- | 
data ListBroadcasts200ResponseBroadcastsInnerMsgTemplateIdsInner = ListBroadcasts200ResponseBroadcastsInnerMsgTemplateIdsInner
  { listBroadcasts200ResponseBroadcastsInnerMsgTemplateIdsInnerId :: Maybe Int -- ^ The identifier for the template.
  , listBroadcasts200ResponseBroadcastsInnerMsgTemplateIdsInnerType :: Maybe Text -- ^ The type of template.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ListBroadcasts200ResponseBroadcastsInnerMsgTemplateIdsInner where
  parseJSON = genericParseJSON optionsListBroadcasts200ResponseBroadcastsInnerMsgTemplateIdsInner
instance ToJSON ListBroadcasts200ResponseBroadcastsInnerMsgTemplateIdsInner where
  toJSON = genericToJSON optionsListBroadcasts200ResponseBroadcastsInnerMsgTemplateIdsInner

optionsListBroadcasts200ResponseBroadcastsInnerMsgTemplateIdsInner :: Options
optionsListBroadcasts200ResponseBroadcastsInnerMsgTemplateIdsInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("listBroadcasts200ResponseBroadcastsInnerMsgTemplateIdsInnerId", "id")
      , ("listBroadcasts200ResponseBroadcastsInnerMsgTemplateIdsInnerType", "type")
      ]


-- | 
data ListCampaignActions200Response = ListCampaignActions200Response
  { listCampaignActions200ResponseActions :: Maybe [ListCampaignActions200ResponseActionsInner] -- ^ Each object in the array represents an action in your campaign.
  , listCampaignActions200ResponseNext :: Maybe Text -- ^ Indicates the next page of results. Add `?start=<next_value>` to the request to get the next page of results.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ListCampaignActions200Response where
  parseJSON = genericParseJSON optionsListCampaignActions200Response
instance ToJSON ListCampaignActions200Response where
  toJSON = genericToJSON optionsListCampaignActions200Response

optionsListCampaignActions200Response :: Options
optionsListCampaignActions200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("listCampaignActions200ResponseActions", "actions")
      , ("listCampaignActions200ResponseNext", "next")
      ]


-- | 
data ListCampaignActions200ResponseActionsInner = ListCampaignActions200ResponseActionsInner
  { listCampaignActions200ResponseActionsInnerId :: Maybe Int -- ^ The identifier for an action.
  , listCampaignActions200ResponseActionsInnerCampaignUnderscoreid :: Maybe Int -- ^ The identifier for a campaign.
  , listCampaignActions200ResponseActionsInnerParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , listCampaignActions200ResponseActionsInnerDeduplicateUnderscoreid :: Maybe Text -- ^ An identifier in the format `id:timestamp` where the id is the id of the object you are working with (Campaigns, Deliveries, Exports, Identities, Newsletters, Segments, and Templates), and the timestamp is the last time the object was updated.
  , listCampaignActions200ResponseActionsInnerName :: Maybe Text -- ^ The name of the action, if it exists.
  , listCampaignActions200ResponseActionsInnerLayout :: Maybe Text -- ^ The layout used for the action, if it exists.
  , listCampaignActions200ResponseActionsInnerCreated :: Maybe Int -- ^ The date time when the referenced ID was created.
  , listCampaignActions200ResponseActionsInnerUpdated :: Maybe Int -- ^ The date time when the referenced ID was last updated.
  , listCampaignActions200ResponseActionsInnerBody :: Maybe Text -- ^ The payload for your webhook.
  , listCampaignActions200ResponseActionsInnerBodyUnderscoreamp :: Maybe Text -- ^ If your message is an email, this is the AMP-enabled body of your message. If your recipient's email client doesn't support AMP, the `body` represents your fallback message.
  , listCampaignActions200ResponseActionsInnerLanguage :: Maybe Text -- ^ The language variant for your message. If you don't use our [localization feature](/localization), or this is the default message, this value is an empty string.
  , listCampaignActions200ResponseActionsInnerType :: Maybe Text -- ^ The type of action.
  , listCampaignActions200ResponseActionsInnerSendingUnderscorestate :: Maybe Text -- ^ Determines the sending behavior for the action. `automatic` sends the action automatically when triggered; `draft` queues drafts when the action is triggered; or `off` to disable the action.
  , listCampaignActions200ResponseActionsInnerFrom :: Maybe Text -- ^ The address that the message is from, relevant if the action `type` is `email`.
  , listCampaignActions200ResponseActionsInnerFromUnderscoreid :: Maybe Int -- ^ The identifier of the `from` address, commonly known as the \"sender\". You can [list your sender identities](#operation/listSenders) to match the ID to a specific address.
  , listCampaignActions200ResponseActionsInnerReplyUnderscoreto :: Maybe Text -- ^ The address that receives replies for the message, if applicable.
  , listCampaignActions200ResponseActionsInnerReplyUnderscoretoUnderscoreid :: Maybe Int -- ^ The identifier for the `reply_to` address, if applicable. You can [list your sender identities](#operation/listSenders) to match the ID to a specific address.
  , listCampaignActions200ResponseActionsInnerPreprocessor :: Maybe Text -- ^ By default, we process CSS before emails leave Customer.io using Premailer. If your message included CSS and pre-processing is not disabled, this key indicates the pre-processor.
  , listCampaignActions200ResponseActionsInnerRecipient :: Maybe Text -- ^ The recipient value. In general, your recipient is an attribute that you reference using liquid, like `{{customer.phone}}`, instead of a hard-coded value. If you set this field to a liquid statement like `{{customer.phone}}`, the field returns blank in `GET` requests because we populate the recipient from your liquid statement at send time.
  , listCampaignActions200ResponseActionsInnerSubject :: Maybe Text -- ^ The subject line for an `email` action.
  , listCampaignActions200ResponseActionsInnerBcc :: Maybe Text -- ^ The blind-copy address(es) for this action.
  , listCampaignActions200ResponseActionsInnerFakeUnderscorebcc :: Maybe Bool -- ^ If true, rather than sending true copies to BCC addresses, Customer.io sends a copy of the message with the subject line containing the recipient address(es). 
  , listCampaignActions200ResponseActionsInnerPreheaderUnderscoretext :: Maybe Text -- ^ Also known as \"preview text\", this specifies the small block of text shown in an end-user's email inbox, next to, or underneath, the subject line.
  , listCampaignActions200ResponseActionsInnerHeaders :: Maybe (Map.Map String Text) -- ^ An object containing headers, where the key is the header name and the value is the header value. Header names and values must be strings and cannot contain any non-ASCII characters or empty spaces. Some headers are reserved and cannot be overwritten.
  , listCampaignActions200ResponseActionsInnerImageUnderscoreurl :: Maybe Text -- ^ The URL of the image in your SMS (MMS) message.
  , listCampaignActions200ResponseActionsInnerUrl :: Maybe Text -- ^ The URL to send a webhook to, applies to `webhook` type actions.
  , listCampaignActions200ResponseActionsInnerMethod :: Maybe Text -- ^ The HTTP method for your webhook.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ListCampaignActions200ResponseActionsInner where
  parseJSON = genericParseJSON optionsListCampaignActions200ResponseActionsInner
instance ToJSON ListCampaignActions200ResponseActionsInner where
  toJSON = genericToJSON optionsListCampaignActions200ResponseActionsInner

optionsListCampaignActions200ResponseActionsInner :: Options
optionsListCampaignActions200ResponseActionsInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("listCampaignActions200ResponseActionsInnerId", "id")
      , ("listCampaignActions200ResponseActionsInnerCampaignUnderscoreid", "campaign_id")
      , ("listCampaignActions200ResponseActionsInnerParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("listCampaignActions200ResponseActionsInnerDeduplicateUnderscoreid", "deduplicate_id")
      , ("listCampaignActions200ResponseActionsInnerName", "name")
      , ("listCampaignActions200ResponseActionsInnerLayout", "layout")
      , ("listCampaignActions200ResponseActionsInnerCreated", "created")
      , ("listCampaignActions200ResponseActionsInnerUpdated", "updated")
      , ("listCampaignActions200ResponseActionsInnerBody", "body")
      , ("listCampaignActions200ResponseActionsInnerBodyUnderscoreamp", "body_amp")
      , ("listCampaignActions200ResponseActionsInnerLanguage", "language")
      , ("listCampaignActions200ResponseActionsInnerType", "type")
      , ("listCampaignActions200ResponseActionsInnerSendingUnderscorestate", "sending_state")
      , ("listCampaignActions200ResponseActionsInnerFrom", "from")
      , ("listCampaignActions200ResponseActionsInnerFromUnderscoreid", "from_id")
      , ("listCampaignActions200ResponseActionsInnerReplyUnderscoreto", "reply_to")
      , ("listCampaignActions200ResponseActionsInnerReplyUnderscoretoUnderscoreid", "reply_to_id")
      , ("listCampaignActions200ResponseActionsInnerPreprocessor", "preprocessor")
      , ("listCampaignActions200ResponseActionsInnerRecipient", "recipient")
      , ("listCampaignActions200ResponseActionsInnerSubject", "subject")
      , ("listCampaignActions200ResponseActionsInnerBcc", "bcc")
      , ("listCampaignActions200ResponseActionsInnerFakeUnderscorebcc", "fake_bcc")
      , ("listCampaignActions200ResponseActionsInnerPreheaderUnderscoretext", "preheader_text")
      , ("listCampaignActions200ResponseActionsInnerHeaders", "headers")
      , ("listCampaignActions200ResponseActionsInnerImageUnderscoreurl", "image_url")
      , ("listCampaignActions200ResponseActionsInnerUrl", "url")
      , ("listCampaignActions200ResponseActionsInnerMethod", "method")
      ]


-- | 
data ListCampaigns200Response = ListCampaigns200Response
  { listCampaigns200ResponseCampaigns :: Maybe [ListCampaigns200ResponseCampaignsInner] -- ^ Each object is a campaign in your workspace with one of seven types of campaign triggers.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ListCampaigns200Response where
  parseJSON = genericParseJSON optionsListCampaigns200Response
instance ToJSON ListCampaigns200Response where
  toJSON = genericToJSON optionsListCampaigns200Response

optionsListCampaigns200Response :: Options
optionsListCampaigns200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("listCampaigns200ResponseCampaigns", "campaigns")
      ]


-- | 
data ListCampaigns200ResponseCampaignsInner = ListCampaigns200ResponseCampaignsInner
  { listCampaigns200ResponseCampaignsInnerId :: Maybe Int -- ^ The identifier for a campaign.
  , listCampaigns200ResponseCampaignsInnerDeduplicateUnderscoreid :: Maybe Text -- ^ An identifier in the format `id:timestamp` where the id is the id of the object you are working with (Campaigns, Deliveries, Exports, Identities, Newsletters, Segments, and Templates), and the timestamp is the last time the object was updated.
  , listCampaigns200ResponseCampaignsInnerName :: Maybe Text -- ^ The name of the campaign.
  , listCampaigns200ResponseCampaignsInnerType :: Maybe Text -- ^ The type of campaign trigger. **Sunsetting on March 30, 2025**
  , listCampaigns200ResponseCampaignsInnerCreated :: Maybe Int -- ^ The date time when the referenced ID was created.
  , listCampaigns200ResponseCampaignsInnerUpdated :: Maybe Int -- ^ The date time when the referenced ID was last updated.
  , listCampaigns200ResponseCampaignsInnerActive :: Maybe Bool -- ^ If true, the campaign is active and can still send messages.
  , listCampaigns200ResponseCampaignsInnerState :: Maybe Text -- ^ The status of the campaign.
  , listCampaigns200ResponseCampaignsInnerActions :: Maybe [SegmentActionsInner] -- ^ An array of actions contained within the campaign.
  , listCampaigns200ResponseCampaignsInnerFirstUnderscorestarted :: Maybe Int -- ^ The date and time when you first started the campaign and it first became eligible to be triggered.
  , listCampaigns200ResponseCampaignsInnerTags :: Maybe [Text] -- ^ An array of tags you set on this campaign.
  , listCampaigns200ResponseCampaignsInnerTriggerUnderscoresegmentUnderscoreids :: Maybe [Int] -- ^ A list of segments used in the campaign trigger, returned if the campaign trigger included one or more segment conditions.
  , listCampaigns200ResponseCampaignsInnerFilterUnderscoresegmentUnderscoreids :: Maybe [Int] -- ^ A list of segments used in the campaign filter, returned if the campaign audience was filtered on one or more segments.
  , listCampaigns200ResponseCampaignsInnerMsgUnderscoretemplates :: Maybe [SegmentMsgTemplatesInner] -- ^ Indicates the message templates used in this campaign.
  , listCampaigns200ResponseCampaignsInnerEventUnderscorename :: Maybe Text -- ^ The name of the event. How you reference the event in campaigns or segments.
  , listCampaigns200ResponseCampaignsInnerFrequency :: Maybe Text -- ^ How often a person will receive this campaign based on the date specified in the campaign trigger.
  , listCampaigns200ResponseCampaignsInnerDateUnderscoreattribute :: Maybe Text -- ^ The attribute on people's profiles you use to configure the date of the campaign trigger.
  , listCampaigns200ResponseCampaignsInnerTimezone :: Maybe Text -- ^ The timezone you set to configure the date of the campaign trigger.
  , listCampaigns200ResponseCampaignsInnerUseUnderscorecustomerUnderscoretimezone :: Maybe Bool -- ^ If you chose \"the user's timezone\" while configuring the date of the campaign trigger, this is `true`. Otherwise, you set a specific timezone so it's `false`.
  , listCampaigns200ResponseCampaignsInnerStartUnderscorehour :: Maybe Int -- ^ The hour you set the campaign to trigger. Follows the 24-hour clock.
  , listCampaigns200ResponseCampaignsInnerStartUnderscoreminutes :: Maybe Int -- ^ The minutes you set the campaign to trigger. Follows the 24-hour clock.
  , listCampaigns200ResponseCampaignsInnerObjectUnderscoretypeUnderscoreid :: Maybe Int -- ^ The the object type ID of the trigger.
  , listCampaigns200ResponseCampaignsInnerFilterUnderscoreobjectUnderscoreattributes :: Maybe Text -- ^ A list of object attributes used in the campaign filter, returned if the campaign audience was filtered on one or more object attributes.
  , listCampaigns200ResponseCampaignsInnerFilterUnderscorerelationshipUnderscoreattributes :: Maybe Text -- ^ A list of relationship attributes used in the campaign filter, returned if the campaign audience was filtered on one or more relationship attributes.
  , listCampaigns200ResponseCampaignsInnerAudience :: Maybe ObjectAudience -- ^ 
  , listCampaigns200ResponseCampaignsInnerRelationshipUnderscoreattributeUnderscoretriggers :: Maybe Value -- ^ A list of relationship attributes used to trigger the campaign.
  , listCampaigns200ResponseCampaignsInnerObjectUnderscoreattributeUnderscoretriggers :: Maybe Value -- ^ A list of object attributes used to trigger the campaign.
  , listCampaigns200ResponseCampaignsInnerWebhookUnderscoreid :: Maybe Int -- ^ The ID of the webhook trigger generated by Customer.io.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ListCampaigns200ResponseCampaignsInner where
  parseJSON = genericParseJSON optionsListCampaigns200ResponseCampaignsInner
instance ToJSON ListCampaigns200ResponseCampaignsInner where
  toJSON = genericToJSON optionsListCampaigns200ResponseCampaignsInner

optionsListCampaigns200ResponseCampaignsInner :: Options
optionsListCampaigns200ResponseCampaignsInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("listCampaigns200ResponseCampaignsInnerId", "id")
      , ("listCampaigns200ResponseCampaignsInnerDeduplicateUnderscoreid", "deduplicate_id")
      , ("listCampaigns200ResponseCampaignsInnerName", "name")
      , ("listCampaigns200ResponseCampaignsInnerType", "type")
      , ("listCampaigns200ResponseCampaignsInnerCreated", "created")
      , ("listCampaigns200ResponseCampaignsInnerUpdated", "updated")
      , ("listCampaigns200ResponseCampaignsInnerActive", "active")
      , ("listCampaigns200ResponseCampaignsInnerState", "state")
      , ("listCampaigns200ResponseCampaignsInnerActions", "actions")
      , ("listCampaigns200ResponseCampaignsInnerFirstUnderscorestarted", "first_started")
      , ("listCampaigns200ResponseCampaignsInnerTags", "tags")
      , ("listCampaigns200ResponseCampaignsInnerTriggerUnderscoresegmentUnderscoreids", "trigger_segment_ids")
      , ("listCampaigns200ResponseCampaignsInnerFilterUnderscoresegmentUnderscoreids", "filter_segment_ids")
      , ("listCampaigns200ResponseCampaignsInnerMsgUnderscoretemplates", "msg_templates")
      , ("listCampaigns200ResponseCampaignsInnerEventUnderscorename", "event_name")
      , ("listCampaigns200ResponseCampaignsInnerFrequency", "frequency")
      , ("listCampaigns200ResponseCampaignsInnerDateUnderscoreattribute", "date_attribute")
      , ("listCampaigns200ResponseCampaignsInnerTimezone", "timezone")
      , ("listCampaigns200ResponseCampaignsInnerUseUnderscorecustomerUnderscoretimezone", "use_customer_timezone")
      , ("listCampaigns200ResponseCampaignsInnerStartUnderscorehour", "start_hour")
      , ("listCampaigns200ResponseCampaignsInnerStartUnderscoreminutes", "start_minutes")
      , ("listCampaigns200ResponseCampaignsInnerObjectUnderscoretypeUnderscoreid", "object_type_id")
      , ("listCampaigns200ResponseCampaignsInnerFilterUnderscoreobjectUnderscoreattributes", "filter_object_attributes")
      , ("listCampaigns200ResponseCampaignsInnerFilterUnderscorerelationshipUnderscoreattributes", "filter_relationship_attributes")
      , ("listCampaigns200ResponseCampaignsInnerAudience", "audience")
      , ("listCampaigns200ResponseCampaignsInnerRelationshipUnderscoreattributeUnderscoretriggers", "relationship_attribute_triggers")
      , ("listCampaigns200ResponseCampaignsInnerObjectUnderscoreattributeUnderscoretriggers", "object_attribute_triggers")
      , ("listCampaigns200ResponseCampaignsInnerWebhookUnderscoreid", "webhook_id")
      ]


-- | 
data ListMessages200Response = ListMessages200Response
  { listMessages200ResponseMessages :: Maybe [BroadcastMessages200ResponseMessagesInner] -- ^ Each object in the array describes an individual message delivery. The object contains keys for all possible parents of the message (`newsletter_id`, `broadcast_id`, etc) but only the parents of the delivery are populated. Other parent IDs are null.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ListMessages200Response where
  parseJSON = genericParseJSON optionsListMessages200Response
instance ToJSON ListMessages200Response where
  toJSON = genericToJSON optionsListMessages200Response

optionsListMessages200Response :: Options
optionsListMessages200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("listMessages200ResponseMessages", "messages")
      ]


-- | 
data ListNewsletterVariants200Response = ListNewsletterVariants200Response
  { listNewsletterVariants200ResponseContents :: Maybe [ListNewsletterVariants200ResponseContentsInner] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ListNewsletterVariants200Response where
  parseJSON = genericParseJSON optionsListNewsletterVariants200Response
instance ToJSON ListNewsletterVariants200Response where
  toJSON = genericToJSON optionsListNewsletterVariants200Response

optionsListNewsletterVariants200Response :: Options
optionsListNewsletterVariants200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("listNewsletterVariants200ResponseContents", "contents")
      ]


-- | 
data ListNewsletterVariants200ResponseContentsInner = ListNewsletterVariants200ResponseContentsInner
  { listNewsletterVariants200ResponseContentsInnerId :: Maybe Int -- ^ The identifier of a newsletter variant—a language in a multi-language newsletter or a test in an A/B test.
  , listNewsletterVariants200ResponseContentsInnerNewsletterUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter.
  , listNewsletterVariants200ResponseContentsInnerDeduplicateUnderscoreid :: Maybe Text -- ^ An identifier in the format `id:timestamp` where the id is the id of the object you are working with (Campaigns, Deliveries, Exports, Identities, Newsletters, Segments, and Templates), and the timestamp is the last time the object was updated.
  , listNewsletterVariants200ResponseContentsInnerName :: Maybe Text -- ^ The name of the variant, if it exists.
  , listNewsletterVariants200ResponseContentsInnerLayout :: Maybe Text -- ^ The layout used for the variant, if it exists.
  , listNewsletterVariants200ResponseContentsInnerBody :: Maybe Text -- ^ The body of the variant. You cannot modify the body if you created it with our drag-and-drop editor.
  , listNewsletterVariants200ResponseContentsInnerBodyUnderscoreamp :: Maybe Text -- ^ If your message is an email, this is the AMP-enabled body of your message. If your recipient's email client doesn't support AMP, the `body` represents your fallback message.
  , listNewsletterVariants200ResponseContentsInnerLanguage :: Maybe Text -- ^ The language variant for your message. If you don't use our [localization feature](/localization), or this is the default message, this value is an empty string.
  , listNewsletterVariants200ResponseContentsInnerType :: Maybe Text -- ^ The type of message/action.
  , listNewsletterVariants200ResponseContentsInnerFrom :: Maybe Text -- ^ The address that the message is from, relevant if the action `type` is `email`.
  , listNewsletterVariants200ResponseContentsInnerFromUnderscoreid :: Maybe Int -- ^ The identifier of the `from` address, commonly known as the \"sender\". You can [list your sender identities](#operation/listSenders) to match the ID to a specific address.
  , listNewsletterVariants200ResponseContentsInnerReplyUnderscoreto :: Maybe Text -- ^ The address that receives replies for the message, if applicable.
  , listNewsletterVariants200ResponseContentsInnerReplyUnderscoretoUnderscoreid :: Maybe Int -- ^ The identifier for the `reply_to` address, if applicable. You can [list your sender identities](#operation/listSenders) to match the ID to a specific address.
  , listNewsletterVariants200ResponseContentsInnerPreprocessor :: Maybe Text -- ^ By default, we process CSS before emails leave Customer.io using Premailer. If your message included CSS and pre-processing is not disabled, this key indicates the pre-processor.
  , listNewsletterVariants200ResponseContentsInnerRecipient :: Maybe Text -- ^ The recipient address for an action.
  , listNewsletterVariants200ResponseContentsInnerSubject :: Maybe Text -- ^ The subject line for an `email` action.
  , listNewsletterVariants200ResponseContentsInnerBcc :: Maybe Text -- ^ The blind-copy address(es) for this action.
  , listNewsletterVariants200ResponseContentsInnerFakeUnderscorebcc :: Maybe Bool -- ^ If true, rather than sending true copies to BCC addresses, Customer.io sends a copy of the message with the subject line containing the recipient address(es). 
  , listNewsletterVariants200ResponseContentsInnerPreheaderUnderscoretext :: Maybe Text -- ^ Also known as \"preview text\", this specifies the small block of text shown in an end-user's email inbox, next to, or underneath, the subject line.
  , listNewsletterVariants200ResponseContentsInnerHeaders :: Maybe (Map.Map String Text) -- ^ An object containing headers, where the key is the header name and the value is the header value. Header names and values must be strings and cannot contain any non-ASCII characters or empty spaces. Some headers are reserved and cannot be overwritten.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ListNewsletterVariants200ResponseContentsInner where
  parseJSON = genericParseJSON optionsListNewsletterVariants200ResponseContentsInner
instance ToJSON ListNewsletterVariants200ResponseContentsInner where
  toJSON = genericToJSON optionsListNewsletterVariants200ResponseContentsInner

optionsListNewsletterVariants200ResponseContentsInner :: Options
optionsListNewsletterVariants200ResponseContentsInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("listNewsletterVariants200ResponseContentsInnerId", "id")
      , ("listNewsletterVariants200ResponseContentsInnerNewsletterUnderscoreid", "newsletter_id")
      , ("listNewsletterVariants200ResponseContentsInnerDeduplicateUnderscoreid", "deduplicate_id")
      , ("listNewsletterVariants200ResponseContentsInnerName", "name")
      , ("listNewsletterVariants200ResponseContentsInnerLayout", "layout")
      , ("listNewsletterVariants200ResponseContentsInnerBody", "body")
      , ("listNewsletterVariants200ResponseContentsInnerBodyUnderscoreamp", "body_amp")
      , ("listNewsletterVariants200ResponseContentsInnerLanguage", "language")
      , ("listNewsletterVariants200ResponseContentsInnerType", "type")
      , ("listNewsletterVariants200ResponseContentsInnerFrom", "from")
      , ("listNewsletterVariants200ResponseContentsInnerFromUnderscoreid", "from_id")
      , ("listNewsletterVariants200ResponseContentsInnerReplyUnderscoreto", "reply_to")
      , ("listNewsletterVariants200ResponseContentsInnerReplyUnderscoretoUnderscoreid", "reply_to_id")
      , ("listNewsletterVariants200ResponseContentsInnerPreprocessor", "preprocessor")
      , ("listNewsletterVariants200ResponseContentsInnerRecipient", "recipient")
      , ("listNewsletterVariants200ResponseContentsInnerSubject", "subject")
      , ("listNewsletterVariants200ResponseContentsInnerBcc", "bcc")
      , ("listNewsletterVariants200ResponseContentsInnerFakeUnderscorebcc", "fake_bcc")
      , ("listNewsletterVariants200ResponseContentsInnerPreheaderUnderscoretext", "preheader_text")
      , ("listNewsletterVariants200ResponseContentsInnerHeaders", "headers")
      ]


-- | 
data ListNewsletters200Response = ListNewsletters200Response
  { listNewsletters200ResponseNewsletters :: Maybe [ListNewsletters200ResponseNewslettersInner] -- ^ 
  , listNewsletters200ResponseNext :: Maybe Text -- ^ Indicates the next page of results. Add `?start=<next_value>` to the request to get the next page of results.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ListNewsletters200Response where
  parseJSON = genericParseJSON optionsListNewsletters200Response
instance ToJSON ListNewsletters200Response where
  toJSON = genericToJSON optionsListNewsletters200Response

optionsListNewsletters200Response :: Options
optionsListNewsletters200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("listNewsletters200ResponseNewsletters", "newsletters")
      , ("listNewsletters200ResponseNext", "next")
      ]


-- | 
data ListNewsletters200ResponseNewslettersInner = ListNewsletters200ResponseNewslettersInner
  { listNewsletters200ResponseNewslettersInnerId :: Maybe Int -- ^ The identifier for a newsletter.
  , listNewsletters200ResponseNewslettersInnerDeduplicateUnderscoreid :: Maybe Text -- ^ An identifier in the format `id:timestamp` where the id is the id of the object you are working with (Campaigns, Deliveries, Exports, Identities, Newsletters, Segments, and Templates), and the timestamp is the last time the object was updated.
  , listNewsletters200ResponseNewslettersInnerContentUnderscoreids :: Maybe [Int] -- ^ A list of messages contained by a newsletter. If your newsletter includes a list of languages and/or A/B test variants, the array contains a content ID for each language/variant. [Look up a newsletter variant](#operation/getNewsletterVariant) to get more information about an individual content ID.
  , listNewsletters200ResponseNewslettersInnerName :: Maybe Text -- ^ The name of the newsletter.
  , listNewsletters200ResponseNewslettersInnerSentUnderscoreat :: Maybe Int -- ^ The last time the newsletter was sent.
  , listNewsletters200ResponseNewslettersInnerCreated :: Maybe Int -- ^ The date time when the referenced ID was created.
  , listNewsletters200ResponseNewslettersInnerUpdated :: Maybe Int -- ^ The date time when the referenced ID was last updated.
  , listNewsletters200ResponseNewslettersInnerType :: Maybe Text -- ^ The type of newsletter—`email`, `twilio`, etc.
  , listNewsletters200ResponseNewslettersInnerTags :: Maybe [Text] -- ^ An array of tags you set on this newsletter.
  , listNewsletters200ResponseNewslettersInnerRecipientUnderscoresegmentUnderscoreids :: Maybe [Int] -- ^ A list of segments used in a newsletter's recipient filter, returned if newsletter recipients were filtered by one or more segments.
  , listNewsletters200ResponseNewslettersInnerSubscriptionUnderscoretopicUnderscoreid :: Maybe Int -- ^ The identifier of a subscription topic. Remember, subscription topics are assigned an incrementing number, starting at 1.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ListNewsletters200ResponseNewslettersInner where
  parseJSON = genericParseJSON optionsListNewsletters200ResponseNewslettersInner
instance ToJSON ListNewsletters200ResponseNewslettersInner where
  toJSON = genericToJSON optionsListNewsletters200ResponseNewslettersInner

optionsListNewsletters200ResponseNewslettersInner :: Options
optionsListNewsletters200ResponseNewslettersInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("listNewsletters200ResponseNewslettersInnerId", "id")
      , ("listNewsletters200ResponseNewslettersInnerDeduplicateUnderscoreid", "deduplicate_id")
      , ("listNewsletters200ResponseNewslettersInnerContentUnderscoreids", "content_ids")
      , ("listNewsletters200ResponseNewslettersInnerName", "name")
      , ("listNewsletters200ResponseNewslettersInnerSentUnderscoreat", "sent_at")
      , ("listNewsletters200ResponseNewslettersInnerCreated", "created")
      , ("listNewsletters200ResponseNewslettersInnerUpdated", "updated")
      , ("listNewsletters200ResponseNewslettersInnerType", "type")
      , ("listNewsletters200ResponseNewslettersInnerTags", "tags")
      , ("listNewsletters200ResponseNewslettersInnerRecipientUnderscoresegmentUnderscoreids", "recipient_segment_ids")
      , ("listNewsletters200ResponseNewslettersInnerSubscriptionUnderscoretopicUnderscoreid", "subscription_topic_id")
      ]


-- | 
data ListSegments200Response = ListSegments200Response
  { listSegments200ResponseSegments :: Maybe [ListSegments200ResponseSegmentsInner] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ListSegments200Response where
  parseJSON = genericParseJSON optionsListSegments200Response
instance ToJSON ListSegments200Response where
  toJSON = genericToJSON optionsListSegments200Response

optionsListSegments200Response :: Options
optionsListSegments200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("listSegments200ResponseSegments", "segments")
      ]


-- | 
data ListSegments200ResponseSegmentsInner = ListSegments200ResponseSegmentsInner
  { listSegments200ResponseSegmentsInnerId :: Maybe Int -- ^ The identifier for a segment.
  , listSegments200ResponseSegmentsInnerDeduplicateUnderscoreid :: Maybe Text -- ^ An identifier in the format `id:timestamp` where the id is the id of the object you are working with (Campaigns, Deliveries, Exports, Identities, Newsletters, Segments, and Templates), and the timestamp is the last time the object was updated.
  , listSegments200ResponseSegmentsInnerName :: Maybe Text -- ^ The name of the segment.
  , listSegments200ResponseSegmentsInnerDescription :: Maybe Text -- ^ A description for the segment. This can help you understand the purpose of the segment when you encounter it in other requests or in the UI.
  , listSegments200ResponseSegmentsInnerState :: Maybe Text -- ^ The state of the segment.  `events` - currently handling event conditions for this segment  `build` - currently handling profile attribute conditions for this segment  `events_queued` - waiting for a process to start handling event conditions for this segment  `build_queued` - waiting for a process to start handling profile attribute conditions for this segment  `finished` - the segment is finished building 
  , listSegments200ResponseSegmentsInnerProgress :: Maybe Int -- ^ If Customer.io has not finished processing the segment, this indicates the percentage complete. Otherwise, this key is null.
  , listSegments200ResponseSegmentsInnerType :: Maybe Text -- ^ The type of segment.
  , listSegments200ResponseSegmentsInnerTags :: Maybe [Text] -- ^ The tags assigned to the segment, if any. Tags may help you sort through your segments.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ListSegments200ResponseSegmentsInner where
  parseJSON = genericParseJSON optionsListSegments200ResponseSegmentsInner
instance ToJSON ListSegments200ResponseSegmentsInner where
  toJSON = genericToJSON optionsListSegments200ResponseSegmentsInner

optionsListSegments200ResponseSegmentsInner :: Options
optionsListSegments200ResponseSegmentsInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("listSegments200ResponseSegmentsInnerId", "id")
      , ("listSegments200ResponseSegmentsInnerDeduplicateUnderscoreid", "deduplicate_id")
      , ("listSegments200ResponseSegmentsInnerName", "name")
      , ("listSegments200ResponseSegmentsInnerDescription", "description")
      , ("listSegments200ResponseSegmentsInnerState", "state")
      , ("listSegments200ResponseSegmentsInnerProgress", "progress")
      , ("listSegments200ResponseSegmentsInnerType", "type")
      , ("listSegments200ResponseSegmentsInnerTags", "tags")
      ]


-- | 
data ListSenders200Response = ListSenders200Response
  { listSenders200ResponseSenderUnderscoreidentities :: Maybe [ListSenders200ResponseSenderIdentitiesInner] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ListSenders200Response where
  parseJSON = genericParseJSON optionsListSenders200Response
instance ToJSON ListSenders200Response where
  toJSON = genericToJSON optionsListSenders200Response

optionsListSenders200Response :: Options
optionsListSenders200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("listSenders200ResponseSenderUnderscoreidentities", "sender_identities")
      ]


-- | Information about a sender.
data ListSenders200ResponseSenderIdentitiesInner = ListSenders200ResponseSenderIdentitiesInner
  { listSenders200ResponseSenderIdentitiesInnerId :: Maybe Int -- ^ The identifier of a sender.
  , listSenders200ResponseSenderIdentitiesInnerDeduplicateUnderscoreid :: Maybe Text -- ^ An identifier in the format `id:timestamp` where the id is the id of the object you are working with (Campaigns, Deliveries, Exports, Identities, Newsletters, Segments, and Templates), and the timestamp is the last time the object was updated.
  , listSenders200ResponseSenderIdentitiesInnerName :: Maybe Text -- ^ The name of the sender.
  , listSenders200ResponseSenderIdentitiesInnerEmail :: Maybe Text -- ^ The email address of the sender.
  , listSenders200ResponseSenderIdentitiesInnerAddress :: Maybe Text -- ^ The sender name and email address in the format `name <name@example.com>`.
  , listSenders200ResponseSenderIdentitiesInnerTemplateUnderscoretype :: Maybe Text -- ^ The type of sender.
  , listSenders200ResponseSenderIdentitiesInnerAutoUnderscoregenerated :: Maybe Bool -- ^ If true, the sender is automatically generated by Customer.io.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ListSenders200ResponseSenderIdentitiesInner where
  parseJSON = genericParseJSON optionsListSenders200ResponseSenderIdentitiesInner
instance ToJSON ListSenders200ResponseSenderIdentitiesInner where
  toJSON = genericToJSON optionsListSenders200ResponseSenderIdentitiesInner

optionsListSenders200ResponseSenderIdentitiesInner :: Options
optionsListSenders200ResponseSenderIdentitiesInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("listSenders200ResponseSenderIdentitiesInnerId", "id")
      , ("listSenders200ResponseSenderIdentitiesInnerDeduplicateUnderscoreid", "deduplicate_id")
      , ("listSenders200ResponseSenderIdentitiesInnerName", "name")
      , ("listSenders200ResponseSenderIdentitiesInnerEmail", "email")
      , ("listSenders200ResponseSenderIdentitiesInnerAddress", "address")
      , ("listSenders200ResponseSenderIdentitiesInnerTemplateUnderscoretype", "template_type")
      , ("listSenders200ResponseSenderIdentitiesInnerAutoUnderscoregenerated", "auto_generated")
      ]


-- | 
data ListSnippets200Response = ListSnippets200Response
  { listSnippets200ResponseSnippets :: Maybe [ListSnippets200ResponseSnippetsInner] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ListSnippets200Response where
  parseJSON = genericParseJSON optionsListSnippets200Response
instance ToJSON ListSnippets200Response where
  toJSON = genericToJSON optionsListSnippets200Response

optionsListSnippets200Response :: Options
optionsListSnippets200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("listSnippets200ResponseSnippets", "snippets")
      ]


-- | describes a piece of reusable content. You must provide a name for the snippet and the &#x60;value&#x60;—the content that appears in messages that use the snippet.
data ListSnippets200ResponseSnippetsInner = ListSnippets200ResponseSnippetsInner
  { listSnippets200ResponseSnippetsInnerName :: Text -- ^ The name of the snippet, must be unique.
  , listSnippets200ResponseSnippetsInnerValue :: Text -- ^ The contents of the snippet.
  , listSnippets200ResponseSnippetsInnerUpdatedUnderscoreat :: Maybe Int -- ^ The last date-time the snippet was updated.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ListSnippets200ResponseSnippetsInner where
  parseJSON = genericParseJSON optionsListSnippets200ResponseSnippetsInner
instance ToJSON ListSnippets200ResponseSnippetsInner where
  toJSON = genericToJSON optionsListSnippets200ResponseSnippetsInner

optionsListSnippets200ResponseSnippetsInner :: Options
optionsListSnippets200ResponseSnippetsInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("listSnippets200ResponseSnippetsInnerName", "name")
      , ("listSnippets200ResponseSnippetsInnerValue", "value")
      , ("listSnippets200ResponseSnippetsInnerUpdatedUnderscoreat", "updated_at")
      ]


-- | 
data ListTransactional200Response = ListTransactional200Response
  { listTransactional200ResponseMessages :: Maybe [ListTransactional200ResponseMessagesInner] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ListTransactional200Response where
  parseJSON = genericParseJSON optionsListTransactional200Response
instance ToJSON ListTransactional200Response where
  toJSON = genericToJSON optionsListTransactional200Response

optionsListTransactional200Response :: Options
optionsListTransactional200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("listTransactional200ResponseMessages", "messages")
      ]


-- | Contains information about a transactional message.
data ListTransactional200ResponseMessagesInner = ListTransactional200ResponseMessagesInner
  { listTransactional200ResponseMessagesInnerId :: Maybe Int -- ^ The identifier Customer.io assigned to the transactional message
  , listTransactional200ResponseMessagesInnerName :: Maybe Text -- ^ The name you set for the transactional message.
  , listTransactional200ResponseMessagesInnerDescription :: Maybe Text -- ^ A description of the transactional message.
  , listTransactional200ResponseMessagesInnerSendUnderscoretoUnderscoreunsubscribed :: Maybe Bool -- ^ If true, people with an `unsubscribed` attribute set to `true` can trigger the message.
  , listTransactional200ResponseMessagesInnerLinkUnderscoretracking :: Maybe Bool -- ^ If true, link tracking is enabled for this message.
  , listTransactional200ResponseMessagesInnerOpenUnderscoretracking :: Maybe Bool -- ^ If true, open-tracking is enabled for this message.
  , listTransactional200ResponseMessagesInnerHideUnderscoremessageUnderscorebody :: Maybe Bool -- ^ If true, message contents are not retained in delivery history—you cannot recall the exact contents of the message.
  , listTransactional200ResponseMessagesInnerQueueUnderscoredrafts :: Maybe Bool -- ^ If true, messages do not send automatically, and queue as drafts instead. You must send drafts through the *Deliveries & Drafts* page in the user interface.
  , listTransactional200ResponseMessagesInnerCreatedUnderscoreat :: Maybe Int -- ^ The date time when the referenced ID was created.
  , listTransactional200ResponseMessagesInnerUpdatedUnderscoreat :: Maybe Int -- ^ The date time when the referenced ID was last updated.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ListTransactional200ResponseMessagesInner where
  parseJSON = genericParseJSON optionsListTransactional200ResponseMessagesInner
instance ToJSON ListTransactional200ResponseMessagesInner where
  toJSON = genericToJSON optionsListTransactional200ResponseMessagesInner

optionsListTransactional200ResponseMessagesInner :: Options
optionsListTransactional200ResponseMessagesInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("listTransactional200ResponseMessagesInnerId", "id")
      , ("listTransactional200ResponseMessagesInnerName", "name")
      , ("listTransactional200ResponseMessagesInnerDescription", "description")
      , ("listTransactional200ResponseMessagesInnerSendUnderscoretoUnderscoreunsubscribed", "send_to_unsubscribed")
      , ("listTransactional200ResponseMessagesInnerLinkUnderscoretracking", "link_tracking")
      , ("listTransactional200ResponseMessagesInnerOpenUnderscoretracking", "open_tracking")
      , ("listTransactional200ResponseMessagesInnerHideUnderscoremessageUnderscorebody", "hide_message_body")
      , ("listTransactional200ResponseMessagesInnerQueueUnderscoredrafts", "queue_drafts")
      , ("listTransactional200ResponseMessagesInnerCreatedUnderscoreat", "created_at")
      , ("listTransactional200ResponseMessagesInnerUpdatedUnderscoreat", "updated_at")
      ]


-- | 
data ListTransactionalVariants200Response = ListTransactionalVariants200Response
  { listTransactionalVariants200ResponseContents :: Maybe [ListTransactionalVariants200ResponseContentsInner] -- ^ Each object represents one of the variants.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ListTransactionalVariants200Response where
  parseJSON = genericParseJSON optionsListTransactionalVariants200Response
instance ToJSON ListTransactionalVariants200Response where
  toJSON = genericToJSON optionsListTransactionalVariants200Response

optionsListTransactionalVariants200Response :: Options
optionsListTransactionalVariants200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("listTransactionalVariants200ResponseContents", "contents")
      ]


-- | 
data ListTransactionalVariants200ResponseContentsInner = ListTransactionalVariants200ResponseContentsInner
  { listTransactionalVariants200ResponseContentsInnerId :: Maybe Int -- ^ The identifier for an action.
  , listTransactionalVariants200ResponseContentsInnerName :: Maybe Text -- ^ The name of the transactional message.
  , listTransactionalVariants200ResponseContentsInnerCreated :: Maybe Int -- ^ The date time when the referenced ID was created.
  , listTransactionalVariants200ResponseContentsInnerUpdated :: Maybe Int -- ^ The date time when the referenced ID was last updated.
  , listTransactionalVariants200ResponseContentsInnerBody :: Maybe Text -- ^ The body of the transactional message. You cannot modify the body if you created it with our drag-and-drop editor.
  , listTransactionalVariants200ResponseContentsInnerLanguage :: Maybe Text -- ^ The language variant for your message. If you don't use our [localization feature](/localization), or this is the default message, this value is an empty string.
  , listTransactionalVariants200ResponseContentsInnerType :: Maybe Text -- ^ The type of message.
  , listTransactionalVariants200ResponseContentsInnerFrom :: Maybe Text -- ^ The address that the message is from, relevant if the action `type` is `email`.
  , listTransactionalVariants200ResponseContentsInnerFromUnderscoreid :: Maybe Int -- ^ The identifier of the `from` address, commonly known as the \"sender\". You can [list your sender identities](#operation/listSenders) to match the ID to a specific address.
  , listTransactionalVariants200ResponseContentsInnerReplyUnderscoreto :: Maybe Text -- ^ The address that receives replies for the message, if applicable.
  , listTransactionalVariants200ResponseContentsInnerReplyUnderscoretoUnderscoreid :: Maybe Int -- ^ The identifier for the `reply_to` address, if applicable. You can [list your sender identities](#operation/listSenders) to match the ID to a specific address.
  , listTransactionalVariants200ResponseContentsInnerPreprocessor :: Maybe Text -- ^ By default, we process CSS before emails leave Customer.io using Premailer. If your message included CSS and pre-processing is not disabled, this key indicates the pre-processor.
  , listTransactionalVariants200ResponseContentsInnerRecipient :: Maybe Text -- ^ The recipient address for an action.
  , listTransactionalVariants200ResponseContentsInnerSubject :: Maybe Text -- ^ The subject line for an `email` action.
  , listTransactionalVariants200ResponseContentsInnerBcc :: Maybe Text -- ^ The blind-copy address(es) for this action.
  , listTransactionalVariants200ResponseContentsInnerFakeUnderscorebcc :: Maybe Bool -- ^ If true, rather than sending true copies to BCC addresses, Customer.io sends a copy of the message with the subject line containing the recipient address(es). 
  , listTransactionalVariants200ResponseContentsInnerPreheaderUnderscoretext :: Maybe Text -- ^ Also known as \"preview text\", this specifies the small block of text shown in an end-user's email inbox, next to, or underneath, the subject line.
  , listTransactionalVariants200ResponseContentsInnerHeaders :: Maybe (Map.Map String Text) -- ^ An object containing headers, where the key is the header name and the value is the header value. Header names and values must be strings and cannot contain any non-ASCII characters or empty spaces. Some headers are reserved and cannot be overwritten.
  , listTransactionalVariants200ResponseContentsInnerBodyUnderscoreamp :: Maybe Text -- ^ If your message is an email, this is the AMP-enabled body of your message. If your recipient's email client doesn't support AMP, the `body` represents your fallback message.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ListTransactionalVariants200ResponseContentsInner where
  parseJSON = genericParseJSON optionsListTransactionalVariants200ResponseContentsInner
instance ToJSON ListTransactionalVariants200ResponseContentsInner where
  toJSON = genericToJSON optionsListTransactionalVariants200ResponseContentsInner

optionsListTransactionalVariants200ResponseContentsInner :: Options
optionsListTransactionalVariants200ResponseContentsInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("listTransactionalVariants200ResponseContentsInnerId", "id")
      , ("listTransactionalVariants200ResponseContentsInnerName", "name")
      , ("listTransactionalVariants200ResponseContentsInnerCreated", "created")
      , ("listTransactionalVariants200ResponseContentsInnerUpdated", "updated")
      , ("listTransactionalVariants200ResponseContentsInnerBody", "body")
      , ("listTransactionalVariants200ResponseContentsInnerLanguage", "language")
      , ("listTransactionalVariants200ResponseContentsInnerType", "type")
      , ("listTransactionalVariants200ResponseContentsInnerFrom", "from")
      , ("listTransactionalVariants200ResponseContentsInnerFromUnderscoreid", "from_id")
      , ("listTransactionalVariants200ResponseContentsInnerReplyUnderscoreto", "reply_to")
      , ("listTransactionalVariants200ResponseContentsInnerReplyUnderscoretoUnderscoreid", "reply_to_id")
      , ("listTransactionalVariants200ResponseContentsInnerPreprocessor", "preprocessor")
      , ("listTransactionalVariants200ResponseContentsInnerRecipient", "recipient")
      , ("listTransactionalVariants200ResponseContentsInnerSubject", "subject")
      , ("listTransactionalVariants200ResponseContentsInnerBcc", "bcc")
      , ("listTransactionalVariants200ResponseContentsInnerFakeUnderscorebcc", "fake_bcc")
      , ("listTransactionalVariants200ResponseContentsInnerPreheaderUnderscoretext", "preheader_text")
      , ("listTransactionalVariants200ResponseContentsInnerHeaders", "headers")
      , ("listTransactionalVariants200ResponseContentsInnerBodyUnderscoreamp", "body_amp")
      ]


-- | 
data ListWebhooks200Response = ListWebhooks200Response
  { listWebhooks200ResponseReportingUnderscorewebhooks :: Maybe [ListWebhooks200ResponseReportingWebhooksInner] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ListWebhooks200Response where
  parseJSON = genericParseJSON optionsListWebhooks200Response
instance ToJSON ListWebhooks200Response where
  toJSON = genericToJSON optionsListWebhooks200Response

optionsListWebhooks200Response :: Options
optionsListWebhooks200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("listWebhooks200ResponseReportingUnderscorewebhooks", "reporting_webhooks")
      ]


-- | 
data ListWebhooks200ResponseReportingWebhooksInner = ListWebhooks200ResponseReportingWebhooksInner
  { listWebhooks200ResponseReportingWebhooksInnerName :: Text -- ^ The name of your webhook.
  , listWebhooks200ResponseReportingWebhooksInnerId :: Maybe Int -- ^ The identifier for the webhook.
  , listWebhooks200ResponseReportingWebhooksInnerEndpoint :: Text -- ^ The webhook URL.
  , listWebhooks200ResponseReportingWebhooksInnerDisabled :: Maybe Bool -- ^ Set to `true` to quit sending events to the webhook URL. Set to `false` to enable the webhook.
  , listWebhooks200ResponseReportingWebhooksInnerFullUnderscoreresolution :: Maybe Bool -- ^ Set to `false` to send unique open and click events to the webhook. Set to `true` to send all events.
  , listWebhooks200ResponseReportingWebhooksInnerWithUnderscorecontent :: Maybe Bool -- ^ Set to `true` to include the message `body` in `_sent` events.
  , listWebhooks200ResponseReportingWebhooksInnerEvents :: [Text] -- ^ Specifies the types of events you want to report to your webhook. See our [reporting webhooks reference](/api/webhooks/#operation/reportingWebhook) for more information about event types and the information they return.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ListWebhooks200ResponseReportingWebhooksInner where
  parseJSON = genericParseJSON optionsListWebhooks200ResponseReportingWebhooksInner
instance ToJSON ListWebhooks200ResponseReportingWebhooksInner where
  toJSON = genericToJSON optionsListWebhooks200ResponseReportingWebhooksInner

optionsListWebhooks200ResponseReportingWebhooksInner :: Options
optionsListWebhooks200ResponseReportingWebhooksInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("listWebhooks200ResponseReportingWebhooksInnerName", "name")
      , ("listWebhooks200ResponseReportingWebhooksInnerId", "id")
      , ("listWebhooks200ResponseReportingWebhooksInnerEndpoint", "endpoint")
      , ("listWebhooks200ResponseReportingWebhooksInnerDisabled", "disabled")
      , ("listWebhooks200ResponseReportingWebhooksInnerFullUnderscoreresolution", "full_resolution")
      , ("listWebhooks200ResponseReportingWebhooksInnerWithUnderscorecontent", "with_content")
      , ("listWebhooks200ResponseReportingWebhooksInnerEvents", "events")
      ]


-- | 
data ListWorkspaces200Response = ListWorkspaces200Response
  { listWorkspaces200ResponseWorkspaces :: Maybe [ListWorkspaces200ResponseWorkspacesInner] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ListWorkspaces200Response where
  parseJSON = genericParseJSON optionsListWorkspaces200Response
instance ToJSON ListWorkspaces200Response where
  toJSON = genericToJSON optionsListWorkspaces200Response

optionsListWorkspaces200Response :: Options
optionsListWorkspaces200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("listWorkspaces200ResponseWorkspaces", "workspaces")
      ]


-- | Contains workspace properties including the count of messages, people, and objects. Customer.io caches these counts, so your data may be up to two hours old.
data ListWorkspaces200ResponseWorkspacesInner = ListWorkspaces200ResponseWorkspacesInner
  { listWorkspaces200ResponseWorkspacesInnerId :: Maybe Int -- ^ The id of the workspace.
  , listWorkspaces200ResponseWorkspacesInnerName :: Maybe Text -- ^ The name of the workspace.
  , listWorkspaces200ResponseWorkspacesInnerMessagesUnderscoresent :: Maybe Int -- ^ The count of [messages sent](/journeys/message-statuses/#sent) via any channel (email, SMS, in-app, push, slack) in the current billing period.
  , listWorkspaces200ResponseWorkspacesInnerBillableUnderscoremessagesUnderscoresent :: Maybe Int -- ^ The count of [emails sent](/journeys/message-statuses/#sent) that are considered for billing in your current billing period. Ultimately, we only bill for the overages on your plan.
  , listWorkspaces200ResponseWorkspacesInnerPeople :: Maybe Int -- ^ The current count of people profiles in the workspace. Updates roughly every hour.
  , listWorkspaces200ResponseWorkspacesInnerObjectUnderscoretypes :: Maybe Int -- ^ The current count of object types in the workspace. Updates roughly every hour.
  , listWorkspaces200ResponseWorkspacesInnerObjects :: Maybe Int -- ^ The current count of object profiles in the workspace. Updates roughly every hour.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ListWorkspaces200ResponseWorkspacesInner where
  parseJSON = genericParseJSON optionsListWorkspaces200ResponseWorkspacesInner
instance ToJSON ListWorkspaces200ResponseWorkspacesInner where
  toJSON = genericToJSON optionsListWorkspaces200ResponseWorkspacesInner

optionsListWorkspaces200ResponseWorkspacesInner :: Options
optionsListWorkspaces200ResponseWorkspacesInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("listWorkspaces200ResponseWorkspacesInnerId", "id")
      , ("listWorkspaces200ResponseWorkspacesInnerName", "name")
      , ("listWorkspaces200ResponseWorkspacesInnerMessagesUnderscoresent", "messages_sent")
      , ("listWorkspaces200ResponseWorkspacesInnerBillableUnderscoremessagesUnderscoresent", "billable_messages_sent")
      , ("listWorkspaces200ResponseWorkspacesInnerPeople", "people")
      , ("listWorkspaces200ResponseWorkspacesInnerObjectUnderscoretypes", "object_types")
      , ("listWorkspaces200ResponseWorkspacesInnerObjects", "objects")
      ]


-- | 
data LocalData = LocalData
  { localDataName :: Text -- ^ The name of the collection. This is how you'll reference your collection in messages—`{{collection_name.data-property}}`.
  , localDataData :: [(Map.Map String Value)] -- ^ An array of data objects that you want to reference in this collection.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON LocalData where
  parseJSON = genericParseJSON optionsLocalData
instance ToJSON LocalData where
  toJSON = genericToJSON optionsLocalData

optionsLocalData :: Options
optionsLocalData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("localDataName", "name")
      , ("localDataData", "data")
      ]


-- | 
data LocalData1 = LocalData1
  { localData1Name :: Maybe Text -- ^ The name of the collection. This is how you'll reference your collection in messages—`{{collection_name.data-property}}`.
  , localData1Data :: Maybe [(Map.Map String Value)] -- ^ An array of data objects that you want to reference in this collection.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON LocalData1 where
  parseJSON = genericParseJSON optionsLocalData1
instance ToJSON LocalData1 where
  toJSON = genericToJSON optionsLocalData1

optionsLocalData1 :: Options
optionsLocalData1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("localData1Name", "name")
      , ("localData1Data", "data")
      ]


-- | 
data MessageDelivery = MessageDelivery
  { messageDeliveryDelivered :: Maybe Int -- ^ The date-time when the message was delivered, if applicable.
  , messageDeliveryDeliveryUnderscoreid :: Maybe Text -- ^ The message ID.
  , messageDeliveryOpened :: Maybe Bool -- ^ Indicates whether or not a customer opened a message, if the message was delivered.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON MessageDelivery where
  parseJSON = genericParseJSON optionsMessageDelivery
instance ToJSON MessageDelivery where
  toJSON = genericToJSON optionsMessageDelivery

optionsMessageDelivery :: Options
optionsMessageDelivery =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("messageDeliveryDelivered", "delivered")
      , ("messageDeliveryDeliveryUnderscoreid", "delivery_id")
      , ("messageDeliveryOpened", "opened")
      ]


-- | Metrics for an individual instance of a message; each item in the object represents the timestamp when a message achieved a particular metric. This object only contains metrics that have been recorded.
data MessageMetrics = MessageMetrics
  { messageMetricsBounced :: Maybe Int -- ^ The timestamp when the message `bounced`.
  , messageMetricsClicked :: Maybe Int -- ^ The timestamp when the message was `clicked`.
  , messageMetricsHumanUnderscoreclicked :: Maybe Int -- ^ The number of `clicked` messages excluding machine clicks. This metric is reliable starting April 20, 2025. [Learn more](/journeys/analytics/#delivery-metrics).
  , messageMetricsPrefetchUnderscoreclicked :: Maybe Int -- ^ The number of `clicked` messages attributed to machines. This metric is reliable starting April 20, 2025.
  , messageMetricsConverted :: Maybe Int -- ^ The timestamp when the message was `converted`.
  , messageMetricsCreated :: Maybe Int -- ^ The timestamp when the message was `created`.
  , messageMetricsDelivered :: Maybe Int -- ^ The timestamp when the message was `delivered`.
  , messageMetricsDrafted :: Maybe Int -- ^ The timestamp when the message was `drafted`.
  , messageMetricsDropped :: Maybe Int -- ^ The timestamp when the message was `dropped`.
  , messageMetricsFailed :: Maybe Int -- ^ The timestamp when the message `failed`.
  , messageMetricsOpened :: Maybe Int -- ^ The timestamp when the message was `opened`.
  , messageMetricsHumanUnderscoreopened :: Maybe Int -- ^ The number of `opened` messages excluding machine opens. This metric is reliable starting March 20, 2025. [Learn more](/journeys/analytics/#delivery-metrics).
  , messageMetricsPrefetchUnderscoreopened :: Maybe Int -- ^ The number of `opened` messages attributed to machines. This metric is reliable starting March 20, 2025.
  , messageMetricsSent :: Maybe Int -- ^ The timestamp when the message was `sent`.
  , messageMetricsSpammed :: Maybe Int -- ^ The timestamp when the message was marked as spam.
  , messageMetricsUndeliverable :: Maybe Int -- ^ The timestamp when the message became `undeliverable`.
  , messageMetricsUnsubscribed :: Maybe Int -- ^ The timestamp when a person unsubscribed based on this message.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON MessageMetrics where
  parseJSON = genericParseJSON optionsMessageMetrics
instance ToJSON MessageMetrics where
  toJSON = genericToJSON optionsMessageMetrics

optionsMessageMetrics :: Options
optionsMessageMetrics =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("messageMetricsBounced", "bounced")
      , ("messageMetricsClicked", "clicked")
      , ("messageMetricsHumanUnderscoreclicked", "human_clicked")
      , ("messageMetricsPrefetchUnderscoreclicked", "prefetch_clicked")
      , ("messageMetricsConverted", "converted")
      , ("messageMetricsCreated", "created")
      , ("messageMetricsDelivered", "delivered")
      , ("messageMetricsDrafted", "drafted")
      , ("messageMetricsDropped", "dropped")
      , ("messageMetricsFailed", "failed")
      , ("messageMetricsOpened", "opened")
      , ("messageMetricsHumanUnderscoreopened", "human_opened")
      , ("messageMetricsPrefetchUnderscoreopened", "prefetch_opened")
      , ("messageMetricsSent", "sent")
      , ("messageMetricsSpammed", "spammed")
      , ("messageMetricsUndeliverable", "undeliverable")
      , ("messageMetricsUnsubscribed", "unsubscribed")
      ]


-- | Describes an individual message delivery. The object contains keys for all possible parents of the message (&#x60;newsletter_id&#x60;, &#x60;broadcast_id&#x60;, etc) but only the parents of the delivery are populated. Other parent IDs are null.
data MessageObject = MessageObject
  { messageObjectId :: Maybe Text -- ^ The identifier for a delivery—the instance of a message intended for an individual recipient.
  , messageObjectDeduplicateUnderscoreid :: Maybe Text -- ^ An identifier in the format `id:timestamp` where the id is the id of the object you are working with (Campaigns, Deliveries, Exports, Identities, Newsletters, Segments, and Templates), and the timestamp is the last time the object was updated.
  , messageObjectMessageUnderscoretemplateUnderscoreid :: Maybe Int -- ^ The identifier of the message template used to create a message.
  , messageObjectCustomerUnderscoreid :: Maybe Text -- ^ The ID of a customer profile, analogous to a \"person\" in the UI. If your workspace supports multiple identifiers (email and ID), this value can be null.
  , messageObjectCustomerUnderscoreidentifiers :: Maybe ListActivities200ResponseActivitiesInnerCustomerIdentifiers -- ^ 
  , messageObjectRecipient :: Maybe Text -- ^ The recipient address for an action.
  , messageObjectSubject :: Maybe Text -- ^ The subject line for an `email` action.
  , messageObjectMetrics :: Maybe BroadcastMessages200ResponseMessagesInnerMetrics -- ^ 
  , messageObjectCreated :: Maybe Int -- ^ The date time when the referenced ID was created.
  , messageObjectFailureUnderscoremessage :: Maybe Text -- ^ Explains why a message failed, if applicable.
  , messageObjectCampaignUnderscoreid :: Maybe Int -- ^ The identifier for a campaign.
  , messageObjectActionUnderscoreid :: Maybe Int -- ^ The identifier for an action.
  , messageObjectParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , messageObjectNewsletterUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter.
  , messageObjectContentUnderscoreid :: Maybe Int -- ^ The identifier for a message in a newsletter. Newsletters can have multiple content IDs (for multi-language messages or A/B tests).
  , messageObjectBroadcastUnderscoreid :: Maybe Int -- ^ The identifier for a broadcast.
  , messageObjectTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , messageObjectType :: Maybe Text -- ^ The type of message/action.
  , messageObjectForgotten :: Maybe Bool -- ^ If true message contents are not retained by Customer.io.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON MessageObject where
  parseJSON = genericParseJSON optionsMessageObject
instance ToJSON MessageObject where
  toJSON = genericToJSON optionsMessageObject

optionsMessageObject :: Options
optionsMessageObject =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("messageObjectId", "id")
      , ("messageObjectDeduplicateUnderscoreid", "deduplicate_id")
      , ("messageObjectMessageUnderscoretemplateUnderscoreid", "message_template_id")
      , ("messageObjectCustomerUnderscoreid", "customer_id")
      , ("messageObjectCustomerUnderscoreidentifiers", "customer_identifiers")
      , ("messageObjectRecipient", "recipient")
      , ("messageObjectSubject", "subject")
      , ("messageObjectMetrics", "metrics")
      , ("messageObjectCreated", "created")
      , ("messageObjectFailureUnderscoremessage", "failure_message")
      , ("messageObjectCampaignUnderscoreid", "campaign_id")
      , ("messageObjectActionUnderscoreid", "action_id")
      , ("messageObjectParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("messageObjectNewsletterUnderscoreid", "newsletter_id")
      , ("messageObjectContentUnderscoreid", "content_id")
      , ("messageObjectBroadcastUnderscoreid", "broadcast_id")
      , ("messageObjectTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("messageObjectType", "type")
      , ("messageObjectForgotten", "forgotten")
      ]


-- | Total metrics over the lifespan of the requested item.
data MessageTotalMetrics = MessageTotalMetrics
  { messageTotalMetricsBounced :: Maybe Int -- ^ The number of `bounced` messages.
  , messageTotalMetricsClicked :: Maybe Int -- ^ The number of `clicked` messages.
  , messageTotalMetricsConverted :: Maybe Int -- ^ The number of `converted` messages.
  , messageTotalMetricsCreated :: Maybe Int -- ^ The number of `created` messages.
  , messageTotalMetricsDelivered :: Maybe Int -- ^ The number of `delivered` messages.
  , messageTotalMetricsDrafted :: Maybe Int -- ^ The number of `drafted` messages.
  , messageTotalMetricsDropped :: Maybe Int -- ^ The number of `dropped` messages.
  , messageTotalMetricsFailed :: Maybe Int -- ^ The number of `failed` messages.
  , messageTotalMetricsOpened :: Maybe Int -- ^ The number of `opened` messages
  , messageTotalMetricsSent :: Maybe Int -- ^ The number of `sent` messages
  , messageTotalMetricsSpammed :: Maybe Int -- ^ The number of messages marked as spam.
  , messageTotalMetricsUndeliverable :: Maybe Int -- ^ The number of `undeliverable` messages.
  , messageTotalMetricsUnsubscribed :: Maybe Int -- ^ The number of unsubscribes attributed to messages.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON MessageTotalMetrics where
  parseJSON = genericParseJSON optionsMessageTotalMetrics
instance ToJSON MessageTotalMetrics where
  toJSON = genericToJSON optionsMessageTotalMetrics

optionsMessageTotalMetrics :: Options
optionsMessageTotalMetrics =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("messageTotalMetricsBounced", "bounced")
      , ("messageTotalMetricsClicked", "clicked")
      , ("messageTotalMetricsConverted", "converted")
      , ("messageTotalMetricsCreated", "created")
      , ("messageTotalMetricsDelivered", "delivered")
      , ("messageTotalMetricsDrafted", "drafted")
      , ("messageTotalMetricsDropped", "dropped")
      , ("messageTotalMetricsFailed", "failed")
      , ("messageTotalMetricsOpened", "opened")
      , ("messageTotalMetricsSent", "sent")
      , ("messageTotalMetricsSpammed", "spammed")
      , ("messageTotalMetricsUndeliverable", "undeliverable")
      , ("messageTotalMetricsUnsubscribed", "unsubscribed")
      ]


-- | The type of message/action.
data MessageType = MessageType
  { 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON MessageType where
  parseJSON = genericParseJSON optionsMessageType
instance ToJSON MessageType where
  toJSON = genericToJSON optionsMessageType

optionsMessageType :: Options
optionsMessageType =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ 
      ]


-- | Determines the metric(s) you want to return.
data Metric = Metric
  { 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Metric where
  parseJSON = genericParseJSON optionsMetric
instance ToJSON Metric where
  toJSON = genericToJSON optionsMetric

optionsMetric :: Options
optionsMetric =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ 
      ]


-- | 
data MobileScreenView = MobileScreenView
  { mobileScreenViewAnonymousUnderscoreid :: Maybe Text -- ^ An identifier for an anonymous event, like a cookie. If set as an attribute on a person, any events bearing the same anonymous value are associated with this person. This value must be unique and is not reusable.
  , mobileScreenViewName :: Text -- ^ The name of the event. In general, this should be the name of the screen or deep link path that a person viewed, making it easy to segment your audience or trigger campaigns using this event. Make sure you trim leading and trailing spaces from this field.
  , mobileScreenViewId :: Maybe Text -- ^ An identifier used to deduplicate events. This value must be a [ULID](https://github.com/ulid/spec). If an event has the same value as an event we previously received, we won't show or process the duplicate. Note - our Python and Ruby libraries do not pass this id.
  , mobileScreenViewType :: Text -- ^ Indicates that the event represents a mobile screen view. You can also capture screen events directly with [our iOS SDK](/sdk/ios/track-events/#screen-view-events).
  , mobileScreenViewTimestamp :: Maybe Int -- ^ The unix timestamp when the event took place. If you don't provide this value, we use the date-time when we receive the event. 
  , mobileScreenViewData :: Maybe (Map.Map String Value) -- ^ Additional information that you might want to reference in a message using liquid or use to set attributes on your customer (referenced by `customer_id`).
  } deriving (Show, Eq, Generic, Data)

instance FromJSON MobileScreenView where
  parseJSON = genericParseJSON optionsMobileScreenView
instance ToJSON MobileScreenView where
  toJSON = genericToJSON optionsMobileScreenView

optionsMobileScreenView :: Options
optionsMobileScreenView =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("mobileScreenViewAnonymousUnderscoreid", "anonymous_id")
      , ("mobileScreenViewName", "name")
      , ("mobileScreenViewId", "id")
      , ("mobileScreenViewType", "type")
      , ("mobileScreenViewTimestamp", "timestamp")
      , ("mobileScreenViewData", "data")
      ]


-- | 
data MobileScreenView1 = MobileScreenView1
  { mobileScreenView1AnonymousUnderscoreid :: Text -- ^ An identifier for an anonymous event, like a cookie. If set as an attribute on a person, any events bearing the same anonymous value are associated with this person. This value must be unique and is not reusable.
  , mobileScreenView1Name :: Text -- ^ The name of the event. In general, this should be the name of the screen or deep link path that a person viewed, making it easy to segment your audience or trigger campaigns from these events. Make sure you trim leading and trailing spaces from this field.
  , mobileScreenView1Id :: Maybe Text -- ^ An identifier used to deduplicate events. This value must be a [ULID](https://github.com/ulid/spec). If an event has the same value as an event we previously received, we won't show or process the duplicate. Note - our Python and Ruby libraries do not pass this id.
  , mobileScreenView1Type :: Text -- ^ Indicates that the event represents a mobile screen view. You can also capture screen events directly with [our iOS SDK](/sdk/ios/track-events/#screen-view-events).
  , mobileScreenView1Timestamp :: Maybe Int -- ^ The unix timestamp when the event took place. If you don't provide this value, we use the date-time when we receive the event. 
  , mobileScreenView1Data :: Maybe (Map.Map String Value) -- ^ Additional information that you might want to reference in a message using liquid or use to set attributes on your customer (referenced by `customer_id`).
  } deriving (Show, Eq, Generic, Data)

instance FromJSON MobileScreenView1 where
  parseJSON = genericParseJSON optionsMobileScreenView1
instance ToJSON MobileScreenView1 where
  toJSON = genericToJSON optionsMobileScreenView1

optionsMobileScreenView1 :: Options
optionsMobileScreenView1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("mobileScreenView1AnonymousUnderscoreid", "anonymous_id")
      , ("mobileScreenView1Name", "name")
      , ("mobileScreenView1Id", "id")
      , ("mobileScreenView1Type", "type")
      , ("mobileScreenView1Timestamp", "timestamp")
      , ("mobileScreenView1Data", "data")
      ]


-- | 
data Newsletter = Newsletter
  { newsletterCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , newsletterDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , newsletterNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , newsletterContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Newsletter where
  parseJSON = genericParseJSON optionsNewsletter
instance ToJSON Newsletter where
  toJSON = genericToJSON optionsNewsletter

optionsNewsletter :: Options
optionsNewsletter =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("newsletterCustomerUnderscoreid", "customer_id")
      , ("newsletterDeliveryUnderscoreid", "delivery_id")
      , ("newsletterNewsletterUnderscoreid", "newsletter_id")
      , ("newsletterContentUnderscoreid", "content_id")
      ]


-- | 
data Newsletter1 = Newsletter1
  { newsletter1CustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , newsletter1DeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , newsletter1NewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , newsletter1ContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , newsletter1Identifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Newsletter1 where
  parseJSON = genericParseJSON optionsNewsletter1
instance ToJSON Newsletter1 where
  toJSON = genericToJSON optionsNewsletter1

optionsNewsletter1 :: Options
optionsNewsletter1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("newsletter1CustomerUnderscoreid", "customer_id")
      , ("newsletter1DeliveryUnderscoreid", "delivery_id")
      , ("newsletter1NewsletterUnderscoreid", "newsletter_id")
      , ("newsletter1ContentUnderscoreid", "content_id")
      , ("newsletter1Identifiers", "identifiers")
      ]


-- | 
data NewsletterObject = NewsletterObject
  { newsletterObjectId :: Maybe Int -- ^ The identifier for a newsletter.
  , newsletterObjectDeduplicateUnderscoreid :: Maybe Text -- ^ An identifier in the format `id:timestamp` where the id is the id of the object you are working with (Campaigns, Deliveries, Exports, Identities, Newsletters, Segments, and Templates), and the timestamp is the last time the object was updated.
  , newsletterObjectContentUnderscoreids :: Maybe [Int] -- ^ A list of messages contained by a newsletter. If your newsletter includes a list of languages and/or A/B test variants, the array contains a content ID for each language/variant. [Look up a newsletter variant](#operation/getNewsletterVariant) to get more information about an individual content ID.
  , newsletterObjectName :: Maybe Text -- ^ The name of the newsletter.
  , newsletterObjectSentUnderscoreat :: Maybe Int -- ^ The last time the newsletter was sent.
  , newsletterObjectCreated :: Maybe Int -- ^ The date time when the referenced ID was created.
  , newsletterObjectUpdated :: Maybe Int -- ^ The date time when the referenced ID was last updated.
  , newsletterObjectType :: Maybe Text -- ^ The type of newsletter—`email`, `twilio`, etc.
  , newsletterObjectTags :: Maybe [Text] -- ^ An array of tags you set on this newsletter.
  , newsletterObjectRecipientUnderscoresegmentUnderscoreids :: Maybe [Int] -- ^ A list of segments used in a newsletter's recipient filter, returned if newsletter recipients were filtered by one or more segments.
  , newsletterObjectSubscriptionUnderscoretopicUnderscoreid :: Maybe Int -- ^ The identifier of a subscription topic. Remember, subscription topics are assigned an incrementing number, starting at 1.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON NewsletterObject where
  parseJSON = genericParseJSON optionsNewsletterObject
instance ToJSON NewsletterObject where
  toJSON = genericToJSON optionsNewsletterObject

optionsNewsletterObject :: Options
optionsNewsletterObject =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("newsletterObjectId", "id")
      , ("newsletterObjectDeduplicateUnderscoreid", "deduplicate_id")
      , ("newsletterObjectContentUnderscoreids", "content_ids")
      , ("newsletterObjectName", "name")
      , ("newsletterObjectSentUnderscoreat", "sent_at")
      , ("newsletterObjectCreated", "created")
      , ("newsletterObjectUpdated", "updated")
      , ("newsletterObjectType", "type")
      , ("newsletterObjectTags", "tags")
      , ("newsletterObjectRecipientUnderscoresegmentUnderscoreids", "recipient_segment_ids")
      , ("newsletterObjectSubscriptionUnderscoretopicUnderscoreid", "subscription_topic_id")
      ]


-- | Returns results if a condition is false. While and/or support an array of items, &#x60;not&#x60; supports a single filter object.
data Not = Not
  { notAnd :: Maybe [PeopleFilter] -- ^ Match *all* conditions to return results.
  , notOr :: Maybe [PeopleFilter] -- ^ Match *any* condition to return results.
  , notSegment :: Maybe Segment -- ^ 
  , notAttribute :: Maybe Attribute -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Not where
  parseJSON = genericParseJSON optionsNot
instance ToJSON Not where
  toJSON = genericToJSON optionsNot

optionsNot :: Options
optionsNot =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("notAnd", "and")
      , ("notOr", "or")
      , ("notSegment", "segment")
      , ("notAttribute", "attribute")
      ]


-- | 
data Not1 = Not1
  { not1Not :: Maybe Not1Not -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Not1 where
  parseJSON = genericParseJSON optionsNot1
instance ToJSON Not1 where
  toJSON = genericToJSON optionsNot1

optionsNot1 :: Options
optionsNot1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("not1Not", "not")
      ]


-- | Returns results if a condition is false. While and/or support an array of items, &#x60;not&#x60; supports a single condition.
data Not1Not = Not1Not
  { not1NotObjectUnderscoreattribute :: Maybe ObjectAttribute -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Not1Not where
  parseJSON = genericParseJSON optionsNot1Not
instance ToJSON Not1Not where
  toJSON = genericToJSON optionsNot1Not

optionsNot1Not :: Options
optionsNot1Not =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("not1NotObjectUnderscoreattribute", "object_attribute")
      ]


-- | Returns results if a condition is false. While and/or support an array of items, &#x60;not&#x60; supports a single filter object.
data NotAudienceFilter = NotAudienceFilter
  { notAudienceFilterAnd :: Maybe [PeopleFilter] -- ^ Match *all* conditions to return results.
  , notAudienceFilterOr :: Maybe [PeopleFilter] -- ^ Match *any* condition to return results.
  , notAudienceFilterSegment :: Maybe Segment -- ^ 
  , notAudienceFilterAttribute :: Maybe Attribute -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON NotAudienceFilter where
  parseJSON = genericParseJSON optionsNotAudienceFilter
instance ToJSON NotAudienceFilter where
  toJSON = genericToJSON optionsNotAudienceFilter

optionsNotAudienceFilter :: Options
optionsNotAudienceFilter =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("notAudienceFilterAnd", "and")
      , ("notAudienceFilterOr", "or")
      , ("notAudienceFilterSegment", "segment")
      , ("notAudienceFilterAttribute", "attribute")
      ]


-- | 
data NotificationAndDataObject = NotificationAndDataObject
  { notificationAndDataObjectNotification :: NotificationAndDataObjectNotification -- ^ 
  , notificationAndDataObjectData :: Maybe FcmBasicPushMessageData -- ^ 
  , notificationAndDataObjectAndroid :: Maybe DataObjectOnlyAndroid -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON NotificationAndDataObject where
  parseJSON = genericParseJSON optionsNotificationAndDataObject
instance ToJSON NotificationAndDataObject where
  toJSON = genericToJSON optionsNotificationAndDataObject

optionsNotificationAndDataObject :: Options
optionsNotificationAndDataObject =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("notificationAndDataObjectNotification", "notification")
      , ("notificationAndDataObjectData", "data")
      , ("notificationAndDataObjectAndroid", "android")
      ]


-- | Contains properties interpreted by the SDK except for the &#x60;link&#x60;.
data NotificationAndDataObjectNotification = NotificationAndDataObjectNotification
  { notificationAndDataObjectNotificationTitle :: Maybe Text -- ^ The title of your push notification.
  , notificationAndDataObjectNotificationBody :: Maybe Text -- ^ The body of your push notification.
  , notificationAndDataObjectNotificationImage :: Maybe Text -- ^ The URL of an HTTPS image that you want to use for your message.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON NotificationAndDataObjectNotification where
  parseJSON = genericParseJSON optionsNotificationAndDataObjectNotification
instance ToJSON NotificationAndDataObjectNotification where
  toJSON = genericToJSON optionsNotificationAndDataObjectNotification

optionsNotificationAndDataObjectNotification :: Options
optionsNotificationAndDataObjectNotification =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("notificationAndDataObjectNotificationTitle", "title")
      , ("notificationAndDataObjectNotificationBody", "body")
      , ("notificationAndDataObjectNotificationImage", "image")
      ]


-- | Contains your import parameters.
data Object = Object
  { objectName :: Text -- ^ A friendly name for your import. This helps you identify your import.
  , objectDataUnderscorefileUnderscoreurl :: Text -- ^ The URL or path to the CSV file you want to import.
  , objectObjectUnderscoretypeUnderscoreid :: Text -- ^ The object type an object belongs to—like \"Companies\" or \"Accounts\". Object type IDs are string-formatted integers that begin at `1` and increment for each new type.
  , objectType :: Text -- ^ The type of import.
  , objectDataUnderscoretoUnderscoreprocess :: Maybe Text -- ^ Determines whether your import operation performs `all` add/update operations, only adds items (`only_new`), or only updates existing items (`only_existing`). Defaults to `all`. If `import_type` is `event`, you can only use `all` or `only_existing`.   This field was previously called `people_to_process` - we still support it but will deprecate it soon. 
  , objectDescription :: Maybe Text -- ^ A helpful description that can help you find and recognize your import operation.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Object where
  parseJSON = genericParseJSON optionsObject
instance ToJSON Object where
  toJSON = genericToJSON optionsObject

optionsObject :: Options
optionsObject =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("objectName", "name")
      , ("objectDataUnderscorefileUnderscoreurl", "data_file_url")
      , ("objectObjectUnderscoretypeUnderscoreid", "object_type_id")
      , ("objectType", "type")
      , ("objectDataUnderscoretoUnderscoreprocess", "data_to_process")
      , ("objectDescription", "description")
      ]


-- | Filter your objects by their attributes.
data ObjectAttribute = ObjectAttribute
  { objectAttributeField :: Text -- ^ The name of the attribute you want to filter against.
  , objectAttributeOperator :: Text -- ^ Determine how to evaluate criteria against the field—`exists` returns results if an object has the attribute; `eq` returns results an object's attribute exists and the attribute has the `value` you specify.
  , objectAttributeValue :: Maybe Text -- ^ The value you want to match for this attribute. You must include a value if you use the `eq` operator.
  , objectAttributeTypeUnderscoreid :: Text -- ^ The object type an object belongs to—like \"Companies\" or \"Accounts\". Object type IDs are string-formatted integers that begin at `1` and increment for each new type.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ObjectAttribute where
  parseJSON = genericParseJSON optionsObjectAttribute
instance ToJSON ObjectAttribute where
  toJSON = genericToJSON optionsObjectAttribute

optionsObjectAttribute :: Options
optionsObjectAttribute =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("objectAttributeField", "field")
      , ("objectAttributeOperator", "operator")
      , ("objectAttributeValue", "value")
      , ("objectAttributeTypeUnderscoreid", "type_id")
      ]


-- | A simple filter to find objects matching an attribute condition.
data ObjectAttribute1 = ObjectAttribute1
  { objectAttribute1ObjectUnderscoreattribute :: Maybe ObjectAttribute -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ObjectAttribute1 where
  parseJSON = genericParseJSON optionsObjectAttribute1
instance ToJSON ObjectAttribute1 where
  toJSON = genericToJSON optionsObjectAttribute1

optionsObjectAttribute1 :: Options
optionsObjectAttribute1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("objectAttribute1ObjectUnderscoreattribute", "object_attribute")
      ]


-- | Defines the people who will start a journey in your campaign.
data ObjectAudience = ObjectAudience
  { objectAudienceType :: Maybe Int -- ^ The type of audience selected. \"Every person in the object\" is `1`. \"Certain people in the object\" is also `1`. \"Certain people\" will always have one or more audience filters (see below). \"Every person\" will never have an audience filter.
  , objectAudiencePersonUnderscorefilters :: Maybe Value -- ^ Returns the profile attributes you filtered the audience by, if any. Only applies to `type 1`, \"Certain people in the object\".
  , objectAudienceRelationshipUnderscorefilters :: Maybe Value -- ^ Returns the relationship attributes you filtered the audience by, if any. Only applies to `type 1`, \"Certain people in the object\".
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ObjectAudience where
  parseJSON = genericParseJSON optionsObjectAudience
instance ToJSON ObjectAudience where
  toJSON = genericToJSON optionsObjectAudience

optionsObjectAudience :: Options
optionsObjectAudience =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("objectAudienceType", "type")
      , ("objectAudiencePersonUnderscorefilters", "person_filters")
      , ("objectAudienceRelationshipUnderscorefilters", "relationship_filters")
      ]


-- | 
data ObjectCommon = ObjectCommon
  { objectCommonIdentifiers :: Maybe ObjectCommonAllOfIdentifiers -- ^ 
  , objectCommonType :: Text -- ^ The operation modifies a single object—non person data.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ObjectCommon where
  parseJSON = genericParseJSON optionsObjectCommon
instance ToJSON ObjectCommon where
  toJSON = genericToJSON optionsObjectCommon

optionsObjectCommon :: Options
optionsObjectCommon =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("objectCommonIdentifiers", "identifiers")
      , ("objectCommonType", "type")
      ]


-- | The identifiers for a particular object. You can use either the &#x60;object_type_id&#x60; and &#x60;object_id&#x60; (where &#x60;object_type_id&#x60; represents the type of object and the &#x60;object_id&#x60; is the individual identifier for the object) or the &#x60;cio_object_id&#x60;.
data ObjectCommonAllOfIdentifiers = ObjectCommonAllOfIdentifiers
  { objectCommonAllOfIdentifiersObjectUnderscoretypeUnderscoreid :: Text -- ^ The object type an object belongs to—like \"Companies\" or \"Accounts\". Object type IDs are string-formatted integers that begin at `1` and increment for each new type.
  , objectCommonAllOfIdentifiersObjectUnderscoreid :: Text -- ^ The unique identifier for an object. If you use an `object_id` that already exists, we'll update the object accordingly.
  , objectCommonAllOfIdentifiersCioUnderscoreobjectUnderscoreid :: Text -- ^ A unique value that Customer.io sets for an object when you create it. This ID is immutable.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ObjectCommonAllOfIdentifiers where
  parseJSON = genericParseJSON optionsObjectCommonAllOfIdentifiers
instance ToJSON ObjectCommonAllOfIdentifiers where
  toJSON = genericToJSON optionsObjectCommonAllOfIdentifiers

optionsObjectCommonAllOfIdentifiers :: Options
optionsObjectCommonAllOfIdentifiers =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("objectCommonAllOfIdentifiersObjectUnderscoretypeUnderscoreid", "object_type_id")
      , ("objectCommonAllOfIdentifiersObjectUnderscoreid", "object_id")
      , ("objectCommonAllOfIdentifiersCioUnderscoreobjectUnderscoreid", "cio_object_id")
      ]


-- | 
data ObjectCommonIdentify = ObjectCommonIdentify
  { objectCommonIdentifyIdentifiers :: IdentifyAllOfIdentifiers -- ^ 
  , objectCommonIdentifyType :: Text -- ^ The operation modifies a single object—non person data.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ObjectCommonIdentify where
  parseJSON = genericParseJSON optionsObjectCommonIdentify
instance ToJSON ObjectCommonIdentify where
  toJSON = genericToJSON optionsObjectCommonIdentify

optionsObjectCommonIdentify :: Options
optionsObjectCommonIdentify =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("objectCommonIdentifyIdentifiers", "identifiers")
      , ("objectCommonIdentifyType", "type")
      ]


-- | When filtering for objects, you can use &#x60;and&#x60; and &#x60;or&#x60; arrays to determine the logic for a group of filter conditions. &#x60;not&#x60; reverses the filter condition and matches when the condition is false. &#x60;object_attribute&#x60; represents the individual conditions you can filter objects by.  The top level of this object can only contain a single property, but you can nest &#x60;and&#x60; and &#x60;or&#x60; properties to produce complex filters. 
data ObjectFilter = ObjectFilter
  { objectFilterAnd :: Maybe [And2AndInner] -- ^ Match *all* conditions to return results.
  , objectFilterOr :: Maybe [And2AndInner] -- ^ Match *any* condition to return results.
  , objectFilterNot :: Maybe Not1Not -- ^ 
  , objectFilterObjectUnderscoreattribute :: Maybe ObjectAttribute -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ObjectFilter where
  parseJSON = genericParseJSON optionsObjectFilter
instance ToJSON ObjectFilter where
  toJSON = genericToJSON optionsObjectFilter

optionsObjectFilter :: Options
optionsObjectFilter =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("objectFilterAnd", "and")
      , ("objectFilterOr", "or")
      , ("objectFilterNot", "not")
      , ("objectFilterObjectUnderscoreattribute", "object_attribute")
      ]


-- | 
data ObjectFilterAnd = ObjectFilterAnd
  { objectFilterAndAnd :: Maybe [And2AndInner] -- ^ Match *all* conditions to return results.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ObjectFilterAnd where
  parseJSON = genericParseJSON optionsObjectFilterAnd
instance ToJSON ObjectFilterAnd where
  toJSON = genericToJSON optionsObjectFilterAnd

optionsObjectFilterAnd :: Options
optionsObjectFilterAnd =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("objectFilterAndAnd", "and")
      ]


-- | 
data ObjectFilterNot = ObjectFilterNot
  { objectFilterNotNot :: Maybe Not1Not -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ObjectFilterNot where
  parseJSON = genericParseJSON optionsObjectFilterNot
instance ToJSON ObjectFilterNot where
  toJSON = genericToJSON optionsObjectFilterNot

optionsObjectFilterNot :: Options
optionsObjectFilterNot =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("objectFilterNotNot", "not")
      ]


-- | 
data ObjectFilterOr = ObjectFilterOr
  { objectFilterOrOr :: Maybe [And2AndInner] -- ^ Match *any* condition to return results.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ObjectFilterOr where
  parseJSON = genericParseJSON optionsObjectFilterOr
instance ToJSON ObjectFilterOr where
  toJSON = genericToJSON optionsObjectFilterOr

optionsObjectFilterOr :: Options
optionsObjectFilterOr =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("objectFilterOrOr", "or")
      ]


-- | 
data ObjectID = ObjectID
  { objectIDObjectUnderscoretypeUnderscoreid :: Text -- ^ The object type an object belongs to—like \"Companies\" or \"Accounts\". Object type IDs are string-formatted integers that begin at `1` and increment for each new type.
  , objectIDObjectUnderscoreid :: Text -- ^ The unique identifier for an object. If you use an `object_id` that already exists, we'll update the object accordingly.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ObjectID where
  parseJSON = genericParseJSON optionsObjectID
instance ToJSON ObjectID where
  toJSON = genericToJSON optionsObjectID

optionsObjectID :: Options
optionsObjectID =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("objectIDObjectUnderscoretypeUnderscoreid", "object_type_id")
      , ("objectIDObjectUnderscoreid", "object_id")
      ]


-- | 
data ObjectIDCreateAndUpdate = ObjectIDCreateAndUpdate
  { objectIDCreateAndUpdateObjectUnderscoretypeUnderscoreid :: Text -- ^ The object type an object belongs to—like \"Companies\" or \"Accounts\". Object type IDs are string-formatted integers that begin at `1` and increment for each new type.
  , objectIDCreateAndUpdateObjectUnderscoreid :: Text -- ^ The unique identifier for an object. If you use an `object_id` that already exists, we'll update the object accordingly.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ObjectIDCreateAndUpdate where
  parseJSON = genericParseJSON optionsObjectIDCreateAndUpdate
instance ToJSON ObjectIDCreateAndUpdate where
  toJSON = genericToJSON optionsObjectIDCreateAndUpdate

optionsObjectIDCreateAndUpdate :: Options
optionsObjectIDCreateAndUpdate =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("objectIDCreateAndUpdateObjectUnderscoretypeUnderscoreid", "object_type_id")
      , ("objectIDCreateAndUpdateObjectUnderscoreid", "object_id")
      ]


-- | 
data ObjectIdentifiers = ObjectIdentifiers
  { objectIdentifiersIdentifiers :: Maybe ObjectIdentifiersIdentifiers -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ObjectIdentifiers where
  parseJSON = genericParseJSON optionsObjectIdentifiers
instance ToJSON ObjectIdentifiers where
  toJSON = genericToJSON optionsObjectIdentifiers

optionsObjectIdentifiers :: Options
optionsObjectIdentifiers =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("objectIdentifiersIdentifiers", "identifiers")
      ]


-- | The identifiers for a particular object. You can use either the &#x60;object_type_id&#x60; and &#x60;object_id&#x60; (where &#x60;object_type_id&#x60; represents the type of object and the &#x60;object_id&#x60; is the individual identifier for the object) or the &#x60;cio_object_id&#x60;.
data ObjectIdentifiersIdentifiers = ObjectIdentifiersIdentifiers
  { objectIdentifiersIdentifiersObjectUnderscoretypeUnderscoreid :: Text -- ^ The object type an object belongs to—like \"Companies\" or \"Accounts\". Object type IDs are string-formatted integers that begin at `1` and increment for each new type.
  , objectIdentifiersIdentifiersObjectUnderscoreid :: Text -- ^ The unique identifier for an object. If you use an `object_id` that already exists, we'll update the object accordingly.
  , objectIdentifiersIdentifiersCioUnderscoreobjectUnderscoreid :: Text -- ^ A unique value that Customer.io sets for an object when you create it. This ID is immutable.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ObjectIdentifiersIdentifiers where
  parseJSON = genericParseJSON optionsObjectIdentifiersIdentifiers
instance ToJSON ObjectIdentifiersIdentifiers where
  toJSON = genericToJSON optionsObjectIdentifiersIdentifiers

optionsObjectIdentifiersIdentifiers :: Options
optionsObjectIdentifiersIdentifiers =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("objectIdentifiersIdentifiersObjectUnderscoretypeUnderscoreid", "object_type_id")
      , ("objectIdentifiersIdentifiersObjectUnderscoreid", "object_id")
      , ("objectIdentifiersIdentifiersCioUnderscoreobjectUnderscoreid", "cio_object_id")
      ]


-- | The &#x60;action&#x60; determines the type of operation you want to perform with an object. If &#x60;identifiers.object_id&#x60; does not exist, we&#39;ll create a new object; if it exists, we&#39;ll update the object accordingly. 
data ObjectIdentify = ObjectIdentify
  { objectIdentifyIdentifiers :: ObjectIdentifyAllOfIdentifiers -- ^ 
  , objectIdentifyType :: Text -- ^ The operation modifies a single object—non person data.
  , objectIdentifyAction :: Text -- ^ Indicates that the operation will `identify` the the item of the specified `type`.
  , objectIdentifyAttributes :: Maybe Value -- ^ The data that belongs to the object. This is information you might want to associate with people later (through `cio_relationships`). Passing `null` or an empty string removes the attribute from the object. Some attributes have special meaning. Please refer to the list of [reserved attributes](/journeys/objects-create/#reserved-attributes). 
  , objectIdentifyCioUnderscorerelationships :: Maybe [ObjectIdentifyAllOfCioRelationships] -- ^ The people you want to associate with an object. Each object in the array represents a person.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ObjectIdentify where
  parseJSON = genericParseJSON optionsObjectIdentify
instance ToJSON ObjectIdentify where
  toJSON = genericToJSON optionsObjectIdentify

optionsObjectIdentify :: Options
optionsObjectIdentify =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("objectIdentifyIdentifiers", "identifiers")
      , ("objectIdentifyType", "type")
      , ("objectIdentifyAction", "action")
      , ("objectIdentifyAttributes", "attributes")
      , ("objectIdentifyCioUnderscorerelationships", "cio_relationships")
      ]


-- | 
data ObjectIdentifyAllOfCioRelationships = ObjectIdentifyAllOfCioRelationships
  { objectIdentifyAllOfCioRelationshipsIdentifiers :: Maybe ObjectIdentifyAllOfIdentifiers1 -- ^ 
  , objectIdentifyAllOfCioRelationshipsRelationshipUnderscoreattributes :: Maybe (Map.Map String Value) -- ^ The attributes associated with a relationship. Passing null or an empty string removes the attribute from the relationship. 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ObjectIdentifyAllOfCioRelationships where
  parseJSON = genericParseJSON optionsObjectIdentifyAllOfCioRelationships
instance ToJSON ObjectIdentifyAllOfCioRelationships where
  toJSON = genericToJSON optionsObjectIdentifyAllOfCioRelationships

optionsObjectIdentifyAllOfCioRelationships :: Options
optionsObjectIdentifyAllOfCioRelationships =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("objectIdentifyAllOfCioRelationshipsIdentifiers", "identifiers")
      , ("objectIdentifyAllOfCioRelationshipsRelationshipUnderscoreattributes", "relationship_attributes")
      ]


-- | The identifiers for a custom object. When identifying a new object, you *must* use both the &#x60;object_type_id&#x60; and &#x60;object_id&#x60; (where &#x60;object_type_id&#x60; is an integer representing the type of object and the &#x60;object_id&#x60; is the individual identifier for the object).  If you&#39;re updating an existing object, you can use either the &#x60;object_type_id&#x60; and &#x60;object_id&#x60; or the &#x60;cio_object_id&#x60; (where &#x60;cio_object_id&#x60; is an immutable unique value that Customer.io sets for an object when you create it). 
data ObjectIdentifyAllOfIdentifiers = ObjectIdentifyAllOfIdentifiers
  { objectIdentifyAllOfIdentifiersObjectUnderscoretypeUnderscoreid :: Text -- ^ The object type an object belongs to—like \"Companies\" or \"Accounts\". Object type IDs are string-formatted integers that begin at `1` and increment for each new type.
  , objectIdentifyAllOfIdentifiersObjectUnderscoreid :: Text -- ^ The unique identifier for an object. If you use an `object_id` that already exists, we'll update the object accordingly.
  , objectIdentifyAllOfIdentifiersCioUnderscoreobjectUnderscoreid :: Text -- ^ A unique value that Customer.io sets for an object when you create it. This ID is immutable.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ObjectIdentifyAllOfIdentifiers where
  parseJSON = genericParseJSON optionsObjectIdentifyAllOfIdentifiers
instance ToJSON ObjectIdentifyAllOfIdentifiers where
  toJSON = genericToJSON optionsObjectIdentifyAllOfIdentifiers

optionsObjectIdentifyAllOfIdentifiers :: Options
optionsObjectIdentifyAllOfIdentifiers =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("objectIdentifyAllOfIdentifiersObjectUnderscoretypeUnderscoreid", "object_type_id")
      , ("objectIdentifyAllOfIdentifiersObjectUnderscoreid", "object_id")
      , ("objectIdentifyAllOfIdentifiersCioUnderscoreobjectUnderscoreid", "cio_object_id")
      ]


-- | 
data ObjectIdentifyAllOfIdentifiers1 = ObjectIdentifyAllOfIdentifiers1
  { objectIdentifyAllOfIdentifiers1Id :: Maybe Text -- ^ The ID of a customer profile, analogous to a \"person\" in the UI.
  , objectIdentifyAllOfIdentifiers1Email :: Maybe Text -- ^ The email address of the customer.
  , objectIdentifyAllOfIdentifiers1CioUnderscoreid :: Maybe Text -- ^ A unique identifier set by Customer.io, used to reference a person if you want to update their identifiers.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ObjectIdentifyAllOfIdentifiers1 where
  parseJSON = genericParseJSON optionsObjectIdentifyAllOfIdentifiers1
instance ToJSON ObjectIdentifyAllOfIdentifiers1 where
  toJSON = genericToJSON optionsObjectIdentifyAllOfIdentifiers1

optionsObjectIdentifyAllOfIdentifiers1 :: Options
optionsObjectIdentifyAllOfIdentifiers1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("objectIdentifyAllOfIdentifiers1Id", "id")
      , ("objectIdentifyAllOfIdentifiers1Email", "email")
      , ("objectIdentifyAllOfIdentifiers1CioUnderscoreid", "cio_id")
      ]


-- | The &#x60;identify_anonymous&#x60; action lets you relate an object to a person who hasn&#39;t yet identified themselves by anonymous_id. When you identify the person, their anonymous relationship will carry over to the identified profile.
data ObjectIdentifyAnonymous = ObjectIdentifyAnonymous
  { objectIdentifyAnonymousIdentifiers :: ObjectIdentifyAnonymousAllOfIdentifiers -- ^ 
  , objectIdentifyAnonymousType :: Text -- ^ The operation modifies a single object—non person data.
  , objectIdentifyAnonymousAction :: Text -- ^ Indicates that the operation will `identify` the item of the specified `type` and relate it to an `anonymous_id`.
  , objectIdentifyAnonymousAttributes :: Maybe Value -- ^ The data that belongs to the object. This is information you might want to associate with people later (through `cio_relationships`). Passing `null` or an empty string removes the attribute from the object. Some attributes have special meaning. Please refer to the list of [reserved attributes](/journeys/objects-create/#reserved-attributes). 
  , objectIdentifyAnonymousCioUnderscorerelationships :: Maybe [ObjectIdentifyAnonymousAllOfCioRelationships] -- ^ The anonymous people you want to associate with an object. Each object in the array contains an `anonymous_id` representing a person you haven't yet identified by `id` or `email`.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ObjectIdentifyAnonymous where
  parseJSON = genericParseJSON optionsObjectIdentifyAnonymous
instance ToJSON ObjectIdentifyAnonymous where
  toJSON = genericToJSON optionsObjectIdentifyAnonymous

optionsObjectIdentifyAnonymous :: Options
optionsObjectIdentifyAnonymous =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("objectIdentifyAnonymousIdentifiers", "identifiers")
      , ("objectIdentifyAnonymousType", "type")
      , ("objectIdentifyAnonymousAction", "action")
      , ("objectIdentifyAnonymousAttributes", "attributes")
      , ("objectIdentifyAnonymousCioUnderscorerelationships", "cio_relationships")
      ]


-- | 
data ObjectIdentifyAnonymousAllOfCioRelationships = ObjectIdentifyAnonymousAllOfCioRelationships
  { objectIdentifyAnonymousAllOfCioRelationshipsIdentifiers :: Maybe IdentifyAnonymousAllOfCioRelationshipsInnerIdentifiers -- ^ 
  , objectIdentifyAnonymousAllOfCioRelationshipsRelationshipUnderscoreattributes :: Maybe Value -- ^ Coming October 2023 - The attributes associated with a relationship. Passing null or an empty string removes the attribute from the relationship.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ObjectIdentifyAnonymousAllOfCioRelationships where
  parseJSON = genericParseJSON optionsObjectIdentifyAnonymousAllOfCioRelationships
instance ToJSON ObjectIdentifyAnonymousAllOfCioRelationships where
  toJSON = genericToJSON optionsObjectIdentifyAnonymousAllOfCioRelationships

optionsObjectIdentifyAnonymousAllOfCioRelationships :: Options
optionsObjectIdentifyAnonymousAllOfCioRelationships =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("objectIdentifyAnonymousAllOfCioRelationshipsIdentifiers", "identifiers")
      , ("objectIdentifyAnonymousAllOfCioRelationshipsRelationshipUnderscoreattributes", "relationship_attributes")
      ]


-- | The identifiers for a custom object. When identifying a new object, you *must* use both the &#x60;object_type_id&#x60; and &#x60;object_id&#x60; (where &#x60;object_type_id&#x60; is an integer representing the type of object and the &#x60;object_id&#x60; is the individual identifier for the object).  If you&#39;re updating an existing object, you can use either the &#x60;object_type_id&#x60; and &#x60;object_id&#x60; or the &#x60;cio_object_id&#x60; (where &#x60;cio_object_id&#x60; is an immutable unique value that Customer.io sets for an object when you create it). 
data ObjectIdentifyAnonymousAllOfIdentifiers = ObjectIdentifyAnonymousAllOfIdentifiers
  { objectIdentifyAnonymousAllOfIdentifiersObjectUnderscoretypeUnderscoreid :: Text -- ^ The object type an object belongs to—like \"Companies\" or \"Accounts\". Object type IDs are string-formatted integers that begin at `1` and increment for each new type.
  , objectIdentifyAnonymousAllOfIdentifiersObjectUnderscoreid :: Text -- ^ The unique identifier for an object. If you use an `object_id` that already exists, we'll update the object accordingly.
  , objectIdentifyAnonymousAllOfIdentifiersCioUnderscoreobjectUnderscoreid :: Text -- ^ A unique value that Customer.io sets for an object when you create it. This ID is immutable.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ObjectIdentifyAnonymousAllOfIdentifiers where
  parseJSON = genericParseJSON optionsObjectIdentifyAnonymousAllOfIdentifiers
instance ToJSON ObjectIdentifyAnonymousAllOfIdentifiers where
  toJSON = genericToJSON optionsObjectIdentifyAnonymousAllOfIdentifiers

optionsObjectIdentifyAnonymousAllOfIdentifiers :: Options
optionsObjectIdentifyAnonymousAllOfIdentifiers =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("objectIdentifyAnonymousAllOfIdentifiersObjectUnderscoretypeUnderscoreid", "object_type_id")
      , ("objectIdentifyAnonymousAllOfIdentifiersObjectUnderscoreid", "object_id")
      , ("objectIdentifyAnonymousAllOfIdentifiersCioUnderscoreobjectUnderscoreid", "cio_object_id")
      ]


-- | 
data ObjectOperations = ObjectOperations
  { objectOperationsIdentifiers :: IdentifyAllOfIdentifiers -- ^ 
  , objectOperationsType :: Text -- ^ The operation modifies a single object—non person data.
  , objectOperationsAction :: Text -- ^ Indicates that the operation will `identify` the item of the specified `type` and relate it to an `anonymous_id`.
  , objectOperationsAttributes :: Maybe Value -- ^ The data that belongs to the object. This is information you might want to associate with people later (through `cio_relationships`). Passing `null` or an empty string removes the attribute from the object. Some attributes have special meaning. Please refer to the list of [reserved attributes](/journeys/objects-create/#reserved-attributes). 
  , objectOperationsCioUnderscorerelationships :: Maybe [IdentifyAnonymousAllOfCioRelationshipsInner] -- ^ The anonymous people you want to associate with an object. Each object in the array contains an `anonymous_id` representing a person you haven't yet identified by `id` or `email`.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ObjectOperations where
  parseJSON = genericParseJSON optionsObjectOperations
instance ToJSON ObjectOperations where
  toJSON = genericToJSON optionsObjectOperations

optionsObjectOperations :: Options
optionsObjectOperations =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("objectOperationsIdentifiers", "identifiers")
      , ("objectOperationsType", "type")
      , ("objectOperationsAction", "action")
      , ("objectOperationsAttributes", "attributes")
      , ("objectOperationsCioUnderscorerelationships", "cio_relationships")
      ]


-- | Filter your objects by their attributes.
data ObjectattributeFilter = ObjectattributeFilter
  { objectattributeFilterField :: Text -- ^ The name of the attribute you want to filter against.
  , objectattributeFilterOperator :: Text -- ^ Determine how to evaluate criteria against the field—`exists` returns results if an object has the attribute; `eq` returns results an object's attribute exists and the attribute has the `value` you specify.
  , objectattributeFilterValue :: Maybe Text -- ^ The value you want to match for this attribute. You must include a value if you use the `eq` operator.
  , objectattributeFilterTypeUnderscoreid :: Text -- ^ The object type an object belongs to—like \"Companies\" or \"Accounts\". Object type IDs are string-formatted integers that begin at `1` and increment for each new type.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ObjectattributeFilter where
  parseJSON = genericParseJSON optionsObjectattributeFilter
instance ToJSON ObjectattributeFilter where
  toJSON = genericToJSON optionsObjectattributeFilter

optionsObjectattributeFilter :: Options
optionsObjectattributeFilter =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("objectattributeFilterField", "field")
      , ("objectattributeFilterOperator", "operator")
      , ("objectattributeFilterValue", "value")
      , ("objectattributeFilterTypeUnderscoreid", "type_id")
      ]


-- | 
data Opened = Opened
  { openedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , openedObjectUnderscoretype :: Text -- ^ The event relates to an email action.
  , openedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , openedMetric :: Text -- ^ An email was opened. If either property `proxied` or `prefetched` is `true`, the email was opened by a machine. Otherwise, it was opened by a human.
  , openedData :: OpenedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Opened where
  parseJSON = genericParseJSON optionsOpened
instance ToJSON Opened where
  toJSON = genericToJSON optionsOpened

optionsOpened :: Options
optionsOpened =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("openedEventUnderscoreid", "event_id")
      , ("openedObjectUnderscoretype", "object_type")
      , ("openedTimestamp", "timestamp")
      , ("openedMetric", "metric")
      , ("openedData", "data")
      ]


-- | 
data Opened1 = Opened1
  { opened1EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , opened1ObjectUnderscoretype :: Text -- ^ The event relates to an push notification.
  , opened1Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , opened1Metric :: Text -- ^ A device opened a push notification.
  , opened1Data :: Opened1AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Opened1 where
  parseJSON = genericParseJSON optionsOpened1
instance ToJSON Opened1 where
  toJSON = genericToJSON optionsOpened1

optionsOpened1 :: Options
optionsOpened1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("opened1EventUnderscoreid", "event_id")
      , ("opened1ObjectUnderscoretype", "object_type")
      , ("opened1Timestamp", "timestamp")
      , ("opened1Metric", "metric")
      , ("opened1Data", "data")
      ]


-- | 
data Opened1AllOfData = Opened1AllOfData
  { opened1AllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , opened1AllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , opened1AllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , opened1AllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , opened1AllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , opened1AllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , opened1AllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , opened1AllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , opened1AllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , opened1AllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , opened1AllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , opened1AllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , opened1AllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , opened1AllOfDataRecipients :: [Opened1AllOfDataAllOfRecipientsInner] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Opened1AllOfData where
  parseJSON = genericParseJSON optionsOpened1AllOfData
instance ToJSON Opened1AllOfData where
  toJSON = genericToJSON optionsOpened1AllOfData

optionsOpened1AllOfData :: Options
optionsOpened1AllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("opened1AllOfDataTriggerUnderscoreid", "trigger_id")
      , ("opened1AllOfDataCustomerUnderscoreid", "customer_id")
      , ("opened1AllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("opened1AllOfDataActionUnderscoreid", "action_id")
      , ("opened1AllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("opened1AllOfDataJourneyUnderscoreid", "journey_id")
      , ("opened1AllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("opened1AllOfDataIdentifiers", "identifiers")
      , ("opened1AllOfDataCampaignUnderscoreid", "campaign_id")
      , ("opened1AllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("opened1AllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("opened1AllOfDataContentUnderscoreid", "content_id")
      , ("opened1AllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("opened1AllOfDataRecipients", "recipients")
      ]


-- | Describes the device of the recipient who clicked/tapped the link.
data Opened1AllOfDataAllOfRecipientsInner = Opened1AllOfDataAllOfRecipientsInner
  { opened1AllOfDataAllOfRecipientsInnerDeviceUnderscoreid :: Text -- ^ The device identifier/token.
  , opened1AllOfDataAllOfRecipientsInnerDeviceUnderscoreplatform :: Maybe Text -- ^ The device's operating system.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Opened1AllOfDataAllOfRecipientsInner where
  parseJSON = genericParseJSON optionsOpened1AllOfDataAllOfRecipientsInner
instance ToJSON Opened1AllOfDataAllOfRecipientsInner where
  toJSON = genericToJSON optionsOpened1AllOfDataAllOfRecipientsInner

optionsOpened1AllOfDataAllOfRecipientsInner :: Options
optionsOpened1AllOfDataAllOfRecipientsInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("opened1AllOfDataAllOfRecipientsInnerDeviceUnderscoreid", "device_id")
      , ("opened1AllOfDataAllOfRecipientsInnerDeviceUnderscoreplatform", "device_platform")
      ]


-- | 
data Opened2 = Opened2
  { opened2EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , opened2ObjectUnderscoretype :: Text -- ^ The event relates to an in-app message.
  , opened2Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , opened2Metric :: Text -- ^ A device opened an in-app message. Because messages appear automatically when a person opens your app (to the right page if using page rules), \"opened\" is essentially an \"impression\"—a person saw your message.
  , opened2Data :: Drafted2AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Opened2 where
  parseJSON = genericParseJSON optionsOpened2
instance ToJSON Opened2 where
  toJSON = genericToJSON optionsOpened2

optionsOpened2 :: Options
optionsOpened2 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("opened2EventUnderscoreid", "event_id")
      , ("opened2ObjectUnderscoretype", "object_type")
      , ("opened2Timestamp", "timestamp")
      , ("opened2Metric", "metric")
      , ("opened2Data", "data")
      ]


-- | 
data Opened3 = Opened3
  { opened3EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , opened3ObjectUnderscoretype :: Text -- ^ The event relates to an in-app message.
  , opened3Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , opened3Metric :: Text -- ^ A device opened an in-app message. Because messages appear automatically when a person opens your app (to the right page if using page rules), \"opened\" is essentially an \"impression\"—a person saw your message.
  , opened3Data :: WebhookDraftedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Opened3 where
  parseJSON = genericParseJSON optionsOpened3
instance ToJSON Opened3 where
  toJSON = genericToJSON optionsOpened3

optionsOpened3 :: Options
optionsOpened3 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("opened3EventUnderscoreid", "event_id")
      , ("opened3ObjectUnderscoretype", "object_type")
      , ("opened3Timestamp", "timestamp")
      , ("opened3Metric", "metric")
      , ("opened3Data", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data OpenedAllOfData = OpenedAllOfData
  { openedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , openedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , openedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , openedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , openedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , openedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , openedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , openedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , openedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , openedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , openedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , openedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , openedAllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , openedAllOfDataSubject :: Text -- ^ The subject of the email.
  , openedAllOfDataRecipient :: Text -- ^ The recipient address for an action.
  , openedAllOfDataProxied :: Maybe Bool -- ^ If true, the email was fetched by a proxy to hide the user identity, IP address, etc.
  , openedAllOfDataPrefetched :: Maybe Bool -- ^ If true, the email was opened by Gmail, Apple Privacy Protection, or a user agent identified as a bot.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON OpenedAllOfData where
  parseJSON = genericParseJSON optionsOpenedAllOfData
instance ToJSON OpenedAllOfData where
  toJSON = genericToJSON optionsOpenedAllOfData

optionsOpenedAllOfData :: Options
optionsOpenedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("openedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("openedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("openedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("openedAllOfDataActionUnderscoreid", "action_id")
      , ("openedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("openedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("openedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("openedAllOfDataIdentifiers", "identifiers")
      , ("openedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("openedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("openedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("openedAllOfDataContentUnderscoreid", "content_id")
      , ("openedAllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("openedAllOfDataSubject", "subject")
      , ("openedAllOfDataRecipient", "recipient")
      , ("openedAllOfDataProxied", "proxied")
      , ("openedAllOfDataPrefetched", "prefetched")
      ]


-- | 
data Or = Or
  { orOr :: Maybe [AndAndInnerOrInner] -- ^ Match *any* condition to return results.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Or where
  parseJSON = genericParseJSON optionsOr
instance ToJSON Or where
  toJSON = genericToJSON optionsOr

optionsOr :: Options
optionsOr =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("orOr", "or")
      ]


-- | 
data Or1 = Or1
  { or1Or :: Maybe [Or1OrInner] -- ^ Match *any* condition to return results.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Or1 where
  parseJSON = genericParseJSON optionsOr1
instance ToJSON Or1 where
  toJSON = genericToJSON optionsOr1

optionsOr1 :: Options
optionsOr1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("or1Or", "or")
      ]


-- | 
data Or1OrInner = Or1OrInner
  { or1OrInnerAnd :: Maybe [AndAndInnerOrInner] -- ^ Returns results matching *all* conditions.
  , or1OrInnerNot :: Maybe AndAndInnerNot -- ^ 
  , or1OrInnerSegment :: Maybe Segment -- ^ 
  , or1OrInnerAttribute :: Maybe Attribute -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Or1OrInner where
  parseJSON = genericParseJSON optionsOr1OrInner
instance ToJSON Or1OrInner where
  toJSON = genericToJSON optionsOr1OrInner

optionsOr1OrInner :: Options
optionsOr1OrInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("or1OrInnerAnd", "and")
      , ("or1OrInnerNot", "not")
      , ("or1OrInnerSegment", "segment")
      , ("or1OrInnerAttribute", "attribute")
      ]


-- | 
data Or2 = Or2
  { or2Or :: Maybe [PeopleFilter] -- ^ Match *any* condition to return results.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Or2 where
  parseJSON = genericParseJSON optionsOr2
instance ToJSON Or2 where
  toJSON = genericToJSON optionsOr2

optionsOr2 :: Options
optionsOr2 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("or2Or", "or")
      ]


-- | 
data Or3 = Or3
  { or3Or :: Maybe [And2AndInner] -- ^ Match *any* condition to return results.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Or3 where
  parseJSON = genericParseJSON optionsOr3
instance ToJSON Or3 where
  toJSON = genericToJSON optionsOr3

optionsOr3 :: Options
optionsOr3 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("or3Or", "or")
      ]


-- | 
data OrAudienceFilter = OrAudienceFilter
  { orAudienceFilterOr :: Maybe [Or1OrInner] -- ^ Match *any* condition to return results.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON OrAudienceFilter where
  parseJSON = genericParseJSON optionsOrAudienceFilter
instance ToJSON OrAudienceFilter where
  toJSON = genericToJSON optionsOrAudienceFilter

optionsOrAudienceFilter :: Options
optionsOrAudienceFilter =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("orAudienceFilterOr", "or")
      ]


-- | 
data OtherEventCommonData = OtherEventCommonData
  { otherEventCommonDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , otherEventCommonDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , otherEventCommonDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , otherEventCommonDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , otherEventCommonDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , otherEventCommonDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , otherEventCommonDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , otherEventCommonDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , otherEventCommonDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , otherEventCommonDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , otherEventCommonDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , otherEventCommonDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON OtherEventCommonData where
  parseJSON = genericParseJSON optionsOtherEventCommonData
instance ToJSON OtherEventCommonData where
  toJSON = genericToJSON optionsOtherEventCommonData

optionsOtherEventCommonData :: Options
optionsOtherEventCommonData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("otherEventCommonDataTriggerUnderscoreid", "trigger_id")
      , ("otherEventCommonDataCustomerUnderscoreid", "customer_id")
      , ("otherEventCommonDataDeliveryUnderscoreid", "delivery_id")
      , ("otherEventCommonDataActionUnderscoreid", "action_id")
      , ("otherEventCommonDataBroadcastUnderscoreid", "broadcast_id")
      , ("otherEventCommonDataJourneyUnderscoreid", "journey_id")
      , ("otherEventCommonDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("otherEventCommonDataIdentifiers", "identifiers")
      , ("otherEventCommonDataCampaignUnderscoreid", "campaign_id")
      , ("otherEventCommonDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("otherEventCommonDataNewsletterUnderscoreid", "newsletter_id")
      , ("otherEventCommonDataContentUnderscoreid", "content_id")
      ]


-- | 
data PageView = PageView
  { pageViewAnonymousUnderscoreid :: Maybe Text -- ^ An identifier for an anonymous event, like a cookie. If set as an attribute on a person, any events bearing the same anonymous value are associated with this person. This value must be unique and is not reusable.
  , pageViewName :: Text -- ^ The name of the event. In general, this should be the URL of the page a person visited, making it easy to segment your audience or trigger campaigns using this event. Make sure you trim leading and trailing spaces from this field.
  , pageViewId :: Maybe Text -- ^ An identifier used to deduplicate events. This value must be a [ULID](https://github.com/ulid/spec). If an event has the same value as an event we previously received, we won't show or process the duplicate. Note - our Python and Ruby libraries do not pass this id.
  , pageViewType :: Text -- ^ Indicates that the event represents a page view. See [\"page view\" events](/sdk/web/events/#page-view-events), for more information.
  , pageViewTimestamp :: Maybe Int -- ^ The unix timestamp when the event took place. If you don't provide this value, we use the date-time when we receive the event. 
  , pageViewData :: Maybe (Map.Map String Value) -- ^ Additional information that you might want to reference in a message using liquid or use to set attributes on your customer (referenced by `customer_id`).
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PageView where
  parseJSON = genericParseJSON optionsPageView
instance ToJSON PageView where
  toJSON = genericToJSON optionsPageView

optionsPageView :: Options
optionsPageView =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("pageViewAnonymousUnderscoreid", "anonymous_id")
      , ("pageViewName", "name")
      , ("pageViewId", "id")
      , ("pageViewType", "type")
      , ("pageViewTimestamp", "timestamp")
      , ("pageViewData", "data")
      ]


-- | 
data PageView1 = PageView1
  { pageView1Name :: Text -- ^ The name of the event. This is how you'll reference the event in campaigns or segments.
  , pageView1Id :: Maybe Text -- ^ An identifier used to deduplicate events. This value must be a [ULID](https://github.com/ulid/spec). If an event has the same value as an event we previously received, we won't show or process the duplicate. Note - our Python and Ruby libraries do not pass this id.
  , pageView1Type :: Text -- ^ Indicates that the event represents a page view. See [\"page view\" events](/sdk/web/events/#page-view-events), for more information.
  , pageView1Timestamp :: Maybe Int -- ^ The unix timestamp when the event took place. If you don't provide this value, we use the date-time when we receive the event. 
  , pageView1Data :: Maybe (Map.Map String Value) -- ^ Additional information that you might want to reference in a message using liquid or use to set attributes on your customer (referenced by `customer_id`).
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PageView1 where
  parseJSON = genericParseJSON optionsPageView1
instance ToJSON PageView1 where
  toJSON = genericToJSON optionsPageView1

optionsPageView1 :: Options
optionsPageView1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("pageView1Name", "name")
      , ("pageView1Id", "id")
      , ("pageView1Type", "type")
      , ("pageView1Timestamp", "timestamp")
      , ("pageView1Data", "data")
      ]


-- | Contains your import parameters.
data People = People
  { peopleName :: Text -- ^ A friendly name for your import. This helps you identify your import.
  , peopleDataUnderscorefileUnderscoreurl :: Text -- ^ The URL or path to the CSV file you want to import.
  , peopleType :: Text -- ^ The type of import.
  , peopleIdentifier :: Text -- ^ The type of identifier you want to use to identify people in your sheet—`id` or `email`. At least one column in the CSV must contain an identifier.
  , peopleDataUnderscoretoUnderscoreprocess :: Maybe Text -- ^ Determines whether your import operation performs `all` add/update operations, only adds items (`only_new`), or only updates existing items (`only_existing`). Defaults to `all`. If `import_type` is `event`, you can only use `all` or `only_existing`.   This field was previously called `people_to_process` - we still support it but will deprecate it soon. 
  , peopleDescription :: Maybe Text -- ^ A helpful description that can help you find and recognize your import operation.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON People where
  parseJSON = genericParseJSON optionsPeople
instance ToJSON People where
  toJSON = genericToJSON optionsPeople

optionsPeople :: Options
optionsPeople =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("peopleName", "name")
      , ("peopleDataUnderscorefileUnderscoreurl", "data_file_url")
      , ("peopleType", "type")
      , ("peopleIdentifier", "identifier")
      , ("peopleDataUnderscoretoUnderscoreprocess", "data_to_process")
      , ("peopleDescription", "description")
      ]


-- | When filtering for people, you can use &#x60;and&#x60; and &#x60;or&#x60; arrays to determine the logic for a group of filter conditions. &#x60;not&#x60; reverses the filter condition and matches when the condition is false. &#x60;segment&#x60; and &#x60;attribute&#x60; represent the individual conditions you can filter a group of people for.
data PeopleFilter = PeopleFilter
  { peopleFilterAnd :: Maybe [AndAndInnerOrInner] -- ^ Returns results matching *all* conditions.
  , peopleFilterOr :: Maybe [AndAndInnerOrInner] -- ^ Returns results matching *any* conditions.
  , peopleFilterNot :: Maybe AndAndInnerNot -- ^ 
  , peopleFilterSegment :: Maybe Segment -- ^ 
  , peopleFilterAttribute :: Maybe Attribute -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PeopleFilter where
  parseJSON = genericParseJSON optionsPeopleFilter
instance ToJSON PeopleFilter where
  toJSON = genericToJSON optionsPeopleFilter

optionsPeopleFilter :: Options
optionsPeopleFilter =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("peopleFilterAnd", "and")
      , ("peopleFilterOr", "or")
      , ("peopleFilterNot", "not")
      , ("peopleFilterSegment", "segment")
      , ("peopleFilterAttribute", "attribute")
      ]


-- | Returns metrics in accordance with the resolution you requested. Each property in this object is an array and each entry in the array represents a metric period, i.e. if your &#x60;res&#x60; is days &#x60;[0, 1]&#x60; would represent 0 metrics for the first day, 1 for the second, etc.
data PeriodMessageMetrics = PeriodMessageMetrics
  { periodMessageMetricsAttempted :: Maybe [Int] -- ^ The number of `attempted` messages.
  , periodMessageMetricsBounced :: Maybe [Int] -- ^ The number of `bounced` messages.
  , periodMessageMetricsClicked :: Maybe [Int] -- ^ The number of `clicked` messages.
  , periodMessageMetricsHumanUnderscoreclicked :: Maybe [Int] -- ^ The number of `clicked` emails excluding machine clicks. This metric is reliable starting April 20, 2025. [Learn more](/journeys/analytics/#delivery-metrics).
  , periodMessageMetricsPrefetchUnderscoreclicked :: Maybe [Int] -- ^ The number of `clicked` emails attributed to machines. This metric is reliable starting April 20, 2025.
  , periodMessageMetricsConverted :: Maybe [Int] -- ^ The number of `converted` messages.
  , periodMessageMetricsCreated :: Maybe [Int] -- ^ The number of `created` messages.
  , periodMessageMetricsDeferred :: Maybe [Int] -- ^ The number of `deferred` messages.
  , periodMessageMetricsDelivered :: Maybe [Int] -- ^ The number of `delivered` messages.
  , periodMessageMetricsDrafted :: Maybe [Int] -- ^ The number of `drafted` messages.
  , periodMessageMetricsFailed :: Maybe [Int] -- ^ The number of `failed` messages.
  , periodMessageMetricsOpened :: Maybe [Int] -- ^ The number of `opened` messages.
  , periodMessageMetricsHumanUnderscoreopened :: Maybe [Int] -- ^ The number of `opened` emails excluding machine opens. This metric is reliable starting March 20, 2025. [Learn more](/journeys/analytics/#delivery-metrics).
  , periodMessageMetricsPrefetchUnderscoreopened :: Maybe [Int] -- ^ The number of `opened` emails attributed to machines. This metric is reliable starting March 20, 2025.
  , periodMessageMetricsSent :: Maybe [Int] -- ^ The number of sent messages.
  , periodMessageMetricsSpammed :: Maybe [Int] -- ^ The number of spam complaints.
  , periodMessageMetricsSuppressed :: Maybe [Int] -- ^ The number of `suppressed` messages.
  , periodMessageMetricsUndeliverable :: Maybe [Int] -- ^ The number of `undeliverable` messages.
  , periodMessageMetricsTopicUnderscoreunsubscribed :: Maybe [Int] -- ^ The number of topic unsubscribes in a given period.
  , periodMessageMetricsUnsubscribed :: Maybe [Int] -- ^ The number of unsubscribes attributed to the campaign or message.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PeriodMessageMetrics where
  parseJSON = genericParseJSON optionsPeriodMessageMetrics
instance ToJSON PeriodMessageMetrics where
  toJSON = genericToJSON optionsPeriodMessageMetrics

optionsPeriodMessageMetrics :: Options
optionsPeriodMessageMetrics =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("periodMessageMetricsAttempted", "attempted")
      , ("periodMessageMetricsBounced", "bounced")
      , ("periodMessageMetricsClicked", "clicked")
      , ("periodMessageMetricsHumanUnderscoreclicked", "human_clicked")
      , ("periodMessageMetricsPrefetchUnderscoreclicked", "prefetch_clicked")
      , ("periodMessageMetricsConverted", "converted")
      , ("periodMessageMetricsCreated", "created")
      , ("periodMessageMetricsDeferred", "deferred")
      , ("periodMessageMetricsDelivered", "delivered")
      , ("periodMessageMetricsDrafted", "drafted")
      , ("periodMessageMetricsFailed", "failed")
      , ("periodMessageMetricsOpened", "opened")
      , ("periodMessageMetricsHumanUnderscoreopened", "human_opened")
      , ("periodMessageMetricsPrefetchUnderscoreopened", "prefetch_opened")
      , ("periodMessageMetricsSent", "sent")
      , ("periodMessageMetricsSpammed", "spammed")
      , ("periodMessageMetricsSuppressed", "suppressed")
      , ("periodMessageMetricsUndeliverable", "undeliverable")
      , ("periodMessageMetricsTopicUnderscoreunsubscribed", "topic_unsubscribed")
      , ("periodMessageMetricsUnsubscribed", "unsubscribed")
      ]


-- | Returns metrics in accordance with the &#x60;period&#x60; you requested. Each property in this object is an array and each entry in the array represents a metric period, i.e. if your &#x60;period&#x60; is days &#x60;[0, 1]&#x60; would represent 0 metrics for the first day, 1 for the second, etc.
data PeriodMessageMetricsDeprecated = PeriodMessageMetricsDeprecated
  { periodMessageMetricsDeprecatedAttempted :: Maybe [Int] -- ^ The number of `attempted` messages.
  , periodMessageMetricsDeprecatedBounced :: Maybe [Int] -- ^ The number of `bounced` messages.
  , periodMessageMetricsDeprecatedClicked :: Maybe [Int] -- ^ The number of `clicked` messages.
  , periodMessageMetricsDeprecatedConverted :: Maybe [Int] -- ^ The number of `converted` messages.
  , periodMessageMetricsDeprecatedCreated :: Maybe [Int] -- ^ The number of `created` messages.
  , periodMessageMetricsDeprecatedDeferred :: Maybe [Int] -- ^ The number of `deferred` messages.
  , periodMessageMetricsDeprecatedDelivered :: Maybe [Int] -- ^ The number of `delivered` messages.
  , periodMessageMetricsDeprecatedDrafted :: Maybe [Int] -- ^ The number of `drafted` messages.
  , periodMessageMetricsDeprecatedFailed :: Maybe [Int] -- ^ The number of `failed` messages.
  , periodMessageMetricsDeprecatedOpened :: Maybe [Int] -- ^ The number of `opened` messages.
  , periodMessageMetricsDeprecatedSent :: Maybe [Int] -- ^ The number of sent messages.
  , periodMessageMetricsDeprecatedSpammed :: Maybe [Int] -- ^ The number of spam complaints.
  , periodMessageMetricsDeprecatedSuppressed :: Maybe [Int] -- ^ The number of `suppressed` messages.
  , periodMessageMetricsDeprecatedUndeliverable :: Maybe [Int] -- ^ The number of `undeliverable` messages.
  , periodMessageMetricsDeprecatedTopicUnderscoreunsubscribed :: Maybe [Int] -- ^ The number of topic unsubscribes in a given period.
  , periodMessageMetricsDeprecatedUnsubscribed :: Maybe [Int] -- ^ The number of unsubscribes attributed to the campaign or message.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PeriodMessageMetricsDeprecated where
  parseJSON = genericParseJSON optionsPeriodMessageMetricsDeprecated
instance ToJSON PeriodMessageMetricsDeprecated where
  toJSON = genericToJSON optionsPeriodMessageMetricsDeprecated

optionsPeriodMessageMetricsDeprecated :: Options
optionsPeriodMessageMetricsDeprecated =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("periodMessageMetricsDeprecatedAttempted", "attempted")
      , ("periodMessageMetricsDeprecatedBounced", "bounced")
      , ("periodMessageMetricsDeprecatedClicked", "clicked")
      , ("periodMessageMetricsDeprecatedConverted", "converted")
      , ("periodMessageMetricsDeprecatedCreated", "created")
      , ("periodMessageMetricsDeprecatedDeferred", "deferred")
      , ("periodMessageMetricsDeprecatedDelivered", "delivered")
      , ("periodMessageMetricsDeprecatedDrafted", "drafted")
      , ("periodMessageMetricsDeprecatedFailed", "failed")
      , ("periodMessageMetricsDeprecatedOpened", "opened")
      , ("periodMessageMetricsDeprecatedSent", "sent")
      , ("periodMessageMetricsDeprecatedSpammed", "spammed")
      , ("periodMessageMetricsDeprecatedSuppressed", "suppressed")
      , ("periodMessageMetricsDeprecatedUndeliverable", "undeliverable")
      , ("periodMessageMetricsDeprecatedTopicUnderscoreunsubscribed", "topic_unsubscribed")
      , ("periodMessageMetricsDeprecatedUnsubscribed", "unsubscribed")
      ]


-- | Returns metrics in accordance with the resolution you requested. Each property in this object is an array and each entry in the array represents a metric period, i.e. if your &#x60;res&#x60; is days &#x60;[0, 1]&#x60; would represent 0 metrics for the first day, 1 for the second, etc.
data PeriodWebhookMetrics = PeriodWebhookMetrics
  { periodWebhookMetrics2xx :: Maybe [Int] -- ^ 2xx responses by period, representative of webhook performance.
  , periodWebhookMetrics3xx :: Maybe [Int] -- ^ 3xx responses by period, representative of webhook performance.
  , periodWebhookMetrics4xx :: Maybe [Int] -- ^ 4xx responses by period, representative of webhook performance.
  , periodWebhookMetrics5xx :: Maybe [Int] -- ^ 5xx responses by period, representative of webhook performance.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PeriodWebhookMetrics where
  parseJSON = genericParseJSON optionsPeriodWebhookMetrics
instance ToJSON PeriodWebhookMetrics where
  toJSON = genericToJSON optionsPeriodWebhookMetrics

optionsPeriodWebhookMetrics :: Options
optionsPeriodWebhookMetrics =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("periodWebhookMetrics2xx", "2xx")
      , ("periodWebhookMetrics3xx", "3xx")
      , ("periodWebhookMetrics4xx", "4xx")
      , ("periodWebhookMetrics5xx", "5xx")
      ]


-- | Returns metrics in accordance with the &#x60;period&#x60; you requested. Each property in this object is an array and each entry in the array represents a metric period, i.e. if your &#x60;period&#x60; is days &#x60;[0, 1]&#x60; would represent 0 metrics for the first day, 1 for the second, etc.
data PeriodWebhookMetricsDeprecated = PeriodWebhookMetricsDeprecated
  { periodWebhookMetricsDeprecated2xx :: Maybe [Int] -- ^ 2xx responses by period, representative of webhook performance.
  , periodWebhookMetricsDeprecated3xx :: Maybe [Int] -- ^ 3xx responses by period, representative of webhook performance.
  , periodWebhookMetricsDeprecated4xx :: Maybe [Int] -- ^ 4xx responses by period, representative of webhook performance.
  , periodWebhookMetricsDeprecated5xx :: Maybe [Int] -- ^ 5xx responses by period, representative of webhook performance.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PeriodWebhookMetricsDeprecated where
  parseJSON = genericParseJSON optionsPeriodWebhookMetricsDeprecated
instance ToJSON PeriodWebhookMetricsDeprecated where
  toJSON = genericToJSON optionsPeriodWebhookMetricsDeprecated

optionsPeriodWebhookMetricsDeprecated :: Options
optionsPeriodWebhookMetricsDeprecated =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("periodWebhookMetricsDeprecated2xx", "2xx")
      , ("periodWebhookMetricsDeprecated3xx", "3xx")
      , ("periodWebhookMetricsDeprecated4xx", "4xx")
      , ("periodWebhookMetricsDeprecated5xx", "5xx")
      ]


-- | Assign devices to a person.
data PersonAddDevice = PersonAddDevice
  { personAddDeviceType :: Text -- ^ The operation modifies a person in Customer.io
  , personAddDeviceIdentifiers :: PersonAddDeviceAllOfIdentifiers -- ^ 
  , personAddDeviceAction :: Text -- ^ Add a mobile device to a person's profile.
  , personAddDeviceDevice :: PersonAddDeviceAllOfDevice -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonAddDevice where
  parseJSON = genericParseJSON optionsPersonAddDevice
instance ToJSON PersonAddDevice where
  toJSON = genericToJSON optionsPersonAddDevice

optionsPersonAddDevice :: Options
optionsPersonAddDevice =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personAddDeviceType", "type")
      , ("personAddDeviceIdentifiers", "identifiers")
      , ("personAddDeviceAction", "action")
      , ("personAddDeviceDevice", "device")
      ]


-- | The properties representing an individual device. [Our SDK&#39;s](/sdk/) gather all the properties defined below automatically, unless you disable the &#x60;autoTrackDeviceAttributes&#x60; setting. You can reference the properties outside the &#x60;attributes&#x60; object in segments.
data PersonAddDeviceAllOfDevice = PersonAddDeviceAllOfDevice
  { personAddDeviceAllOfDeviceToken :: Text -- ^ The device token.
  , personAddDeviceAllOfDeviceLastUnderscoreused :: Maybe Int -- ^ The `timestamp` when you last identified this device. If you don't pass a timestamp when you add or update a device, we use the time of the request itself. Our SDKs identify a device when a person launches their app.
  , personAddDeviceAllOfDevicePlatform :: Text -- ^ The device/messaging platform.
  , personAddDeviceAllOfDeviceAttributes :: Maybe SendPushRequestAllOfCustomDeviceAllOfAttributes -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonAddDeviceAllOfDevice where
  parseJSON = genericParseJSON optionsPersonAddDeviceAllOfDevice
instance ToJSON PersonAddDeviceAllOfDevice where
  toJSON = genericToJSON optionsPersonAddDeviceAllOfDevice

optionsPersonAddDeviceAllOfDevice :: Options
optionsPersonAddDeviceAllOfDevice =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personAddDeviceAllOfDeviceToken", "token")
      , ("personAddDeviceAllOfDeviceLastUnderscoreused", "last_used")
      , ("personAddDeviceAllOfDevicePlatform", "platform")
      , ("personAddDeviceAllOfDeviceAttributes", "attributes")
      ]


-- | The person you want to perform an action for—one of either &#x60;id&#x60;, &#x60;email&#x60;, or &#x60;cio_id&#x60;. You cannot pass multiple identifiers.
data PersonAddDeviceAllOfIdentifiers = PersonAddDeviceAllOfIdentifiers
  { personAddDeviceAllOfIdentifiersId :: Text -- ^ The ID of a customer profile, analogous to a \"person\" in the UI.
  , personAddDeviceAllOfIdentifiersEmail :: Text -- ^ The email address of the customer.
  , personAddDeviceAllOfIdentifiersCioUnderscoreid :: Text -- ^ A unique identifier set by Customer.io, used to reference a person if you want to update their identifiers.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonAddDeviceAllOfIdentifiers where
  parseJSON = genericParseJSON optionsPersonAddDeviceAllOfIdentifiers
instance ToJSON PersonAddDeviceAllOfIdentifiers where
  toJSON = genericToJSON optionsPersonAddDeviceAllOfIdentifiers

optionsPersonAddDeviceAllOfIdentifiers :: Options
optionsPersonAddDeviceAllOfIdentifiers =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personAddDeviceAllOfIdentifiersId", "id")
      , ("personAddDeviceAllOfIdentifiersEmail", "email")
      , ("personAddDeviceAllOfIdentifiersCioUnderscoreid", "cio_id")
      ]


-- | Associate multiple objects with a person.
data PersonAddRelationships = PersonAddRelationships
  { personAddRelationshipsType :: Text -- ^ The operation modifies a person in Customer.io
  , personAddRelationshipsIdentifiers :: PersonAddRelationshipsAllOfIdentifiers -- ^ 
  , personAddRelationshipsAction :: Text -- ^ This operation associates a person with one or more objects.
  , personAddRelationshipsCioUnderscorerelationships :: [PersonAddRelationshipsAllOfCioRelationships] -- ^ Each object in the array represents a relationship you want to add to, or remove from, a person.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonAddRelationships where
  parseJSON = genericParseJSON optionsPersonAddRelationships
instance ToJSON PersonAddRelationships where
  toJSON = genericToJSON optionsPersonAddRelationships

optionsPersonAddRelationships :: Options
optionsPersonAddRelationships =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personAddRelationshipsType", "type")
      , ("personAddRelationshipsIdentifiers", "identifiers")
      , ("personAddRelationshipsAction", "action")
      , ("personAddRelationshipsCioUnderscorerelationships", "cio_relationships")
      ]


-- | 
data PersonAddRelationshipsAllOfCioRelationships = PersonAddRelationshipsAllOfCioRelationships
  { personAddRelationshipsAllOfCioRelationshipsIdentifiers :: Maybe ObjectCommonAllOfIdentifiers -- ^ 
  , personAddRelationshipsAllOfCioRelationshipsRelationshipUnderscoreattributes :: Maybe (Map.Map String Value) -- ^ The attributes associated with a relationship. Passing null or an empty string removes the attribute from the relationship. 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonAddRelationshipsAllOfCioRelationships where
  parseJSON = genericParseJSON optionsPersonAddRelationshipsAllOfCioRelationships
instance ToJSON PersonAddRelationshipsAllOfCioRelationships where
  toJSON = genericToJSON optionsPersonAddRelationshipsAllOfCioRelationships

optionsPersonAddRelationshipsAllOfCioRelationships :: Options
optionsPersonAddRelationshipsAllOfCioRelationships =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personAddRelationshipsAllOfCioRelationshipsIdentifiers", "identifiers")
      , ("personAddRelationshipsAllOfCioRelationshipsRelationshipUnderscoreattributes", "relationship_attributes")
      ]


-- | The person you want to perform an action for—one of either &#x60;id&#x60;, &#x60;email&#x60;, or &#x60;cio_id&#x60;. You cannot pass multiple identifiers.
data PersonAddRelationshipsAllOfIdentifiers = PersonAddRelationshipsAllOfIdentifiers
  { personAddRelationshipsAllOfIdentifiersId :: Text -- ^ The ID of a customer profile, analogous to a \"person\" in the UI.
  , personAddRelationshipsAllOfIdentifiersEmail :: Text -- ^ The email address of the customer.
  , personAddRelationshipsAllOfIdentifiersCioUnderscoreid :: Text -- ^ A unique identifier set by Customer.io, used to reference a person if you want to update their identifiers.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonAddRelationshipsAllOfIdentifiers where
  parseJSON = genericParseJSON optionsPersonAddRelationshipsAllOfIdentifiers
instance ToJSON PersonAddRelationshipsAllOfIdentifiers where
  toJSON = genericToJSON optionsPersonAddRelationshipsAllOfIdentifiers

optionsPersonAddRelationshipsAllOfIdentifiers :: Options
optionsPersonAddRelationshipsAllOfIdentifiers =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personAddRelationshipsAllOfIdentifiersId", "id")
      , ("personAddRelationshipsAllOfIdentifiersEmail", "email")
      , ("personAddRelationshipsAllOfIdentifiersCioUnderscoreid", "cio_id")
      ]


-- | Attributes that you want to add or update for this person.
data PersonAttributes = PersonAttributes
  { personAttributesCioUnderscoresubscriptionUnderscorepreferences :: Maybe Identify1AllOfAttributesCioSubscriptionPreferences -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonAttributes where
  parseJSON = genericParseJSON optionsPersonAttributes
instance ToJSON PersonAttributes where
  toJSON = genericToJSON optionsPersonAttributes

optionsPersonAttributes :: Options
optionsPersonAttributes =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personAttributesCioUnderscoresubscriptionUnderscorepreferences", "cio_subscription_preferences")
      ]


-- | A person changed their subscription preferences through our subscription center or you changed their &#x60;cio_subscription_preferences&#x60; attribute values.  Some fields in the &#x60;data&#x60; object change based on whether the message that resulted in the change originated from a broadcast, campaign, or newsletter. 
data PersonCioSubscriptionPreferencesChanged = PersonCioSubscriptionPreferencesChanged
  { personCioSubscriptionPreferencesChangedMetric :: Text -- ^ The event we're reporting to your webhook endpoint. In this case, a person changed their subscription preferences.
  , personCioSubscriptionPreferencesChangedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , personCioSubscriptionPreferencesChangedDeliveryUnderscoretype :: Maybe Text -- ^ The type of delivery that resulted in a change to preferences.
  , personCioSubscriptionPreferencesChangedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , personCioSubscriptionPreferencesChangedData :: ChangedSubscriptionPreferencesData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonCioSubscriptionPreferencesChanged where
  parseJSON = genericParseJSON optionsPersonCioSubscriptionPreferencesChanged
instance ToJSON PersonCioSubscriptionPreferencesChanged where
  toJSON = genericToJSON optionsPersonCioSubscriptionPreferencesChanged

optionsPersonCioSubscriptionPreferencesChanged :: Options
optionsPersonCioSubscriptionPreferencesChanged =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personCioSubscriptionPreferencesChangedMetric", "metric")
      , ("personCioSubscriptionPreferencesChangedEventUnderscoreid", "event_id")
      , ("personCioSubscriptionPreferencesChangedDeliveryUnderscoretype", "delivery_type")
      , ("personCioSubscriptionPreferencesChangedTimestamp", "timestamp")
      , ("personCioSubscriptionPreferencesChangedData", "data")
      ]


-- | 
data PersonCioSubscriptionPreferencesCommon = PersonCioSubscriptionPreferencesCommon
  { personCioSubscriptionPreferencesCommonTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , personCioSubscriptionPreferencesCommonCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , personCioSubscriptionPreferencesCommonDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , personCioSubscriptionPreferencesCommonActionUnderscoreid :: Int -- ^ The identifier for an action.
  , personCioSubscriptionPreferencesCommonBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , personCioSubscriptionPreferencesCommonJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , personCioSubscriptionPreferencesCommonParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , personCioSubscriptionPreferencesCommonCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , personCioSubscriptionPreferencesCommonTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , personCioSubscriptionPreferencesCommonNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , personCioSubscriptionPreferencesCommonContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonCioSubscriptionPreferencesCommon where
  parseJSON = genericParseJSON optionsPersonCioSubscriptionPreferencesCommon
instance ToJSON PersonCioSubscriptionPreferencesCommon where
  toJSON = genericToJSON optionsPersonCioSubscriptionPreferencesCommon

optionsPersonCioSubscriptionPreferencesCommon :: Options
optionsPersonCioSubscriptionPreferencesCommon =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personCioSubscriptionPreferencesCommonTriggerUnderscoreid", "trigger_id")
      , ("personCioSubscriptionPreferencesCommonCustomerUnderscoreid", "customer_id")
      , ("personCioSubscriptionPreferencesCommonDeliveryUnderscoreid", "delivery_id")
      , ("personCioSubscriptionPreferencesCommonActionUnderscoreid", "action_id")
      , ("personCioSubscriptionPreferencesCommonBroadcastUnderscoreid", "broadcast_id")
      , ("personCioSubscriptionPreferencesCommonJourneyUnderscoreid", "journey_id")
      , ("personCioSubscriptionPreferencesCommonParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("personCioSubscriptionPreferencesCommonCampaignUnderscoreid", "campaign_id")
      , ("personCioSubscriptionPreferencesCommonTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("personCioSubscriptionPreferencesCommonNewsletterUnderscoreid", "newsletter_id")
      , ("personCioSubscriptionPreferencesCommonContentUnderscoreid", "content_id")
      ]


-- | 
data PersonCommon = PersonCommon
  { personCommonType :: Text -- ^ The operation modifies a person in Customer.io
  , personCommonIdentifiers :: Identify1AllOfIdentifiers -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonCommon where
  parseJSON = genericParseJSON optionsPersonCommon
instance ToJSON PersonCommon where
  toJSON = genericToJSON optionsPersonCommon

optionsPersonCommon :: Options
optionsPersonCommon =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personCommonType", "type")
      , ("personCommonIdentifiers", "identifiers")
      ]


-- | Delete a person from your workspace.
data PersonDelete = PersonDelete
  { personDeleteType :: Text -- ^ The operation modifies a person in Customer.io
  , personDeleteIdentifiers :: PersonDeleteAllOfIdentifiers -- ^ 
  , personDeleteAction :: Text -- ^ Indicates that the operation will `delete` the the item of the specified `type`.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonDelete where
  parseJSON = genericParseJSON optionsPersonDelete
instance ToJSON PersonDelete where
  toJSON = genericToJSON optionsPersonDelete

optionsPersonDelete :: Options
optionsPersonDelete =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personDeleteType", "type")
      , ("personDeleteIdentifiers", "identifiers")
      , ("personDeleteAction", "action")
      ]


-- | The person you want to perform an action for—one of either &#x60;id&#x60;, &#x60;email&#x60;, or &#x60;cio_id&#x60;. You cannot pass multiple identifiers.
data PersonDeleteAllOfIdentifiers = PersonDeleteAllOfIdentifiers
  { personDeleteAllOfIdentifiersId :: Text -- ^ The ID of a customer profile, analogous to a \"person\" in the UI.
  , personDeleteAllOfIdentifiersEmail :: Text -- ^ The email address of the customer.
  , personDeleteAllOfIdentifiersCioUnderscoreid :: Text -- ^ A unique identifier set by Customer.io, used to reference a person if you want to update their identifiers.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonDeleteAllOfIdentifiers where
  parseJSON = genericParseJSON optionsPersonDeleteAllOfIdentifiers
instance ToJSON PersonDeleteAllOfIdentifiers where
  toJSON = genericToJSON optionsPersonDeleteAllOfIdentifiers

optionsPersonDeleteAllOfIdentifiers :: Options
optionsPersonDeleteAllOfIdentifiers =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personDeleteAllOfIdentifiersId", "id")
      , ("personDeleteAllOfIdentifiersEmail", "email")
      , ("personDeleteAllOfIdentifiersCioUnderscoreid", "cio_id")
      ]


-- | Delete devices that belong to a person.
data PersonDeleteDevice = PersonDeleteDevice
  { personDeleteDeviceType :: Text -- ^ The operation modifies a person in Customer.io
  , personDeleteDeviceIdentifiers :: PersonDeleteDeviceAllOfIdentifiers -- ^ 
  , personDeleteDeviceAction :: Text -- ^ Delete a device from a person's profile.
  , personDeleteDeviceDevice :: DeleteDeviceAllOfDevice -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonDeleteDevice where
  parseJSON = genericParseJSON optionsPersonDeleteDevice
instance ToJSON PersonDeleteDevice where
  toJSON = genericToJSON optionsPersonDeleteDevice

optionsPersonDeleteDevice :: Options
optionsPersonDeleteDevice =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personDeleteDeviceType", "type")
      , ("personDeleteDeviceIdentifiers", "identifiers")
      , ("personDeleteDeviceAction", "action")
      , ("personDeleteDeviceDevice", "device")
      ]


-- | The person you want to perform an action for—one of either &#x60;id&#x60;, &#x60;email&#x60;, or &#x60;cio_id&#x60;. You cannot pass multiple identifiers.
data PersonDeleteDeviceAllOfIdentifiers = PersonDeleteDeviceAllOfIdentifiers
  { personDeleteDeviceAllOfIdentifiersId :: Text -- ^ The ID of a customer profile, analogous to a \"person\" in the UI.
  , personDeleteDeviceAllOfIdentifiersEmail :: Text -- ^ The email address of the customer.
  , personDeleteDeviceAllOfIdentifiersCioUnderscoreid :: Text -- ^ A unique identifier set by Customer.io, used to reference a person if you want to update their identifiers.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonDeleteDeviceAllOfIdentifiers where
  parseJSON = genericParseJSON optionsPersonDeleteDeviceAllOfIdentifiers
instance ToJSON PersonDeleteDeviceAllOfIdentifiers where
  toJSON = genericToJSON optionsPersonDeleteDeviceAllOfIdentifiers

optionsPersonDeleteDeviceAllOfIdentifiers :: Options
optionsPersonDeleteDeviceAllOfIdentifiers =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personDeleteDeviceAllOfIdentifiersId", "id")
      , ("personDeleteDeviceAllOfIdentifiersEmail", "email")
      , ("personDeleteDeviceAllOfIdentifiersCioUnderscoreid", "cio_id")
      ]


-- | Remove multiple object relationships from a person.
data PersonDeleteRelationships = PersonDeleteRelationships
  { personDeleteRelationshipsType :: Text -- ^ The operation modifies a person in Customer.io
  , personDeleteRelationshipsIdentifiers :: PersonDeleteRelationshipsAllOfIdentifiers -- ^ 
  , personDeleteRelationshipsAction :: Text -- ^ This operation deletes an object relationship from one or more people.
  , personDeleteRelationshipsCioUnderscorerelationships :: [PersonDeleteRelationshipsAllOfCioRelationships] -- ^ Each object in the array represents a relationship you want to add to, or remove from, a person.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonDeleteRelationships where
  parseJSON = genericParseJSON optionsPersonDeleteRelationships
instance ToJSON PersonDeleteRelationships where
  toJSON = genericToJSON optionsPersonDeleteRelationships

optionsPersonDeleteRelationships :: Options
optionsPersonDeleteRelationships =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personDeleteRelationshipsType", "type")
      , ("personDeleteRelationshipsIdentifiers", "identifiers")
      , ("personDeleteRelationshipsAction", "action")
      , ("personDeleteRelationshipsCioUnderscorerelationships", "cio_relationships")
      ]


-- | 
data PersonDeleteRelationshipsAllOfCioRelationships = PersonDeleteRelationshipsAllOfCioRelationships
  { personDeleteRelationshipsAllOfCioRelationshipsIdentifiers :: Maybe ObjectCommonAllOfIdentifiers -- ^ 
  , personDeleteRelationshipsAllOfCioRelationshipsRelationshipUnderscoreattributes :: Maybe (Map.Map String Value) -- ^ The attributes associated with a relationship. Passing null or an empty string removes the attribute from the relationship. 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonDeleteRelationshipsAllOfCioRelationships where
  parseJSON = genericParseJSON optionsPersonDeleteRelationshipsAllOfCioRelationships
instance ToJSON PersonDeleteRelationshipsAllOfCioRelationships where
  toJSON = genericToJSON optionsPersonDeleteRelationshipsAllOfCioRelationships

optionsPersonDeleteRelationshipsAllOfCioRelationships :: Options
optionsPersonDeleteRelationshipsAllOfCioRelationships =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personDeleteRelationshipsAllOfCioRelationshipsIdentifiers", "identifiers")
      , ("personDeleteRelationshipsAllOfCioRelationshipsRelationshipUnderscoreattributes", "relationship_attributes")
      ]


-- | The person you want to perform an action for—one of either &#x60;id&#x60;, &#x60;email&#x60;, or &#x60;cio_id&#x60;. You cannot pass multiple identifiers.
data PersonDeleteRelationshipsAllOfIdentifiers = PersonDeleteRelationshipsAllOfIdentifiers
  { personDeleteRelationshipsAllOfIdentifiersId :: Text -- ^ The ID of a customer profile, analogous to a \"person\" in the UI.
  , personDeleteRelationshipsAllOfIdentifiersEmail :: Text -- ^ The email address of the customer.
  , personDeleteRelationshipsAllOfIdentifiersCioUnderscoreid :: Text -- ^ A unique identifier set by Customer.io, used to reference a person if you want to update their identifiers.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonDeleteRelationshipsAllOfIdentifiers where
  parseJSON = genericParseJSON optionsPersonDeleteRelationshipsAllOfIdentifiers
instance ToJSON PersonDeleteRelationshipsAllOfIdentifiers where
  toJSON = genericToJSON optionsPersonDeleteRelationshipsAllOfIdentifiers

optionsPersonDeleteRelationshipsAllOfIdentifiers :: Options
optionsPersonDeleteRelationshipsAllOfIdentifiers =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personDeleteRelationshipsAllOfIdentifiersId", "id")
      , ("personDeleteRelationshipsAllOfIdentifiersEmail", "email")
      , ("personDeleteRelationshipsAllOfIdentifiersCioUnderscoreid", "cio_id")
      ]


-- | A custom event attributed to a person. You can use events to trigger campaigns, or reference event information using liquid in your messages.
data PersonEvent = PersonEvent
  { personEventType :: Text -- ^ The operation modifies a person in Customer.io
  , personEventIdentifiers :: PersonEventAllOfIdentifiers -- ^ 
  , personEventAction :: Text -- ^ A custom event attributed to the specified person.
  , personEventId :: Maybe Text -- ^ A valid ULID used to deduplicate events. Note - our Python and Ruby libraries do not pass this id.
  , personEventName :: Text -- ^ The name of the event. This is how you'll find your event in Customer.io or select it when using events as campaign triggers.
  , personEventTimestamp :: Maybe Int -- ^ The Unix timestamp when the event happened.
  , personEventAttributes :: Maybe PersonOperationsOneOfAllOfAttributes -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonEvent where
  parseJSON = genericParseJSON optionsPersonEvent
instance ToJSON PersonEvent where
  toJSON = genericToJSON optionsPersonEvent

optionsPersonEvent :: Options
optionsPersonEvent =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personEventType", "type")
      , ("personEventIdentifiers", "identifiers")
      , ("personEventAction", "action")
      , ("personEventId", "id")
      , ("personEventName", "name")
      , ("personEventTimestamp", "timestamp")
      , ("personEventAttributes", "attributes")
      ]


-- | The person you want to perform an action for—one of either &#x60;id&#x60;, &#x60;email&#x60;, or &#x60;cio_id&#x60;. You cannot pass multiple identifiers.
data PersonEventAllOfIdentifiers = PersonEventAllOfIdentifiers
  { personEventAllOfIdentifiersId :: Text -- ^ The ID of a customer profile, analogous to a \"person\" in the UI.
  , personEventAllOfIdentifiersEmail :: Text -- ^ The email address of the customer.
  , personEventAllOfIdentifiersCioUnderscoreid :: Text -- ^ A unique identifier set by Customer.io, used to reference a person if you want to update their identifiers.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonEventAllOfIdentifiers where
  parseJSON = genericParseJSON optionsPersonEventAllOfIdentifiers
instance ToJSON PersonEventAllOfIdentifiers where
  toJSON = genericToJSON optionsPersonEventAllOfIdentifiers

optionsPersonEventAllOfIdentifiers :: Options
optionsPersonEventAllOfIdentifiers =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personEventAllOfIdentifiersId", "id")
      , ("personEventAllOfIdentifiersEmail", "email")
      , ("personEventAllOfIdentifiersCioUnderscoreid", "cio_id")
      ]


-- | Merge two people. You&#39;ll merge the &#x60;secondary&#x60; person into the &#x60;primary&#x60;. The primary profile remains after the merge and the secondary is deleted. This operation is _not_ reversible. See our page on [merging duplicate people](/merge-people/) for more information. 
data PersonMerge = PersonMerge
  { personMergeType :: Text -- ^ The operation modifies a person in Customer.io
  , personMergeAction :: Text -- ^ Merge two people. You'll merge the `secondary` person into the `primary`. The primary profile remains after the merge and the secondary is deleted. This operation is _not_ reversible. See our page on [merging duplicate people](/merge-people/) for more information. 
  , personMergePrimary :: PersonOperationsOneOf3Primary -- ^ 
  , personMergeSecondary :: PersonOperationsOneOf3Secondary -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonMerge where
  parseJSON = genericParseJSON optionsPersonMerge
instance ToJSON PersonMerge where
  toJSON = genericToJSON optionsPersonMerge

optionsPersonMerge :: Options
optionsPersonMerge =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personMergeType", "type")
      , ("personMergeAction", "action")
      , ("personMergePrimary", "primary")
      , ("personMergeSecondary", "secondary")
      ]


-- | 
data PersonOperations = PersonOperations
  { personOperationsType :: Text -- ^ The operation modifies a person in Customer.io
  , personOperationsIdentifiers :: Identify1AllOfIdentifiers -- ^ 
  , personOperationsAction :: Text -- ^ Unsuppress a person's identifier(s) in Customer.io, so that you can message a person or add their identifiers back to your workspace. This does not unsuppress addresses that were previously suppressed by your email provider.
  , personOperationsAttributes :: Maybe (Map.Map String Value) -- ^ Additional information that you might want to reference in a message using liquid or use to set attributes on the identified person.
  , personOperationsCioUnderscorerelationships :: [Identify1AllOfCioRelationshipsInner] -- ^ Each object in the array represents a relationship you want to add to, or remove from, a person.
  , personOperationsId :: Maybe Text -- ^ A valid ULID used to deduplicate events. Note - our Python and Ruby libraries do not pass this id.
  , personOperationsName :: Text -- ^ The name of the page or page path that a person visited. This is how you'll find and select page view events in Customer.io.
  , personOperationsTimestamp :: Maybe Int -- ^ The Unix timestamp when the event happened.
  , personOperationsDevice :: DeleteDeviceAllOfDevice -- ^ 
  , personOperationsPrimary :: PersonOperationsOneOf3Primary -- ^ 
  , personOperationsSecondary :: PersonOperationsOneOf3Secondary -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonOperations where
  parseJSON = genericParseJSON optionsPersonOperations
instance ToJSON PersonOperations where
  toJSON = genericToJSON optionsPersonOperations

optionsPersonOperations :: Options
optionsPersonOperations =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personOperationsType", "type")
      , ("personOperationsIdentifiers", "identifiers")
      , ("personOperationsAction", "action")
      , ("personOperationsAttributes", "attributes")
      , ("personOperationsCioUnderscorerelationships", "cio_relationships")
      , ("personOperationsId", "id")
      , ("personOperationsName", "name")
      , ("personOperationsTimestamp", "timestamp")
      , ("personOperationsDevice", "device")
      , ("personOperationsPrimary", "primary")
      , ("personOperationsSecondary", "secondary")
      ]


-- | A custom event attributed to a person. You can use events to trigger campaigns, or reference event information using liquid in your messages.
data PersonOperationsOneOf = PersonOperationsOneOf
  { personOperationsOneOfType :: Text -- ^ The operation modifies a person in Customer.io
  , personOperationsOneOfIdentifiers :: Identify1AllOfIdentifiers -- ^ 
  , personOperationsOneOfAction :: Text -- ^ A custom event attributed to the specified person.
  , personOperationsOneOfId :: Maybe Text -- ^ A valid ULID used to deduplicate events. Note - our Python and Ruby libraries do not pass this id.
  , personOperationsOneOfName :: Text -- ^ The name of the event. This is how you'll find your event in Customer.io or select it when using events as campaign triggers.
  , personOperationsOneOfTimestamp :: Maybe Int -- ^ The Unix timestamp when the event happened.
  , personOperationsOneOfAttributes :: Maybe PersonOperationsOneOfAllOfAttributes -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonOperationsOneOf where
  parseJSON = genericParseJSON optionsPersonOperationsOneOf
instance ToJSON PersonOperationsOneOf where
  toJSON = genericToJSON optionsPersonOperationsOneOf

optionsPersonOperationsOneOf :: Options
optionsPersonOperationsOneOf =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personOperationsOneOfType", "type")
      , ("personOperationsOneOfIdentifiers", "identifiers")
      , ("personOperationsOneOfAction", "action")
      , ("personOperationsOneOfId", "id")
      , ("personOperationsOneOfName", "name")
      , ("personOperationsOneOfTimestamp", "timestamp")
      , ("personOperationsOneOfAttributes", "attributes")
      ]


-- | A mobile \&quot;screenview\&quot; event attributed to a person. Our &#x60;screen&#x60; and &#x60;page&#x60; event types are more specific than our standard &#x60;event&#x60;, and help you track and target people based on the pages people visit in your mobile app or website.
data PersonOperationsOneOf1 = PersonOperationsOneOf1
  { personOperationsOneOf1Type :: Text -- ^ The operation modifies a person in Customer.io
  , personOperationsOneOf1Identifiers :: Identify1AllOfIdentifiers -- ^ 
  , personOperationsOneOf1Action :: Text -- ^ A mobile \"screenview\" event attributed to a person. Our `screen` and `page` event types are more specific than our standard `event`, and help you track and target people based on the pages people visit in your mobile app or website.
  , personOperationsOneOf1Id :: Maybe Text -- ^ A valid ULID used to deduplicate events. Note - our Python and Ruby libraries do not pass this id.
  , personOperationsOneOf1Name :: Text -- ^ The name of the screen a person visited. This is how you'll find and select screen view events in Customer.io.
  , personOperationsOneOf1Timestamp :: Maybe Int -- ^ The Unix timestamp when the event happened.
  , personOperationsOneOf1Attributes :: Maybe (Map.Map String Value) -- ^ Additional information that you might want to reference in a message using liquid or use to set attributes on the identified person.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonOperationsOneOf1 where
  parseJSON = genericParseJSON optionsPersonOperationsOneOf1
instance ToJSON PersonOperationsOneOf1 where
  toJSON = genericToJSON optionsPersonOperationsOneOf1

optionsPersonOperationsOneOf1 :: Options
optionsPersonOperationsOneOf1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personOperationsOneOf1Type", "type")
      , ("personOperationsOneOf1Identifiers", "identifiers")
      , ("personOperationsOneOf1Action", "action")
      , ("personOperationsOneOf1Id", "id")
      , ("personOperationsOneOf1Name", "name")
      , ("personOperationsOneOf1Timestamp", "timestamp")
      , ("personOperationsOneOf1Attributes", "attributes")
      ]


-- | A web \&quot;pageview\&quot; event attributed to a person. Our &#x60;screen&#x60; and &#x60;page&#x60; event types are more specific than our standard &#x60;event&#x60;, and help you track and target people based on the pages people visit in your mobile app or website.
data PersonOperationsOneOf2 = PersonOperationsOneOf2
  { personOperationsOneOf2Type :: Text -- ^ The operation modifies a person in Customer.io
  , personOperationsOneOf2Identifiers :: Identify1AllOfIdentifiers -- ^ 
  , personOperationsOneOf2Action :: Text -- ^ A web \"pageview\" event attributed to a person. Our `screen` and `page` event types are more specific than our standard `event`, and help you track and target people based on the pages people visit in your mobile app or website.
  , personOperationsOneOf2Id :: Maybe Text -- ^ A valid ULID used to deduplicate events. Note - our Python and Ruby libraries do not pass this id.
  , personOperationsOneOf2Name :: Text -- ^ The name of the page or page path that a person visited. This is how you'll find and select page view events in Customer.io.
  , personOperationsOneOf2Timestamp :: Maybe Int -- ^ The Unix timestamp when the event happened.
  , personOperationsOneOf2Attributes :: Maybe (Map.Map String Value) -- ^ Additional information that you might want to reference in a message using liquid or use to set attributes on the identified person.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonOperationsOneOf2 where
  parseJSON = genericParseJSON optionsPersonOperationsOneOf2
instance ToJSON PersonOperationsOneOf2 where
  toJSON = genericToJSON optionsPersonOperationsOneOf2

optionsPersonOperationsOneOf2 :: Options
optionsPersonOperationsOneOf2 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personOperationsOneOf2Type", "type")
      , ("personOperationsOneOf2Identifiers", "identifiers")
      , ("personOperationsOneOf2Action", "action")
      , ("personOperationsOneOf2Id", "id")
      , ("personOperationsOneOf2Name", "name")
      , ("personOperationsOneOf2Timestamp", "timestamp")
      , ("personOperationsOneOf2Attributes", "attributes")
      ]


-- | Merge two people. You&#39;ll merge the &#x60;secondary&#x60; person into the &#x60;primary&#x60;. The primary profile remains after the merge and the secondary is deleted. This operation is _not_ reversible. See our page on [merging duplicate people](/merge-people/) for more information. 
data PersonOperationsOneOf3 = PersonOperationsOneOf3
  { personOperationsOneOf3Type :: Text -- ^ The operation modifies a person in Customer.io
  , personOperationsOneOf3Action :: Text -- ^ Merge two people. You'll merge the `secondary` person into the `primary`. The primary profile remains after the merge and the secondary is deleted. This operation is _not_ reversible. See our page on [merging duplicate people](/merge-people/) for more information. 
  , personOperationsOneOf3Primary :: PersonOperationsOneOf3Primary -- ^ 
  , personOperationsOneOf3Secondary :: PersonOperationsOneOf3Secondary -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonOperationsOneOf3 where
  parseJSON = genericParseJSON optionsPersonOperationsOneOf3
instance ToJSON PersonOperationsOneOf3 where
  toJSON = genericToJSON optionsPersonOperationsOneOf3

optionsPersonOperationsOneOf3 :: Options
optionsPersonOperationsOneOf3 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personOperationsOneOf3Type", "type")
      , ("personOperationsOneOf3Action", "action")
      , ("personOperationsOneOf3Primary", "primary")
      , ("personOperationsOneOf3Secondary", "secondary")
      ]


-- | The person that you want to remain after the merge, identified by one of &#x60;id&#x60;, &#x60;email&#x60;, or &#x60;cio_id&#x60;. This person receives information from the secondary person in the merge.           If email is disabled as an identifier in your [workspace settings](https://fly.customer.io/workspaces/last/settings/edit), then you must reference people by &#x60;id&#x60; or &#x60;cio_id&#x60;. Under How to Modify, &#x60;id&#x60; must be set to \&quot;Reference people by cio_id\&quot; for a successful merge.  
data PersonOperationsOneOf3Primary = PersonOperationsOneOf3Primary
  { personOperationsOneOf3PrimaryId :: Text -- ^ The ID of a customer profile, analogous to a \"person\" in the UI.
  , personOperationsOneOf3PrimaryEmail :: Text -- ^ The email address of the customer.
  , personOperationsOneOf3PrimaryCioUnderscoreid :: Text -- ^ A unique identifier set by Customer.io, used to reference a person if you want to update their identifiers.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonOperationsOneOf3Primary where
  parseJSON = genericParseJSON optionsPersonOperationsOneOf3Primary
instance ToJSON PersonOperationsOneOf3Primary where
  toJSON = genericToJSON optionsPersonOperationsOneOf3Primary

optionsPersonOperationsOneOf3Primary :: Options
optionsPersonOperationsOneOf3Primary =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personOperationsOneOf3PrimaryId", "id")
      , ("personOperationsOneOf3PrimaryEmail", "email")
      , ("personOperationsOneOf3PrimaryCioUnderscoreid", "cio_id")
      ]


-- | The person that you want to delete after the merge, identified by one of &#x60;id&#x60;, &#x60;email&#x60;, or &#x60;cio_id&#x60;. This person&#39;s information is merged into the primary person&#39;s profile and then it is deleted.        If email is disabled as an identifier in your [workspace settings](https://fly.customer.io/workspaces/last/settings/edit), then you must reference people by &#x60;id&#x60; or &#x60;cio_id&#x60;. Under How to Modify, &#x60;id&#x60; must be set to \&quot;Reference people by cio_id\&quot; for a successful merge. 
data PersonOperationsOneOf3Secondary = PersonOperationsOneOf3Secondary
  { personOperationsOneOf3SecondaryId :: Text -- ^ The ID of a customer profile, analogous to a \"person\" in the UI.
  , personOperationsOneOf3SecondaryEmail :: Text -- ^ The email address of the customer.
  , personOperationsOneOf3SecondaryCioUnderscoreid :: Text -- ^ A unique identifier set by Customer.io, used to reference a person if you want to update their identifiers.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonOperationsOneOf3Secondary where
  parseJSON = genericParseJSON optionsPersonOperationsOneOf3Secondary
instance ToJSON PersonOperationsOneOf3Secondary where
  toJSON = genericToJSON optionsPersonOperationsOneOf3Secondary

optionsPersonOperationsOneOf3Secondary :: Options
optionsPersonOperationsOneOf3Secondary =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personOperationsOneOf3SecondaryId", "id")
      , ("personOperationsOneOf3SecondaryEmail", "email")
      , ("personOperationsOneOf3SecondaryCioUnderscoreid", "cio_id")
      ]


-- | Additional information that you might want to reference in a message using liquid or use to set attributes on the identified person. 
newtype PersonOperationsOneOfAllOfAttributes = PersonOperationsOneOfAllOfAttributes { unPersonOperationsOneOfAllOfAttributes :: (Map.Map Text Value) }
  deriving (Show, Eq, FromJSON, ToJSON, Generic, Data)

-- | A web \&quot;pageview\&quot; event attributed to a person. Our &#x60;screen&#x60; and &#x60;page&#x60; event types are more specific than our standard &#x60;event&#x60;, and help you track and target people based on the pages people visit in your mobile app or website.
data PersonPage = PersonPage
  { personPageType :: Text -- ^ The operation modifies a person in Customer.io
  , personPageIdentifiers :: PersonPageAllOfIdentifiers -- ^ 
  , personPageAction :: Text -- ^ A web \"pageview\" event attributed to a person. Our `screen` and `page` event types are more specific than our standard `event`, and help you track and target people based on the pages people visit in your mobile app or website.
  , personPageId :: Maybe Text -- ^ A valid ULID used to deduplicate events. Note - our Python and Ruby libraries do not pass this id.
  , personPageName :: Text -- ^ The name of the page or page path that a person visited. This is how you'll find and select page view events in Customer.io.
  , personPageTimestamp :: Maybe Int -- ^ The Unix timestamp when the event happened.
  , personPageAttributes :: Maybe (Map.Map String Value) -- ^ Additional information that you might want to reference in a message using liquid or use to set attributes on the identified person.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonPage where
  parseJSON = genericParseJSON optionsPersonPage
instance ToJSON PersonPage where
  toJSON = genericToJSON optionsPersonPage

optionsPersonPage :: Options
optionsPersonPage =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personPageType", "type")
      , ("personPageIdentifiers", "identifiers")
      , ("personPageAction", "action")
      , ("personPageId", "id")
      , ("personPageName", "name")
      , ("personPageTimestamp", "timestamp")
      , ("personPageAttributes", "attributes")
      ]


-- | The person you want to perform an action for—one of either &#x60;id&#x60;, &#x60;email&#x60;, or &#x60;cio_id&#x60;. You cannot pass multiple identifiers.
data PersonPageAllOfIdentifiers = PersonPageAllOfIdentifiers
  { personPageAllOfIdentifiersId :: Text -- ^ The ID of a customer profile, analogous to a \"person\" in the UI.
  , personPageAllOfIdentifiersEmail :: Text -- ^ The email address of the customer.
  , personPageAllOfIdentifiersCioUnderscoreid :: Text -- ^ A unique identifier set by Customer.io, used to reference a person if you want to update their identifiers.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonPageAllOfIdentifiers where
  parseJSON = genericParseJSON optionsPersonPageAllOfIdentifiers
instance ToJSON PersonPageAllOfIdentifiers where
  toJSON = genericToJSON optionsPersonPageAllOfIdentifiers

optionsPersonPageAllOfIdentifiers :: Options
optionsPersonPageAllOfIdentifiers =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personPageAllOfIdentifiersId", "id")
      , ("personPageAllOfIdentifiersEmail", "email")
      , ("personPageAllOfIdentifiersCioUnderscoreid", "cio_id")
      ]


-- | A mobile \&quot;screenview\&quot; event attributed to a person. Our &#x60;screen&#x60; and &#x60;page&#x60; event types are more specific than our standard &#x60;event&#x60;, and help you track and target people based on the pages people visit in your mobile app or website.
data PersonScreen = PersonScreen
  { personScreenType :: Text -- ^ The operation modifies a person in Customer.io
  , personScreenIdentifiers :: PersonScreenAllOfIdentifiers -- ^ 
  , personScreenAction :: Text -- ^ A mobile \"screenview\" event attributed to a person. Our `screen` and `page` event types are more specific than our standard `event`, and help you track and target people based on the pages people visit in your mobile app or website.
  , personScreenId :: Maybe Text -- ^ A valid ULID used to deduplicate events. Note - our Python and Ruby libraries do not pass this id.
  , personScreenName :: Text -- ^ The name of the screen a person visited. This is how you'll find and select screen view events in Customer.io.
  , personScreenTimestamp :: Maybe Int -- ^ The Unix timestamp when the event happened.
  , personScreenAttributes :: Maybe (Map.Map String Value) -- ^ Additional information that you might want to reference in a message using liquid or use to set attributes on the identified person.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonScreen where
  parseJSON = genericParseJSON optionsPersonScreen
instance ToJSON PersonScreen where
  toJSON = genericToJSON optionsPersonScreen

optionsPersonScreen :: Options
optionsPersonScreen =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personScreenType", "type")
      , ("personScreenIdentifiers", "identifiers")
      , ("personScreenAction", "action")
      , ("personScreenId", "id")
      , ("personScreenName", "name")
      , ("personScreenTimestamp", "timestamp")
      , ("personScreenAttributes", "attributes")
      ]


-- | The person you want to perform an action for—one of either &#x60;id&#x60;, &#x60;email&#x60;, or &#x60;cio_id&#x60;. You cannot pass multiple identifiers.
data PersonScreenAllOfIdentifiers = PersonScreenAllOfIdentifiers
  { personScreenAllOfIdentifiersId :: Text -- ^ The ID of a customer profile, analogous to a \"person\" in the UI.
  , personScreenAllOfIdentifiersEmail :: Text -- ^ The email address of the customer.
  , personScreenAllOfIdentifiersCioUnderscoreid :: Text -- ^ A unique identifier set by Customer.io, used to reference a person if you want to update their identifiers.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonScreenAllOfIdentifiers where
  parseJSON = genericParseJSON optionsPersonScreenAllOfIdentifiers
instance ToJSON PersonScreenAllOfIdentifiers where
  toJSON = genericToJSON optionsPersonScreenAllOfIdentifiers

optionsPersonScreenAllOfIdentifiers :: Options
optionsPersonScreenAllOfIdentifiers =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personScreenAllOfIdentifiersId", "id")
      , ("personScreenAllOfIdentifiersEmail", "email")
      , ("personScreenAllOfIdentifiersCioUnderscoreid", "cio_id")
      ]


-- | A person subscribed to messages from you—their &#x60;unsubscribed&#x60; attribute was set to &#x60;false&#x60;.
data PersonSubscribed = PersonSubscribed
  { personSubscribedMetric :: Text -- ^ The metric recorded by the event. For `customer` events, this is whether the customer explicitly subscribed or unsubscribed.
  , personSubscribedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , personSubscribedObjectUnderscoretype :: Text -- ^ The event represents a customer subscribing, unsubscribing, or changing their subscription preferences.
  , personSubscribedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , personSubscribedData :: SubscribedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonSubscribed where
  parseJSON = genericParseJSON optionsPersonSubscribed
instance ToJSON PersonSubscribed where
  toJSON = genericToJSON optionsPersonSubscribed

optionsPersonSubscribed :: Options
optionsPersonSubscribed =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personSubscribedMetric", "metric")
      , ("personSubscribedEventUnderscoreid", "event_id")
      , ("personSubscribedObjectUnderscoretype", "object_type")
      , ("personSubscribedTimestamp", "timestamp")
      , ("personSubscribedData", "data")
      ]


-- | Suppress a person&#39;s identifier(s) in Customer.io, so that you can&#39;t message a person or add their identifiers back to your workspace. This is separate from suppressions performed by your email provider.
data PersonSuppress = PersonSuppress
  { personSuppressType :: Text -- ^ The operation modifies a person in Customer.io
  , personSuppressIdentifiers :: PersonSuppressAllOfIdentifiers -- ^ 
  , personSuppressAction :: Text -- ^ Suppress a person's identifier(s) in Customer.io, so that you can't message a person or add their identifiers back to your workspace. This is separate from suppressions performed by your email provider.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonSuppress where
  parseJSON = genericParseJSON optionsPersonSuppress
instance ToJSON PersonSuppress where
  toJSON = genericToJSON optionsPersonSuppress

optionsPersonSuppress :: Options
optionsPersonSuppress =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personSuppressType", "type")
      , ("personSuppressIdentifiers", "identifiers")
      , ("personSuppressAction", "action")
      ]


-- | The person you want to perform an action for—one of either &#x60;id&#x60;, &#x60;email&#x60;, or &#x60;cio_id&#x60;. You cannot pass multiple identifiers.
data PersonSuppressAllOfIdentifiers = PersonSuppressAllOfIdentifiers
  { personSuppressAllOfIdentifiersId :: Text -- ^ The ID of a customer profile, analogous to a \"person\" in the UI.
  , personSuppressAllOfIdentifiersEmail :: Text -- ^ The email address of the customer.
  , personSuppressAllOfIdentifiersCioUnderscoreid :: Text -- ^ A unique identifier set by Customer.io, used to reference a person if you want to update their identifiers.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonSuppressAllOfIdentifiers where
  parseJSON = genericParseJSON optionsPersonSuppressAllOfIdentifiers
instance ToJSON PersonSuppressAllOfIdentifiers where
  toJSON = genericToJSON optionsPersonSuppressAllOfIdentifiers

optionsPersonSuppressAllOfIdentifiers :: Options
optionsPersonSuppressAllOfIdentifiers =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personSuppressAllOfIdentifiersId", "id")
      , ("personSuppressAllOfIdentifiersEmail", "email")
      , ("personSuppressAllOfIdentifiersCioUnderscoreid", "cio_id")
      ]


-- | A person unsubscribed to messages from you—their &#x60;unsubscribed&#x60; attribute was set to &#x60;true&#x60;.
data PersonUnsubscribed = PersonUnsubscribed
  { personUnsubscribedMetric :: Text -- ^ The metric recorded by the event. For `customer` events, this is whether the customer explicitly subscribed or unsubscribed.
  , personUnsubscribedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , personUnsubscribedObjectUnderscoretype :: Text -- ^ The event represents a customer subscribing, unsubscribing, or changing their subscription preferences.
  , personUnsubscribedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , personUnsubscribedData :: SubscribedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonUnsubscribed where
  parseJSON = genericParseJSON optionsPersonUnsubscribed
instance ToJSON PersonUnsubscribed where
  toJSON = genericToJSON optionsPersonUnsubscribed

optionsPersonUnsubscribed :: Options
optionsPersonUnsubscribed =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personUnsubscribedMetric", "metric")
      , ("personUnsubscribedEventUnderscoreid", "event_id")
      , ("personUnsubscribedObjectUnderscoretype", "object_type")
      , ("personUnsubscribedTimestamp", "timestamp")
      , ("personUnsubscribedData", "data")
      ]


-- | Unsuppress a person&#39;s identifier(s) in Customer.io, so that you can message a person or add their identifiers back to your workspace. This does not unsuppress addresses that were previously suppressed by your email provider.
data PersonUnsuppress = PersonUnsuppress
  { personUnsuppressType :: Text -- ^ The operation modifies a person in Customer.io
  , personUnsuppressIdentifiers :: PersonUnsuppressAllOfIdentifiers -- ^ 
  , personUnsuppressAction :: Text -- ^ Unsuppress a person's identifier(s) in Customer.io, so that you can message a person or add their identifiers back to your workspace. This does not unsuppress addresses that were previously suppressed by your email provider.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonUnsuppress where
  parseJSON = genericParseJSON optionsPersonUnsuppress
instance ToJSON PersonUnsuppress where
  toJSON = genericToJSON optionsPersonUnsuppress

optionsPersonUnsuppress :: Options
optionsPersonUnsuppress =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personUnsuppressType", "type")
      , ("personUnsuppressIdentifiers", "identifiers")
      , ("personUnsuppressAction", "action")
      ]


-- | The person you want to perform an action for—one of either &#x60;id&#x60;, &#x60;email&#x60;, or &#x60;cio_id&#x60;. You cannot pass multiple identifiers.
data PersonUnsuppressAllOfIdentifiers = PersonUnsuppressAllOfIdentifiers
  { personUnsuppressAllOfIdentifiersId :: Text -- ^ The ID of a customer profile, analogous to a \"person\" in the UI.
  , personUnsuppressAllOfIdentifiersEmail :: Text -- ^ The email address of the customer.
  , personUnsuppressAllOfIdentifiersCioUnderscoreid :: Text -- ^ A unique identifier set by Customer.io, used to reference a person if you want to update their identifiers.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PersonUnsuppressAllOfIdentifiers where
  parseJSON = genericParseJSON optionsPersonUnsuppressAllOfIdentifiers
instance ToJSON PersonUnsuppressAllOfIdentifiers where
  toJSON = genericToJSON optionsPersonUnsuppressAllOfIdentifiers

optionsPersonUnsuppressAllOfIdentifiers :: Options
optionsPersonUnsuppressAllOfIdentifiers =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("personUnsuppressAllOfIdentifiersId", "id")
      , ("personUnsuppressAllOfIdentifiersEmail", "email")
      , ("personUnsuppressAllOfIdentifiersCioUnderscoreid", "cio_id")
      ]


-- | By default, we process CSS before emails leave Customer.io using Premailer. If your message included CSS and pre-processing is not disabled, this key indicates the pre-processor.
data Preprocessor = Preprocessor
  { 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Preprocessor where
  parseJSON = genericParseJSON optionsPreprocessor
instance ToJSON Preprocessor where
  toJSON = genericToJSON optionsPreprocessor

optionsPreprocessor :: Options
optionsPreprocessor =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ 
      ]


-- | Events representing a push notification.
data Push = Push
  { pushEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , pushObjectUnderscoretype :: Text -- ^ The event relates to an push notification.
  , pushTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , pushMetric :: Text -- ^ A message was undeliverable. Undeliverable messages are messages that have either hit a message limit, come from a newsletter that was cancelled or deleted, or an environment that has delivery disabled (which is something you might do if you’re testing an integration). If you’re not using message limits, you probably won’t see this event.
  , pushData :: AttemptedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Push where
  parseJSON = genericParseJSON optionsPush
instance ToJSON Push where
  toJSON = genericToJSON optionsPush

optionsPush :: Options
optionsPush =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("pushEventUnderscoreid", "event_id")
      , ("pushObjectUnderscoretype", "object_type")
      , ("pushTimestamp", "timestamp")
      , ("pushMetric", "metric")
      , ("pushData", "data")
      ]


-- | 
data PushAttempted = PushAttempted
  { pushAttemptedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , pushAttemptedObjectUnderscoretype :: Text -- ^ The event relates to an push notification.
  , pushAttemptedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , pushAttemptedMetric :: Text -- ^ A push notification was attempted but unsuccessful. This generally means that we'll try again.
  , pushAttemptedData :: PushAttemptedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PushAttempted where
  parseJSON = genericParseJSON optionsPushAttempted
instance ToJSON PushAttempted where
  toJSON = genericToJSON optionsPushAttempted

optionsPushAttempted :: Options
optionsPushAttempted =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("pushAttemptedEventUnderscoreid", "event_id")
      , ("pushAttemptedObjectUnderscoretype", "object_type")
      , ("pushAttemptedTimestamp", "timestamp")
      , ("pushAttemptedMetric", "metric")
      , ("pushAttemptedData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data PushAttemptedAllOfData = PushAttemptedAllOfData
  { pushAttemptedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , pushAttemptedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , pushAttemptedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , pushAttemptedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , pushAttemptedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , pushAttemptedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , pushAttemptedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , pushAttemptedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , pushAttemptedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , pushAttemptedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , pushAttemptedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , pushAttemptedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , pushAttemptedAllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , pushAttemptedAllOfDataFailureUnderscoremessage :: Text -- ^ Indicates the reason that an attempted message failed.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PushAttemptedAllOfData where
  parseJSON = genericParseJSON optionsPushAttemptedAllOfData
instance ToJSON PushAttemptedAllOfData where
  toJSON = genericToJSON optionsPushAttemptedAllOfData

optionsPushAttemptedAllOfData :: Options
optionsPushAttemptedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("pushAttemptedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("pushAttemptedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("pushAttemptedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("pushAttemptedAllOfDataActionUnderscoreid", "action_id")
      , ("pushAttemptedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("pushAttemptedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("pushAttemptedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("pushAttemptedAllOfDataIdentifiers", "identifiers")
      , ("pushAttemptedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("pushAttemptedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("pushAttemptedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("pushAttemptedAllOfDataContentUnderscoreid", "content_id")
      , ("pushAttemptedAllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("pushAttemptedAllOfDataFailureUnderscoremessage", "failure_message")
      ]


-- | 
data PushBounced = PushBounced
  { pushBouncedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , pushBouncedObjectUnderscoretype :: Text -- ^ The event relates to an push notification.
  , pushBouncedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , pushBouncedMetric :: Text -- ^ The delivery provider reported at least one invalid device token.
  , pushBouncedData :: PushBouncedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PushBounced where
  parseJSON = genericParseJSON optionsPushBounced
instance ToJSON PushBounced where
  toJSON = genericToJSON optionsPushBounced

optionsPushBounced :: Options
optionsPushBounced =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("pushBouncedEventUnderscoreid", "event_id")
      , ("pushBouncedObjectUnderscoretype", "object_type")
      , ("pushBouncedTimestamp", "timestamp")
      , ("pushBouncedMetric", "metric")
      , ("pushBouncedData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data PushBouncedAllOfData = PushBouncedAllOfData
  { pushBouncedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , pushBouncedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , pushBouncedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , pushBouncedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , pushBouncedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , pushBouncedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , pushBouncedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , pushBouncedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , pushBouncedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , pushBouncedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , pushBouncedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , pushBouncedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , pushBouncedAllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , pushBouncedAllOfDataRecipients :: [Bounced1AllOfDataAllOfRecipientsInner] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PushBouncedAllOfData where
  parseJSON = genericParseJSON optionsPushBouncedAllOfData
instance ToJSON PushBouncedAllOfData where
  toJSON = genericToJSON optionsPushBouncedAllOfData

optionsPushBouncedAllOfData :: Options
optionsPushBouncedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("pushBouncedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("pushBouncedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("pushBouncedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("pushBouncedAllOfDataActionUnderscoreid", "action_id")
      , ("pushBouncedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("pushBouncedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("pushBouncedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("pushBouncedAllOfDataIdentifiers", "identifiers")
      , ("pushBouncedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("pushBouncedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("pushBouncedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("pushBouncedAllOfDataContentUnderscoreid", "content_id")
      , ("pushBouncedAllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("pushBouncedAllOfDataRecipients", "recipients")
      ]


-- | 
data PushClicked = PushClicked
  { pushClickedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , pushClickedObjectUnderscoretype :: Text -- ^ The event relates to an push notification.
  , pushClickedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , pushClickedMetric :: Text -- ^ A recipient tapped a link in a push notification.
  , pushClickedData :: PushClickedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PushClicked where
  parseJSON = genericParseJSON optionsPushClicked
instance ToJSON PushClicked where
  toJSON = genericToJSON optionsPushClicked

optionsPushClicked :: Options
optionsPushClicked =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("pushClickedEventUnderscoreid", "event_id")
      , ("pushClickedObjectUnderscoretype", "object_type")
      , ("pushClickedTimestamp", "timestamp")
      , ("pushClickedMetric", "metric")
      , ("pushClickedData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data PushClickedAllOfData = PushClickedAllOfData
  { pushClickedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , pushClickedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , pushClickedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , pushClickedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , pushClickedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , pushClickedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , pushClickedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , pushClickedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , pushClickedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , pushClickedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , pushClickedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , pushClickedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , pushClickedAllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , pushClickedAllOfDataHref :: Text -- ^ The URL of the link that a person clicked.
  , pushClickedAllOfDataLinkUnderscoreid :: Int -- ^ The identifier for the tracked link that a person clicked or tapped.
  , pushClickedAllOfDataRecipients :: [Clicked1AllOfDataAllOfRecipientsInner] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PushClickedAllOfData where
  parseJSON = genericParseJSON optionsPushClickedAllOfData
instance ToJSON PushClickedAllOfData where
  toJSON = genericToJSON optionsPushClickedAllOfData

optionsPushClickedAllOfData :: Options
optionsPushClickedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("pushClickedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("pushClickedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("pushClickedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("pushClickedAllOfDataActionUnderscoreid", "action_id")
      , ("pushClickedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("pushClickedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("pushClickedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("pushClickedAllOfDataIdentifiers", "identifiers")
      , ("pushClickedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("pushClickedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("pushClickedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("pushClickedAllOfDataContentUnderscoreid", "content_id")
      , ("pushClickedAllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("pushClickedAllOfDataHref", "href")
      , ("pushClickedAllOfDataLinkUnderscoreid", "link_id")
      , ("pushClickedAllOfDataRecipients", "recipients")
      ]


-- | 
data PushConverted = PushConverted
  { pushConvertedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , pushConvertedObjectUnderscoretype :: Text -- ^ The event relates to an push notification.
  , pushConvertedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , pushConvertedMetric :: Text -- ^ A person matched a conversion goal attributed to a push notification.
  , pushConvertedData :: PushConvertedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PushConverted where
  parseJSON = genericParseJSON optionsPushConverted
instance ToJSON PushConverted where
  toJSON = genericToJSON optionsPushConverted

optionsPushConverted :: Options
optionsPushConverted =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("pushConvertedEventUnderscoreid", "event_id")
      , ("pushConvertedObjectUnderscoretype", "object_type")
      , ("pushConvertedTimestamp", "timestamp")
      , ("pushConvertedMetric", "metric")
      , ("pushConvertedData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data PushConvertedAllOfData = PushConvertedAllOfData
  { pushConvertedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , pushConvertedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , pushConvertedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , pushConvertedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , pushConvertedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , pushConvertedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , pushConvertedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , pushConvertedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , pushConvertedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , pushConvertedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , pushConvertedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , pushConvertedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , pushConvertedAllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , pushConvertedAllOfDataRecipients :: [Clicked1AllOfDataAllOfRecipientsInner] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PushConvertedAllOfData where
  parseJSON = genericParseJSON optionsPushConvertedAllOfData
instance ToJSON PushConvertedAllOfData where
  toJSON = genericToJSON optionsPushConvertedAllOfData

optionsPushConvertedAllOfData :: Options
optionsPushConvertedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("pushConvertedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("pushConvertedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("pushConvertedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("pushConvertedAllOfDataActionUnderscoreid", "action_id")
      , ("pushConvertedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("pushConvertedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("pushConvertedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("pushConvertedAllOfDataIdentifiers", "identifiers")
      , ("pushConvertedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("pushConvertedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("pushConvertedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("pushConvertedAllOfDataContentUnderscoreid", "content_id")
      , ("pushConvertedAllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("pushConvertedAllOfDataRecipients", "recipients")
      ]


-- | 
data PushDelivered = PushDelivered
  { pushDeliveredEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , pushDeliveredObjectUnderscoretype :: Text -- ^ The event relates to an push notification.
  , pushDeliveredTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , pushDeliveredMetric :: Text -- ^ A push notification was delivered to a recipient device.
  , pushDeliveredData :: PushDeliveredAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PushDelivered where
  parseJSON = genericParseJSON optionsPushDelivered
instance ToJSON PushDelivered where
  toJSON = genericToJSON optionsPushDelivered

optionsPushDelivered :: Options
optionsPushDelivered =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("pushDeliveredEventUnderscoreid", "event_id")
      , ("pushDeliveredObjectUnderscoretype", "object_type")
      , ("pushDeliveredTimestamp", "timestamp")
      , ("pushDeliveredMetric", "metric")
      , ("pushDeliveredData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data PushDeliveredAllOfData = PushDeliveredAllOfData
  { pushDeliveredAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , pushDeliveredAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , pushDeliveredAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , pushDeliveredAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , pushDeliveredAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , pushDeliveredAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , pushDeliveredAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , pushDeliveredAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , pushDeliveredAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , pushDeliveredAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , pushDeliveredAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , pushDeliveredAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , pushDeliveredAllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , pushDeliveredAllOfDataRecipients :: [Delivered1AllOfDataAllOfRecipientsInner] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PushDeliveredAllOfData where
  parseJSON = genericParseJSON optionsPushDeliveredAllOfData
instance ToJSON PushDeliveredAllOfData where
  toJSON = genericToJSON optionsPushDeliveredAllOfData

optionsPushDeliveredAllOfData :: Options
optionsPushDeliveredAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("pushDeliveredAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("pushDeliveredAllOfDataCustomerUnderscoreid", "customer_id")
      , ("pushDeliveredAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("pushDeliveredAllOfDataActionUnderscoreid", "action_id")
      , ("pushDeliveredAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("pushDeliveredAllOfDataJourneyUnderscoreid", "journey_id")
      , ("pushDeliveredAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("pushDeliveredAllOfDataIdentifiers", "identifiers")
      , ("pushDeliveredAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("pushDeliveredAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("pushDeliveredAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("pushDeliveredAllOfDataContentUnderscoreid", "content_id")
      , ("pushDeliveredAllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("pushDeliveredAllOfDataRecipients", "recipients")
      ]


-- | 
data PushDrafted = PushDrafted
  { pushDraftedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , pushDraftedObjectUnderscoretype :: Text -- ^ The event relates to an push notification.
  , pushDraftedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , pushDraftedMetric :: Text -- ^ A push notification was drafted.
  , pushDraftedData :: PushDraftedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PushDrafted where
  parseJSON = genericParseJSON optionsPushDrafted
instance ToJSON PushDrafted where
  toJSON = genericToJSON optionsPushDrafted

optionsPushDrafted :: Options
optionsPushDrafted =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("pushDraftedEventUnderscoreid", "event_id")
      , ("pushDraftedObjectUnderscoretype", "object_type")
      , ("pushDraftedTimestamp", "timestamp")
      , ("pushDraftedMetric", "metric")
      , ("pushDraftedData", "data")
      ]


-- | 
data PushDraftedAllOfData = PushDraftedAllOfData
  { pushDraftedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , pushDraftedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , pushDraftedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , pushDraftedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , pushDraftedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , pushDraftedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , pushDraftedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , pushDraftedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , pushDraftedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , pushDraftedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , pushDraftedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , pushDraftedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , pushDraftedAllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PushDraftedAllOfData where
  parseJSON = genericParseJSON optionsPushDraftedAllOfData
instance ToJSON PushDraftedAllOfData where
  toJSON = genericToJSON optionsPushDraftedAllOfData

optionsPushDraftedAllOfData :: Options
optionsPushDraftedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("pushDraftedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("pushDraftedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("pushDraftedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("pushDraftedAllOfDataActionUnderscoreid", "action_id")
      , ("pushDraftedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("pushDraftedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("pushDraftedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("pushDraftedAllOfDataIdentifiers", "identifiers")
      , ("pushDraftedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("pushDraftedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("pushDraftedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("pushDraftedAllOfDataContentUnderscoreid", "content_id")
      , ("pushDraftedAllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      ]


-- | 
data PushDropped = PushDropped
  { pushDroppedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , pushDroppedObjectUnderscoretype :: Text -- ^ The event relates to an push notification.
  , pushDroppedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , pushDroppedMetric :: Text -- ^ A push notification wasn't sent because at least one device token previously bounced.
  , pushDroppedData :: PushDroppedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PushDropped where
  parseJSON = genericParseJSON optionsPushDropped
instance ToJSON PushDropped where
  toJSON = genericToJSON optionsPushDropped

optionsPushDropped :: Options
optionsPushDropped =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("pushDroppedEventUnderscoreid", "event_id")
      , ("pushDroppedObjectUnderscoretype", "object_type")
      , ("pushDroppedTimestamp", "timestamp")
      , ("pushDroppedMetric", "metric")
      , ("pushDroppedData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data PushDroppedAllOfData = PushDroppedAllOfData
  { pushDroppedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , pushDroppedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , pushDroppedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , pushDroppedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , pushDroppedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , pushDroppedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , pushDroppedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , pushDroppedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , pushDroppedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , pushDroppedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , pushDroppedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , pushDroppedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , pushDroppedAllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , pushDroppedAllOfDataRecipients :: [Bounced1AllOfDataAllOfRecipientsInner] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PushDroppedAllOfData where
  parseJSON = genericParseJSON optionsPushDroppedAllOfData
instance ToJSON PushDroppedAllOfData where
  toJSON = genericToJSON optionsPushDroppedAllOfData

optionsPushDroppedAllOfData :: Options
optionsPushDroppedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("pushDroppedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("pushDroppedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("pushDroppedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("pushDroppedAllOfDataActionUnderscoreid", "action_id")
      , ("pushDroppedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("pushDroppedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("pushDroppedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("pushDroppedAllOfDataIdentifiers", "identifiers")
      , ("pushDroppedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("pushDroppedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("pushDroppedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("pushDroppedAllOfDataContentUnderscoreid", "content_id")
      , ("pushDroppedAllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("pushDroppedAllOfDataRecipients", "recipients")
      ]


-- | Events representing a push notification.
data PushEvent = PushEvent
  { pushEventEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , pushEventObjectUnderscoretype :: Text -- ^ The event relates to an push notification.
  , pushEventTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , pushEventMetric :: Text -- ^ A message was undeliverable. Undeliverable messages are messages that have either hit a message limit, come from a newsletter that was cancelled or deleted, or an environment that has delivery disabled (which is something you might do if you’re testing an integration). If you’re not using message limits, you probably won’t see this event.
  , pushEventData :: EmailAttemptedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PushEvent where
  parseJSON = genericParseJSON optionsPushEvent
instance ToJSON PushEvent where
  toJSON = genericToJSON optionsPushEvent

optionsPushEvent :: Options
optionsPushEvent =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("pushEventEventUnderscoreid", "event_id")
      , ("pushEventObjectUnderscoretype", "object_type")
      , ("pushEventTimestamp", "timestamp")
      , ("pushEventMetric", "metric")
      , ("pushEventData", "data")
      ]


-- | 
data PushEventCommon = PushEventCommon
  { pushEventCommonEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , pushEventCommonObjectUnderscoretype :: Text -- ^ The event relates to an push notification.
  , pushEventCommonTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PushEventCommon where
  parseJSON = genericParseJSON optionsPushEventCommon
instance ToJSON PushEventCommon where
  toJSON = genericToJSON optionsPushEventCommon

optionsPushEventCommon :: Options
optionsPushEventCommon =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("pushEventCommonEventUnderscoreid", "event_id")
      , ("pushEventCommonObjectUnderscoretype", "object_type")
      , ("pushEventCommonTimestamp", "timestamp")
      ]


-- | Describes the push events reported from Customer.io to a webhook.
data PushEvents = PushEvents
  { pushEventsPushUnderscoreattempted :: Maybe Bool -- ^ Reports when a push notification could not be sent to the delivery provider will retry. Set to true to report this event type.
  , pushEventsPushUnderscorebounced :: Maybe Bool -- ^ Reports when the delivery provider is unable to deliver a message. Set to true to report this event type.
  , pushEventsPushUnderscoreclicked :: Maybe Bool -- ^ Reports when a person clicks a tracked link in a message. Set to true to report this event type.
  , pushEventsPushUnderscoreconverted :: Maybe Bool -- ^ Reports a conversion. Set to true to report this event type.
  , pushEventsPushUnderscoredelivered :: Maybe Bool -- ^ An app reports that the recipient's device received a message. Set to true to report this event type.
  , pushEventsPushUnderscoredrafted :: Maybe Bool -- ^ Reports when a message draft is created. Set to true to report this event type.
  , pushEventsPushUnderscoredropped :: Maybe Bool -- ^ Reports when a message isn't sent because the recipient is suppressed. Set to true to report this event type.
  , pushEventsPushUnderscorefailed :: Maybe Bool -- ^ Reports when a message couldn't be sent to the delivery provider. Set to true to report this event type.
  , pushEventsPushUnderscoreopened :: Maybe Bool -- ^ The app on a recipient's device reports that the recipient opened the message. Set to true to report this event type.
  , pushEventsPushUnderscoresent :: Maybe Bool -- ^ Reports when a message is sent from Customer.io to the delivery provider. Set to true to report this event type.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PushEvents where
  parseJSON = genericParseJSON optionsPushEvents
instance ToJSON PushEvents where
  toJSON = genericToJSON optionsPushEvents

optionsPushEvents :: Options
optionsPushEvents =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("pushEventsPushUnderscoreattempted", "push_attempted")
      , ("pushEventsPushUnderscorebounced", "push_bounced")
      , ("pushEventsPushUnderscoreclicked", "push_clicked")
      , ("pushEventsPushUnderscoreconverted", "push_converted")
      , ("pushEventsPushUnderscoredelivered", "push_delivered")
      , ("pushEventsPushUnderscoredrafted", "push_drafted")
      , ("pushEventsPushUnderscoredropped", "push_dropped")
      , ("pushEventsPushUnderscorefailed", "push_failed")
      , ("pushEventsPushUnderscoreopened", "push_opened")
      , ("pushEventsPushUnderscoresent", "push_sent")
      ]


-- | 
data PushFailed = PushFailed
  { pushFailedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , pushFailedObjectUnderscoretype :: Text -- ^ The event relates to an push notification.
  , pushFailedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , pushFailedMetric :: Text -- ^ A push notification couldn't be sent to the delivery provider.
  , pushFailedData :: PushFailedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PushFailed where
  parseJSON = genericParseJSON optionsPushFailed
instance ToJSON PushFailed where
  toJSON = genericToJSON optionsPushFailed

optionsPushFailed :: Options
optionsPushFailed =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("pushFailedEventUnderscoreid", "event_id")
      , ("pushFailedObjectUnderscoretype", "object_type")
      , ("pushFailedTimestamp", "timestamp")
      , ("pushFailedMetric", "metric")
      , ("pushFailedData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data PushFailedAllOfData = PushFailedAllOfData
  { pushFailedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , pushFailedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , pushFailedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , pushFailedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , pushFailedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , pushFailedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , pushFailedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , pushFailedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , pushFailedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , pushFailedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , pushFailedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , pushFailedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , pushFailedAllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , pushFailedAllOfDataFailureUnderscoremessage :: Text -- ^ Indicates the reason that an attempted message failed.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PushFailedAllOfData where
  parseJSON = genericParseJSON optionsPushFailedAllOfData
instance ToJSON PushFailedAllOfData where
  toJSON = genericToJSON optionsPushFailedAllOfData

optionsPushFailedAllOfData :: Options
optionsPushFailedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("pushFailedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("pushFailedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("pushFailedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("pushFailedAllOfDataActionUnderscoreid", "action_id")
      , ("pushFailedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("pushFailedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("pushFailedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("pushFailedAllOfDataIdentifiers", "identifiers")
      , ("pushFailedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("pushFailedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("pushFailedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("pushFailedAllOfDataContentUnderscoreid", "content_id")
      , ("pushFailedAllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("pushFailedAllOfDataFailureUnderscoremessage", "failure_message")
      ]


-- | 
data PushOpened = PushOpened
  { pushOpenedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , pushOpenedObjectUnderscoretype :: Text -- ^ The event relates to an push notification.
  , pushOpenedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , pushOpenedMetric :: Text -- ^ A device opened a push notification.
  , pushOpenedData :: PushOpenedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PushOpened where
  parseJSON = genericParseJSON optionsPushOpened
instance ToJSON PushOpened where
  toJSON = genericToJSON optionsPushOpened

optionsPushOpened :: Options
optionsPushOpened =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("pushOpenedEventUnderscoreid", "event_id")
      , ("pushOpenedObjectUnderscoretype", "object_type")
      , ("pushOpenedTimestamp", "timestamp")
      , ("pushOpenedMetric", "metric")
      , ("pushOpenedData", "data")
      ]


-- | 
data PushOpenedAllOfData = PushOpenedAllOfData
  { pushOpenedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , pushOpenedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , pushOpenedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , pushOpenedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , pushOpenedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , pushOpenedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , pushOpenedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , pushOpenedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , pushOpenedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , pushOpenedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , pushOpenedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , pushOpenedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , pushOpenedAllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , pushOpenedAllOfDataRecipients :: [Opened1AllOfDataAllOfRecipientsInner] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PushOpenedAllOfData where
  parseJSON = genericParseJSON optionsPushOpenedAllOfData
instance ToJSON PushOpenedAllOfData where
  toJSON = genericToJSON optionsPushOpenedAllOfData

optionsPushOpenedAllOfData :: Options
optionsPushOpenedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("pushOpenedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("pushOpenedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("pushOpenedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("pushOpenedAllOfDataActionUnderscoreid", "action_id")
      , ("pushOpenedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("pushOpenedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("pushOpenedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("pushOpenedAllOfDataIdentifiers", "identifiers")
      , ("pushOpenedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("pushOpenedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("pushOpenedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("pushOpenedAllOfDataContentUnderscoreid", "content_id")
      , ("pushOpenedAllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("pushOpenedAllOfDataRecipients", "recipients")
      ]


-- | 
data PushSent = PushSent
  { pushSentEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , pushSentObjectUnderscoretype :: Text -- ^ The event relates to an push notification.
  , pushSentTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , pushSentMetric :: Text -- ^ A push notification was sent to a recipient. If you enabled the *Body Content* option with your webhook, the payload includes the `content` of your message.
  , pushSentData :: PushSentAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PushSent where
  parseJSON = genericParseJSON optionsPushSent
instance ToJSON PushSent where
  toJSON = genericToJSON optionsPushSent

optionsPushSent :: Options
optionsPushSent =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("pushSentEventUnderscoreid", "event_id")
      , ("pushSentObjectUnderscoretype", "object_type")
      , ("pushSentTimestamp", "timestamp")
      , ("pushSentMetric", "metric")
      , ("pushSentData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data PushSentAllOfData = PushSentAllOfData
  { pushSentAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , pushSentAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , pushSentAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , pushSentAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , pushSentAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , pushSentAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , pushSentAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , pushSentAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , pushSentAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , pushSentAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , pushSentAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , pushSentAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , pushSentAllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , pushSentAllOfDataContent :: Maybe Text -- ^ The stringified payload for your push notification. This key only appears if you enabled the *Body Content* option when setting up your webhook.
  , pushSentAllOfDataRecipients :: [Sent1AllOfDataAllOfRecipientsInner] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PushSentAllOfData where
  parseJSON = genericParseJSON optionsPushSentAllOfData
instance ToJSON PushSentAllOfData where
  toJSON = genericToJSON optionsPushSentAllOfData

optionsPushSentAllOfData :: Options
optionsPushSentAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("pushSentAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("pushSentAllOfDataCustomerUnderscoreid", "customer_id")
      , ("pushSentAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("pushSentAllOfDataActionUnderscoreid", "action_id")
      , ("pushSentAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("pushSentAllOfDataJourneyUnderscoreid", "journey_id")
      , ("pushSentAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("pushSentAllOfDataIdentifiers", "identifiers")
      , ("pushSentAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("pushSentAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("pushSentAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("pushSentAllOfDataContentUnderscoreid", "content_id")
      , ("pushSentAllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("pushSentAllOfDataContent", "content")
      , ("pushSentAllOfDataRecipients", "recipients")
      ]


-- | 
data PushUndeliverable = PushUndeliverable
  { pushUndeliverableEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , pushUndeliverableObjectUnderscoretype :: Text -- ^ The event relates to an push notification.
  , pushUndeliverableTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , pushUndeliverableMetric :: Text -- ^ A message was undeliverable. Undeliverable messages are messages that have either hit a message limit, come from a newsletter that was cancelled or deleted, or an environment that has delivery disabled (which is something you might do if you’re testing an integration). If you’re not using message limits, you probably won’t see this event.
  , pushUndeliverableData :: PushUndeliverableAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PushUndeliverable where
  parseJSON = genericParseJSON optionsPushUndeliverable
instance ToJSON PushUndeliverable where
  toJSON = genericToJSON optionsPushUndeliverable

optionsPushUndeliverable :: Options
optionsPushUndeliverable =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("pushUndeliverableEventUnderscoreid", "event_id")
      , ("pushUndeliverableObjectUnderscoretype", "object_type")
      , ("pushUndeliverableTimestamp", "timestamp")
      , ("pushUndeliverableMetric", "metric")
      , ("pushUndeliverableData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data PushUndeliverableAllOfData = PushUndeliverableAllOfData
  { pushUndeliverableAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , pushUndeliverableAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , pushUndeliverableAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , pushUndeliverableAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , pushUndeliverableAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , pushUndeliverableAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , pushUndeliverableAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , pushUndeliverableAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , pushUndeliverableAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , pushUndeliverableAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , pushUndeliverableAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , pushUndeliverableAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , pushUndeliverableAllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , pushUndeliverableAllOfDataFailureUnderscoremessage :: Text -- ^ Indicates the reason that an attempted message failed.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON PushUndeliverableAllOfData where
  parseJSON = genericParseJSON optionsPushUndeliverableAllOfData
instance ToJSON PushUndeliverableAllOfData where
  toJSON = genericToJSON optionsPushUndeliverableAllOfData

optionsPushUndeliverableAllOfData :: Options
optionsPushUndeliverableAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("pushUndeliverableAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("pushUndeliverableAllOfDataCustomerUnderscoreid", "customer_id")
      , ("pushUndeliverableAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("pushUndeliverableAllOfDataActionUnderscoreid", "action_id")
      , ("pushUndeliverableAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("pushUndeliverableAllOfDataJourneyUnderscoreid", "journey_id")
      , ("pushUndeliverableAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("pushUndeliverableAllOfDataIdentifiers", "identifiers")
      , ("pushUndeliverableAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("pushUndeliverableAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("pushUndeliverableAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("pushUndeliverableAllOfDataContentUnderscoreid", "content_id")
      , ("pushUndeliverableAllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("pushUndeliverableAllOfDataFailureUnderscoremessage", "failure_message")
      ]


-- | Contains your import parameters.
data Relationship = Relationship
  { relationshipName :: Text -- ^ A friendly name for your import. This helps you identify your import.
  , relationshipDataUnderscorefileUnderscoreurl :: Text -- ^ The URL or path to the CSV file you want to import.
  , relationshipType :: Text -- ^ The type of import.
  , relationshipIdentifier :: Text -- ^ The type of identifier you want to use to identify people in your sheet—`id` or `email`. At least one column in the CSV must contain an identifier.
  , relationshipDataUnderscoretoUnderscoreprocess :: Maybe Text -- ^ Determines whether your import operation performs `all` add/update operations, only adds items (`only_new`), or only updates existing items (`only_existing`). Defaults to `all`. If `import_type` is `event`, you can only use `all` or `only_existing`.   This field was previously called `people_to_process` - we still support it but will deprecate it soon. 
  , relationshipDescription :: Maybe Text -- ^ A helpful description that can help you find and recognize your import operation.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Relationship where
  parseJSON = genericParseJSON optionsRelationship
instance ToJSON Relationship where
  toJSON = genericToJSON optionsRelationship

optionsRelationship :: Options
optionsRelationship =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("relationshipName", "name")
      , ("relationshipDataUnderscorefileUnderscoreurl", "data_file_url")
      , ("relationshipType", "type")
      , ("relationshipIdentifier", "identifier")
      , ("relationshipDataUnderscoretoUnderscoreprocess", "data_to_process")
      , ("relationshipDescription", "description")
      ]


-- | Defines the people who will start a journey in your campaign.
data RelationshipAudience = RelationshipAudience
  { relationshipAudienceType :: Maybe Int -- ^ The type of audience selected. \"Person added to object\" is `0`. \"Every person in the object\" is `1`. \"Certain people in the object\" is also `1`. \"Certain people\" will always have one or more audience filters (see below). \"Every person\" will never have an audience filter.
  , relationshipAudiencePersonUnderscorefilters :: Maybe Value -- ^ Returns the profile attributes you filtered the audience by, if any. Only applies to `type 1`, \"Certain people in the object\".
  , relationshipAudienceRelationshipUnderscorefilters :: Maybe Value -- ^ Returns the relationship attributes you filtered the audience by, if any. Only applies to `type 1`, \"Certain people in the object\".
  } deriving (Show, Eq, Generic, Data)

instance FromJSON RelationshipAudience where
  parseJSON = genericParseJSON optionsRelationshipAudience
instance ToJSON RelationshipAudience where
  toJSON = genericToJSON optionsRelationshipAudience

optionsRelationshipAudience :: Options
optionsRelationshipAudience =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("relationshipAudienceType", "type")
      , ("relationshipAudiencePersonUnderscorefilters", "person_filters")
      , ("relationshipAudienceRelationshipUnderscorefilters", "relationship_filters")
      ]


-- | 
data ReportingWebhook = ReportingWebhook
  { reportingWebhookMetric :: Text -- ^ A webhook/message was undeliverable. Undeliverable messages are messages that have either hit a message limit, come from a newsletter that was cancelled or deleted, or an environment that has delivery disabled (which is something you might do if you’re testing an integration). If you’re not using message limits, you probably won’t see this event.
  , reportingWebhookEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , reportingWebhookObjectUnderscoretype :: Text -- ^ The event relates to a webhook.
  , reportingWebhookTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , reportingWebhookData :: Attempted2AllOfData -- ^ 
  , reportingWebhookDeliveryUnderscoretype :: Maybe Text -- ^ The type of delivery that resulted in a change to preferences.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON ReportingWebhook where
  parseJSON = genericParseJSON optionsReportingWebhook
instance ToJSON ReportingWebhook where
  toJSON = genericToJSON optionsReportingWebhook

optionsReportingWebhook :: Options
optionsReportingWebhook =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("reportingWebhookMetric", "metric")
      , ("reportingWebhookEventUnderscoreid", "event_id")
      , ("reportingWebhookObjectUnderscoretype", "object_type")
      , ("reportingWebhookTimestamp", "timestamp")
      , ("reportingWebhookData", "data")
      , ("reportingWebhookDeliveryUnderscoretype", "delivery_type")
      ]


-- | The method used in conjunction with a webhook &#x60;url&#x60;.
data RequestMethod = RequestMethod
  { 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON RequestMethod where
  parseJSON = genericParseJSON optionsRequestMethod
instance ToJSON RequestMethod where
  toJSON = genericToJSON optionsRequestMethod

optionsRequestMethod :: Options
optionsRequestMethod =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ 
      ]


-- | 
data SDKIntegration = SDKIntegration
  { sDKIntegrationMessage :: SDKIntegrationMessage -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SDKIntegration where
  parseJSON = genericParseJSON optionsSDKIntegration
instance ToJSON SDKIntegration where
  toJSON = genericToJSON optionsSDKIntegration

optionsSDKIntegration :: Options
optionsSDKIntegration =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sDKIntegrationMessage", "message")
      ]


-- | 
data SDKIntegrationMessage = SDKIntegrationMessage
  { sDKIntegrationMessageMessage :: FcmAndroidWithSdkMessage -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SDKIntegrationMessage where
  parseJSON = genericParseJSON optionsSDKIntegrationMessage
instance ToJSON SDKIntegrationMessage where
  toJSON = genericToJSON optionsSDKIntegrationMessage

optionsSDKIntegrationMessage :: Options
optionsSDKIntegrationMessage =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sDKIntegrationMessageMessage", "message")
      ]


-- | Events pertaining to SMS notifications.
data SMS = SMS
  { sMSEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , sMSObjectUnderscoretype :: Text -- ^ The event relates to an SMS message.
  , sMSTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , sMSMetric :: Text -- ^ An SMS couldn't be sent to the delivery provider.
  , sMSData :: Attempted2AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SMS where
  parseJSON = genericParseJSON optionsSMS
instance ToJSON SMS where
  toJSON = genericToJSON optionsSMS

optionsSMS :: Options
optionsSMS =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sMSEventUnderscoreid", "event_id")
      , ("sMSObjectUnderscoretype", "object_type")
      , ("sMSTimestamp", "timestamp")
      , ("sMSMetric", "metric")
      , ("sMSData", "data")
      ]


-- | 
data SMSMMS = SMSMMS
  { sMSMMSId :: Maybe Int -- ^ The identifier for an action.
  , sMSMMSCampaignUnderscoreid :: Maybe Int -- ^ The identifier for a campaign.
  , sMSMMSParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , sMSMMSDeduplicateUnderscoreid :: Maybe Text -- ^ An identifier in the format `id:timestamp` where the id is the id of the object you are working with (Campaigns, Deliveries, Exports, Identities, Newsletters, Segments, and Templates), and the timestamp is the last time the object was updated.
  , sMSMMSName :: Maybe Text -- ^ The name of the action.
  , sMSMMSLayout :: Maybe Text -- ^ The layout used for the action, if it exists.
  , sMSMMSCreated :: Maybe Int -- ^ The date time when the referenced ID was created.
  , sMSMMSUpdated :: Maybe Int -- ^ The date time when the referenced ID was last updated.
  , sMSMMSBody :: Maybe Text -- ^ The body of your SMS message.
  , sMSMMSLanguage :: Maybe Text -- ^ The language variant for your message. If you don't use our [localization feature](/localization), or this is the default message, this value is an empty string.
  , sMSMMSType :: Maybe Text -- ^ For SMS/MMS messages, the `type` is always `twilio`.
  , sMSMMSImageUnderscoreurl :: Maybe Text -- ^ The URL of the image in your SMS (MMS) message.
  , sMSMMSSendingUnderscorestate :: Maybe Text -- ^ Determines the sending behavior for the action. `automatic` sends the action automatically when triggered; `draft` queues drafts when the action is triggered; or `off` to disable the action.
  , sMSMMSRecipient :: Maybe Text -- ^ The recipient value. In general, your recipient is an attribute that you reference using liquid, like `{{customer.phone}}`, instead of a hard-coded value. If you set this field to a liquid statement like `{{customer.phone}}`, the field returns blank in `GET` requests because we populate the recipient from your liquid statement at send time.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SMSMMS where
  parseJSON = genericParseJSON optionsSMSMMS
instance ToJSON SMSMMS where
  toJSON = genericToJSON optionsSMSMMS

optionsSMSMMS :: Options
optionsSMSMMS =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sMSMMSId", "id")
      , ("sMSMMSCampaignUnderscoreid", "campaign_id")
      , ("sMSMMSParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("sMSMMSDeduplicateUnderscoreid", "deduplicate_id")
      , ("sMSMMSName", "name")
      , ("sMSMMSLayout", "layout")
      , ("sMSMMSCreated", "created")
      , ("sMSMMSUpdated", "updated")
      , ("sMSMMSBody", "body")
      , ("sMSMMSLanguage", "language")
      , ("sMSMMSType", "type")
      , ("sMSMMSImageUnderscoreurl", "image_url")
      , ("sMSMMSSendingUnderscorestate", "sending_state")
      , ("sMSMMSRecipient", "recipient")
      ]


-- | 
data Segment = Segment
  { segmentId :: Maybe Int -- ^ The identifier for a campaign.
  , segmentDeduplicateUnderscoreid :: Maybe Text -- ^ An identifier in the format `id:timestamp` where the id is the id of the object you are working with (Campaigns, Deliveries, Exports, Identities, Newsletters, Segments, and Templates), and the timestamp is the last time the object was updated.
  , segmentName :: Maybe Text -- ^ The name of the campaign.
  , segmentType :: Maybe Text -- ^ The type of campaign trigger. **Sunsetting on March 30, 2025**
  , segmentCreated :: Maybe Int -- ^ The date time when the referenced ID was created.
  , segmentUpdated :: Maybe Int -- ^ The date time when the referenced ID was last updated.
  , segmentActive :: Maybe Bool -- ^ If true, the campaign is active and can still send messages.
  , segmentState :: Maybe Text -- ^ The status of the campaign.
  , segmentActions :: Maybe [SegmentActionsInner] -- ^ An array of actions contained within the campaign.
  , segmentFirstUnderscorestarted :: Maybe Int -- ^ The date and time when you first started the campaign and it first became eligible to be triggered.
  , segmentTags :: Maybe [Text] -- ^ An array of tags you set on this campaign.
  , segmentTriggerUnderscoresegmentUnderscoreids :: Maybe [Int] -- ^ A list of segments used in the campaign trigger, returned if the campaign trigger included one or more segment conditions.
  , segmentFilterUnderscoresegmentUnderscoreids :: Maybe [Int] -- ^ A list of segments used in the campaign filter, returned if the campaign audience was filtered on one or more segments.
  , segmentMsgUnderscoretemplates :: Maybe [SegmentMsgTemplatesInner] -- ^ Indicates the message templates used in this campaign.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Segment where
  parseJSON = genericParseJSON optionsSegment
instance ToJSON Segment where
  toJSON = genericToJSON optionsSegment

optionsSegment :: Options
optionsSegment =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("segmentId", "id")
      , ("segmentDeduplicateUnderscoreid", "deduplicate_id")
      , ("segmentName", "name")
      , ("segmentType", "type")
      , ("segmentCreated", "created")
      , ("segmentUpdated", "updated")
      , ("segmentActive", "active")
      , ("segmentState", "state")
      , ("segmentActions", "actions")
      , ("segmentFirstUnderscorestarted", "first_started")
      , ("segmentTags", "tags")
      , ("segmentTriggerUnderscoresegmentUnderscoreids", "trigger_segment_ids")
      , ("segmentFilterUnderscoresegmentUnderscoreids", "filter_segment_ids")
      , ("segmentMsgUnderscoretemplates", "msg_templates")
      ]


-- | 
data Segment1 = Segment1
  { segment1Segment :: Maybe Segment -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Segment1 where
  parseJSON = genericParseJSON optionsSegment1
instance ToJSON Segment1 where
  toJSON = genericToJSON optionsSegment1

optionsSegment1 :: Options
optionsSegment1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("segment1Segment", "segment")
      ]


-- | 
data SegmentActionsInner = SegmentActionsInner
  { segmentActionsInnerType :: Maybe Text -- ^ The action type.
  , segmentActionsInnerId :: Maybe Int -- ^ The identifier for the action.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SegmentActionsInner where
  parseJSON = genericParseJSON optionsSegmentActionsInner
instance ToJSON SegmentActionsInner where
  toJSON = genericToJSON optionsSegmentActionsInner

optionsSegmentActionsInner :: Options
optionsSegmentActionsInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("segmentActionsInnerType", "type")
      , ("segmentActionsInnerId", "id")
      ]


-- | Provide the &#x60;id&#x60; of a segment containing people you want to search for.
data SegmentAudienceFilter = SegmentAudienceFilter
  { segmentAudienceFilterId :: Maybe Int -- ^ The ID of the segment you want to return people from.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SegmentAudienceFilter where
  parseJSON = genericParseJSON optionsSegmentAudienceFilter
instance ToJSON SegmentAudienceFilter where
  toJSON = genericToJSON optionsSegmentAudienceFilter

optionsSegmentAudienceFilter :: Options
optionsSegmentAudienceFilter =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("segmentAudienceFilterId", "id")
      ]


-- | 
data SegmentMsgTemplatesInner = SegmentMsgTemplatesInner
  { segmentMsgTemplatesInnerType :: Maybe Text -- ^ The message type the template represents.
  , segmentMsgTemplatesInnerId :: Maybe Int -- ^ The identifier for the template.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SegmentMsgTemplatesInner where
  parseJSON = genericParseJSON optionsSegmentMsgTemplatesInner
instance ToJSON SegmentMsgTemplatesInner where
  toJSON = genericToJSON optionsSegmentMsgTemplatesInner

optionsSegmentMsgTemplatesInner :: Options
optionsSegmentMsgTemplatesInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("segmentMsgTemplatesInnerType", "type")
      , ("segmentMsgTemplatesInnerId", "id")
      ]


-- | 
data SegmentResponseObject = SegmentResponseObject
  { segmentResponseObjectId :: Maybe Int -- ^ The identifier for a segment.
  , segmentResponseObjectDeduplicateUnderscoreid :: Maybe Text -- ^ An identifier in the format `id:timestamp` where the id is the id of the object you are working with (Campaigns, Deliveries, Exports, Identities, Newsletters, Segments, and Templates), and the timestamp is the last time the object was updated.
  , segmentResponseObjectName :: Maybe Text -- ^ The name of the segment.
  , segmentResponseObjectDescription :: Maybe Text -- ^ A description for the segment. This can help you understand the purpose of the segment when you encounter it in other requests or in the UI.
  , segmentResponseObjectState :: Maybe Text -- ^ The state of the segment.  `events` - currently handling event conditions for this segment  `build` - currently handling profile attribute conditions for this segment  `events_queued` - waiting for a process to start handling event conditions for this segment  `build_queued` - waiting for a process to start handling profile attribute conditions for this segment  `finished` - the segment is finished building 
  , segmentResponseObjectProgress :: Maybe Int -- ^ If Customer.io has not finished processing the segment, this indicates the percentage complete. Otherwise, this key is null.
  , segmentResponseObjectType :: Maybe Text -- ^ The type of segment.
  , segmentResponseObjectTags :: Maybe [Text] -- ^ The tags assigned to the segment, if any. Tags may help you sort through your segments.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SegmentResponseObject where
  parseJSON = genericParseJSON optionsSegmentResponseObject
instance ToJSON SegmentResponseObject where
  toJSON = genericToJSON optionsSegmentResponseObject

optionsSegmentResponseObject :: Options
optionsSegmentResponseObject =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("segmentResponseObjectId", "id")
      , ("segmentResponseObjectDeduplicateUnderscoreid", "deduplicate_id")
      , ("segmentResponseObjectName", "name")
      , ("segmentResponseObjectDescription", "description")
      , ("segmentResponseObjectState", "state")
      , ("segmentResponseObjectProgress", "progress")
      , ("segmentResponseObjectType", "type")
      , ("segmentResponseObjectTags", "tags")
      ]


-- | 
data SendEmail200Response = SendEmail200Response
  { sendEmail200ResponseDeliveryUnderscoreid :: Maybe Text -- ^ A unique identifier for the message.
  , sendEmail200ResponseQueuedUnderscoreat :: Maybe Int -- ^ The date-time when the message is sent.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SendEmail200Response where
  parseJSON = genericParseJSON optionsSendEmail200Response
instance ToJSON SendEmail200Response where
  toJSON = genericToJSON optionsSendEmail200Response

optionsSendEmail200Response :: Options
optionsSendEmail200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sendEmail200ResponseDeliveryUnderscoreid", "delivery_id")
      , ("sendEmail200ResponseQueuedUnderscoreat", "queued_at")
      ]


-- | 
data SendEmail400Response = SendEmail400Response
  { sendEmail400ResponseMeta :: Maybe SendEmail400ResponseMeta -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SendEmail400Response where
  parseJSON = genericParseJSON optionsSendEmail400Response
instance ToJSON SendEmail400Response where
  toJSON = genericToJSON optionsSendEmail400Response

optionsSendEmail400Response :: Options
optionsSendEmail400Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sendEmail400ResponseMeta", "meta")
      ]


-- | Contains errors.
data SendEmail400ResponseMeta = SendEmail400ResponseMeta
  { sendEmail400ResponseMetaError :: Maybe Text -- ^ Describes the error that caused your request to fail.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SendEmail400ResponseMeta where
  parseJSON = genericParseJSON optionsSendEmail400ResponseMeta
instance ToJSON SendEmail400ResponseMeta where
  toJSON = genericToJSON optionsSendEmail400ResponseMeta

optionsSendEmail400ResponseMeta :: Options
optionsSendEmail400ResponseMeta =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sendEmail400ResponseMetaError", "error")
      ]


-- | 
data SendEmail403Response = SendEmail403Response
  { sendEmail403ResponseMeta :: Maybe SendEmail403ResponseMeta -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SendEmail403Response where
  parseJSON = genericParseJSON optionsSendEmail403Response
instance ToJSON SendEmail403Response where
  toJSON = genericToJSON optionsSendEmail403Response

optionsSendEmail403Response :: Options
optionsSendEmail403Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sendEmail403ResponseMeta", "meta")
      ]


-- | 
data SendEmail403ResponseMeta = SendEmail403ResponseMeta
  { sendEmail403ResponseMetaError :: Maybe Text -- ^ Describes the error that caused your request to fail.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SendEmail403ResponseMeta where
  parseJSON = genericParseJSON optionsSendEmail403ResponseMeta
instance ToJSON SendEmail403ResponseMeta where
  toJSON = genericToJSON optionsSendEmail403ResponseMeta

optionsSendEmail403ResponseMeta :: Options
optionsSendEmail403ResponseMeta =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sendEmail403ResponseMetaError", "error")
      ]


-- | 
data SendEmail413Response = SendEmail413Response
  { sendEmail413ResponseMeta :: Maybe SendEmail413ResponseMeta -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SendEmail413Response where
  parseJSON = genericParseJSON optionsSendEmail413Response
instance ToJSON SendEmail413Response where
  toJSON = genericToJSON optionsSendEmail413Response

optionsSendEmail413Response :: Options
optionsSendEmail413Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sendEmail413ResponseMeta", "meta")
      ]


-- | 
data SendEmail413ResponseMeta = SendEmail413ResponseMeta
  { sendEmail413ResponseMetaError :: Maybe Text -- ^ Describes the error that caused your request to fail.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SendEmail413ResponseMeta where
  parseJSON = genericParseJSON optionsSendEmail413ResponseMeta
instance ToJSON SendEmail413ResponseMeta where
  toJSON = genericToJSON optionsSendEmail413ResponseMeta

optionsSendEmail413ResponseMeta :: Options
optionsSendEmail413ResponseMeta =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sendEmail413ResponseMetaError", "error")
      ]


-- | The payload of a transactional message.
data SendEmailRequest = SendEmailRequest
  { sendEmailRequestTransactionalUnderscoremessageUnderscoreid :: WithTemplateAllOfTransactionalMessageId -- ^ 
  , sendEmailRequestBody :: Text -- ^ The body of your message.
  , sendEmailRequestBodyUnderscoreamp :: Maybe Text -- ^ If your message is an email, this is the AMP-enabled body of your message. If your recipient's email client doesn't support AMP, the `body` represents your fallback message.
  , sendEmailRequestBodyUnderscoreplain :: Maybe Text -- ^ By default, we generate a plaintext version of your message body for each delivery. Use this key to override the default plain text body.
  , sendEmailRequestSubject :: Text -- ^ The subject line for your message.
  , sendEmailRequestFrom :: Text -- ^ The address that your email is from. This address must be verified by Customer.io. You can include a display/friendly name in your from address in the format `Person <person@example.com>`.
  , sendEmailRequestLanguage :: Maybe Text -- ^ Overrides language preferences for the person you want to send your transactional message to. Use one of our [supported two- or four-letter language codes](/localization-getting-started/#supported-languages).
  , sendEmailRequestIdentifiers :: WithTemplateAllOfIdentifiers -- ^ 
  , sendEmailRequestMessageUnderscoredata :: Maybe (Map.Map String Value) -- ^ An object containing the key-value pairs referenced using liquid in your message.
  , sendEmailRequestSendUnderscoreat :: Maybe Int -- ^ A unix timestamp (seconds since epoch) determining when the message will be sent. The timestamp can be up to 90 days in the future. If this value is in the past, your message is sent immediately.
  , sendEmailRequestDisableUnderscoremessageUnderscoreretention :: Maybe Bool -- ^ If true, the message body is not retained in delivery history. Setting this value overrides the value set in the settings of your `transactional_message_id`.
  , sendEmailRequestSendUnderscoretoUnderscoreunsubscribed :: Maybe Bool -- ^ If false, your message is not sent to unsubscribed recipients. Setting this value overrides the value set in the settings of your `transactional_message_id`.
  , sendEmailRequestQueueUnderscoredraft :: Maybe Bool -- ^ If true, your transactional message is held as a draft in Customer.io and not sent directly to your audience. You must go to the Deliveries and Drafts page to send your message.
  , sendEmailRequestTo :: Text -- ^ The message recipient(s). Supports multiple addresses separated by commas. Your request can contain up to 15 total recipients between the `to` and `bcc` keys.  You can include a display or \"friendly\" name in \"to\" address, but we recommend that you use quotation marks around the friendly name to avoid potential issues with special characters, e.g. `\\\"Person\\\" <person@example.com>`.             
  , sendEmailRequestBcc :: Maybe Text -- ^ Blind copy message recipients. Supports multiple addresses separated by commas. Your request can contain up to 15 total recipients between the `to` and `bcc` keys.
  , sendEmailRequestFakeUnderscorebcc :: Maybe Bool -- ^ If true, rather than sending true copies to BCC addresses, Customer.io sends a copy of the message with the subject line containing the recipient address(es). 
  , sendEmailRequestReplyUnderscoreto :: Maybe Text -- ^ The address that recipients can reply to, if different from the `from` address.
  , sendEmailRequestPreheader :: Maybe Text -- ^ Also known as \"preview text\", this is the block block of text that users see next to, or underneath, the subject line in their inbox.
  , sendEmailRequestAttachments :: Maybe WithTemplateAllOfAttachments -- ^ 
  , sendEmailRequestHeaders :: Maybe (Map.Map String Text) -- ^ An object containing headers, where the key is the header name and the value is the header value. Header names and values must be strings and cannot contain any non-ASCII characters or empty spaces. Some headers are reserved and cannot be overwritten.
  , sendEmailRequestDisableUnderscorecssUnderscorepreprocessing :: Maybe Bool -- ^ Set to `true` to disable CSS preprocessing. This setting overrides the CSS preprocessing setting on the `transactional_message_id` as set in the user interface. Transactional emails have CSS preprocessing enabled by default.
  , sendEmailRequestTracked :: Maybe Bool -- ^ If true, Customer.io tracks opens and link clicks in your message.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SendEmailRequest where
  parseJSON = genericParseJSON optionsSendEmailRequest
instance ToJSON SendEmailRequest where
  toJSON = genericToJSON optionsSendEmailRequest

optionsSendEmailRequest :: Options
optionsSendEmailRequest =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sendEmailRequestTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("sendEmailRequestBody", "body")
      , ("sendEmailRequestBodyUnderscoreamp", "body_amp")
      , ("sendEmailRequestBodyUnderscoreplain", "body_plain")
      , ("sendEmailRequestSubject", "subject")
      , ("sendEmailRequestFrom", "from")
      , ("sendEmailRequestLanguage", "language")
      , ("sendEmailRequestIdentifiers", "identifiers")
      , ("sendEmailRequestMessageUnderscoredata", "message_data")
      , ("sendEmailRequestSendUnderscoreat", "send_at")
      , ("sendEmailRequestDisableUnderscoremessageUnderscoreretention", "disable_message_retention")
      , ("sendEmailRequestSendUnderscoretoUnderscoreunsubscribed", "send_to_unsubscribed")
      , ("sendEmailRequestQueueUnderscoredraft", "queue_draft")
      , ("sendEmailRequestTo", "to")
      , ("sendEmailRequestBcc", "bcc")
      , ("sendEmailRequestFakeUnderscorebcc", "fake_bcc")
      , ("sendEmailRequestReplyUnderscoreto", "reply_to")
      , ("sendEmailRequestPreheader", "preheader")
      , ("sendEmailRequestAttachments", "attachments")
      , ("sendEmailRequestHeaders", "headers")
      , ("sendEmailRequestDisableUnderscorecssUnderscorepreprocessing", "disable_css_preprocessing")
      , ("sendEmailRequestTracked", "tracked")
      ]


-- | 
data SendPush400Response = SendPush400Response
  { sendPush400ResponseMeta :: Maybe SendPush400ResponseMeta -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SendPush400Response where
  parseJSON = genericParseJSON optionsSendPush400Response
instance ToJSON SendPush400Response where
  toJSON = genericToJSON optionsSendPush400Response

optionsSendPush400Response :: Options
optionsSendPush400Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sendPush400ResponseMeta", "meta")
      ]


-- | Contains errors.
data SendPush400ResponseMeta = SendPush400ResponseMeta
  { sendPush400ResponseMetaError :: Maybe Text -- ^ Describes the error that caused your request to fail.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SendPush400ResponseMeta where
  parseJSON = genericParseJSON optionsSendPush400ResponseMeta
instance ToJSON SendPush400ResponseMeta where
  toJSON = genericToJSON optionsSendPush400ResponseMeta

optionsSendPush400ResponseMeta :: Options
optionsSendPush400ResponseMeta =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sendPush400ResponseMetaError", "error")
      ]


-- | The payload of a transactional push message.
data SendPushRequest = SendPushRequest
  { sendPushRequestTransactionalUnderscoremessageUnderscoreid :: WithTemplateAllOfTransactionalMessageId -- ^ 
  , sendPushRequestTo :: Text -- ^ The person's device(s) you want to send this push to. One of `all`, `last_used`, or a custom device token which belongs to the profile from the Identifiers block. Defaults to 'all'. This overrides To from the transactional template (referenced by `transactional_message_id`).
  , sendPushRequestTitle :: Maybe Text -- ^ The title for your notification. This overrides the title of the transactional template (referenced by `transactional_message_id`).
  , sendPushRequestMessage :: Maybe Text -- ^ The message body for your notification. This overrides the notification body of the transactional template (referenced by `transactional_message_id`).
  , sendPushRequestImageUnderscoreurl :: Maybe Text -- ^ An image URL to show in the push. This overrides Image from the transactional template (referenced by `transactional_message_id`).
  , sendPushRequestLink :: Maybe Text -- ^ A deep link to open when the push is tapped. This overrides Link from the transactional template (referenced by `transactional_message_id`).
  , sendPushRequestSound :: Maybe Text -- ^ **For iOS Only**: your notification can alert users with the device's default notification sound or play no sound at all.  
  , sendPushRequestCustomUnderscoredata :: Maybe Value -- ^ An optional list of key/value pairs to attach to the push payload. Due to a Firebase limitation we only support sending string key value pairs. This overrides Custom Data from the transactional template (referenced by `transactional_message_id`).
  , sendPushRequestCustomUnderscoredevice :: Maybe SendPushRequestAllOfCustomDevice -- ^ 
  , sendPushRequestCustomUnderscorepayload :: Maybe SendPushRequestAllOfCustomPayload -- ^ 
  , sendPushRequestLanguage :: Maybe Text -- ^ Overrides language preferences for the person you want to send your transactional message to. Use one of our [supported two- or four-letter language codes](/localization-getting-started/#supported-languages).
  , sendPushRequestIdentifiers :: WithTemplateAllOfIdentifiers -- ^ 
  , sendPushRequestMessageUnderscoredata :: Maybe (Map.Map String Value) -- ^ An object containing the key-value pairs referenced using liquid in your message.
  , sendPushRequestSendUnderscoreat :: Maybe Int -- ^ A unix timestamp (seconds since epoch) determining when the message will be sent. The timestamp can be up to 90 days in the future. If this value is in the past, your message is sent immediately.
  , sendPushRequestDisableUnderscoremessageUnderscoreretention :: Maybe Bool -- ^ If true, the message body is not retained in delivery history. Setting this value overrides the value set in the settings of your `transactional_message_id`.
  , sendPushRequestSendUnderscoretoUnderscoreunsubscribed :: Maybe Bool -- ^ If false, your message is not sent to unsubscribed recipients. Setting this value overrides the value set in the settings of your `transactional_message_id`.
  , sendPushRequestQueueUnderscoredraft :: Maybe Bool -- ^ If true, your transactional message is held as a draft in Customer.io and not sent directly to your audience. You must go to the Deliveries and Drafts page to send your message.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SendPushRequest where
  parseJSON = genericParseJSON optionsSendPushRequest
instance ToJSON SendPushRequest where
  toJSON = genericToJSON optionsSendPushRequest

optionsSendPushRequest :: Options
optionsSendPushRequest =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sendPushRequestTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("sendPushRequestTo", "to")
      , ("sendPushRequestTitle", "title")
      , ("sendPushRequestMessage", "message")
      , ("sendPushRequestImageUnderscoreurl", "image_url")
      , ("sendPushRequestLink", "link")
      , ("sendPushRequestSound", "sound")
      , ("sendPushRequestCustomUnderscoredata", "custom_data")
      , ("sendPushRequestCustomUnderscoredevice", "custom_device")
      , ("sendPushRequestCustomUnderscorepayload", "custom_payload")
      , ("sendPushRequestLanguage", "language")
      , ("sendPushRequestIdentifiers", "identifiers")
      , ("sendPushRequestMessageUnderscoredata", "message_data")
      , ("sendPushRequestSendUnderscoreat", "send_at")
      , ("sendPushRequestDisableUnderscoremessageUnderscoreretention", "disable_message_retention")
      , ("sendPushRequestSendUnderscoretoUnderscoreunsubscribed", "send_to_unsubscribed")
      , ("sendPushRequestQueueUnderscoredraft", "queue_draft")
      ]


-- | A device to perform an upsert operation at the time of send. The device will be added/updated on the profile from the Identifiers block.
data SendPushRequestAllOfCustomDevice = SendPushRequestAllOfCustomDevice
  { sendPushRequestAllOfCustomDeviceToken :: Text -- ^ The device token.
  , sendPushRequestAllOfCustomDeviceLastUnderscoreused :: Maybe Int -- ^ The `timestamp` when you last identified this device. If you don't pass a timestamp when you add or update a device, we use the time of the request itself. Our SDKs identify a device when a person launches their app.
  , sendPushRequestAllOfCustomDevicePlatform :: Text -- ^ The device/messaging platform.
  , sendPushRequestAllOfCustomDeviceAttributes :: Maybe SendPushRequestAllOfCustomDeviceAllOfAttributes -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SendPushRequestAllOfCustomDevice where
  parseJSON = genericParseJSON optionsSendPushRequestAllOfCustomDevice
instance ToJSON SendPushRequestAllOfCustomDevice where
  toJSON = genericToJSON optionsSendPushRequestAllOfCustomDevice

optionsSendPushRequestAllOfCustomDevice :: Options
optionsSendPushRequestAllOfCustomDevice =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sendPushRequestAllOfCustomDeviceToken", "token")
      , ("sendPushRequestAllOfCustomDeviceLastUnderscoreused", "last_used")
      , ("sendPushRequestAllOfCustomDevicePlatform", "platform")
      , ("sendPushRequestAllOfCustomDeviceAttributes", "attributes")
      ]


-- | Attributes that you can reference to segment your audience—like a person&#39;s attributes, but specific to a device. These can be either the attributes defined below or custom key-value attributes.
newtype SendPushRequestAllOfCustomDeviceAllOfAttributes = SendPushRequestAllOfCustomDeviceAllOfAttributes { unSendPushRequestAllOfCustomDeviceAllOfAttributes :: (Map.Map Text Text) }
  deriving (Show, Eq, FromJSON, ToJSON, Generic, Data)

-- | An optional list of key/value pairs to attach to the push payload. Due to a Firebase limitation we only support sending string key value pairs. This overrides every other parameter, including any Custom Payload from the transactional template (referenced by &#x60;transactional_message_id&#x60;).
data SendPushRequestAllOfCustomPayload = SendPushRequestAllOfCustomPayload
  { sendPushRequestAllOfCustomPayloadIos :: Maybe SendPushRequestAllOfCustomPayloadIos -- ^ 
  , sendPushRequestAllOfCustomPayloadAndroid :: Maybe SendPushRequestAllOfCustomPayloadAndroid -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SendPushRequestAllOfCustomPayload where
  parseJSON = genericParseJSON optionsSendPushRequestAllOfCustomPayload
instance ToJSON SendPushRequestAllOfCustomPayload where
  toJSON = genericToJSON optionsSendPushRequestAllOfCustomPayload

optionsSendPushRequestAllOfCustomPayload :: Options
optionsSendPushRequestAllOfCustomPayload =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sendPushRequestAllOfCustomPayloadIos", "ios")
      , ("sendPushRequestAllOfCustomPayloadAndroid", "android")
      ]


-- | A custom push payload for Android devices.
data SendPushRequestAllOfCustomPayloadAndroid = SendPushRequestAllOfCustomPayloadAndroid
  { sendPushRequestAllOfCustomPayloadAndroidMessage :: SendPushRequestAllOfCustomPayloadAndroidMessage -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SendPushRequestAllOfCustomPayloadAndroid where
  parseJSON = genericParseJSON optionsSendPushRequestAllOfCustomPayloadAndroid
instance ToJSON SendPushRequestAllOfCustomPayloadAndroid where
  toJSON = genericToJSON optionsSendPushRequestAllOfCustomPayloadAndroid

optionsSendPushRequestAllOfCustomPayloadAndroid :: Options
optionsSendPushRequestAllOfCustomPayloadAndroid =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sendPushRequestAllOfCustomPayloadAndroidMessage", "message")
      ]


-- | The parent object for Android custom push payloads.
data SendPushRequestAllOfCustomPayloadAndroidMessage = SendPushRequestAllOfCustomPayloadAndroidMessage
  { sendPushRequestAllOfCustomPayloadAndroidMessageNotification :: Maybe SendPushRequestAllOfCustomPayloadAndroidMessageNotification -- ^ 
  , sendPushRequestAllOfCustomPayloadAndroidMessageData :: Maybe (Map.Map String Text) -- ^ Contains key-value pairs that your app interprets.
  , sendPushRequestAllOfCustomPayloadAndroidMessageAndroid :: Maybe SendPushRequestAllOfCustomPayloadAndroidMessageAndroid -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SendPushRequestAllOfCustomPayloadAndroidMessage where
  parseJSON = genericParseJSON optionsSendPushRequestAllOfCustomPayloadAndroidMessage
instance ToJSON SendPushRequestAllOfCustomPayloadAndroidMessage where
  toJSON = genericToJSON optionsSendPushRequestAllOfCustomPayloadAndroidMessage

optionsSendPushRequestAllOfCustomPayloadAndroidMessage :: Options
optionsSendPushRequestAllOfCustomPayloadAndroidMessage =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sendPushRequestAllOfCustomPayloadAndroidMessageNotification", "notification")
      , ("sendPushRequestAllOfCustomPayloadAndroidMessageData", "data")
      , ("sendPushRequestAllOfCustomPayloadAndroidMessageAndroid", "android")
      ]


-- | Contains custom push options for your notification.
data SendPushRequestAllOfCustomPayloadAndroidMessageAndroid = SendPushRequestAllOfCustomPayloadAndroidMessageAndroid
  { sendPushRequestAllOfCustomPayloadAndroidMessageAndroidNotification :: Maybe SendPushRequestAllOfCustomPayloadAndroidMessageAndroidNotification -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SendPushRequestAllOfCustomPayloadAndroidMessageAndroid where
  parseJSON = genericParseJSON optionsSendPushRequestAllOfCustomPayloadAndroidMessageAndroid
instance ToJSON SendPushRequestAllOfCustomPayloadAndroidMessageAndroid where
  toJSON = genericToJSON optionsSendPushRequestAllOfCustomPayloadAndroidMessageAndroid

optionsSendPushRequestAllOfCustomPayloadAndroidMessageAndroid :: Options
optionsSendPushRequestAllOfCustomPayloadAndroidMessageAndroid =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sendPushRequestAllOfCustomPayloadAndroidMessageAndroidNotification", "notification")
      ]


-- | Properties supported specifically by Android on FCM.
data SendPushRequestAllOfCustomPayloadAndroidMessageAndroidNotification = SendPushRequestAllOfCustomPayloadAndroidMessageAndroidNotification
  { sendPushRequestAllOfCustomPayloadAndroidMessageAndroidNotificationIcon :: Maybe Text -- ^ Sets the notification icon to `myicon` for drawable resource `myicon`. If you don't send this key, FCM displays the launcher icon from your app manifest.
  , sendPushRequestAllOfCustomPayloadAndroidMessageAndroidNotificationSound :: Maybe Text -- ^ The sound that plays when the device receives the notification. Supports `\"default\"` or the filename of a sound resource bundled in your app. Sound files must reside in `/res/raw/`.
  , sendPushRequestAllOfCustomPayloadAndroidMessageAndroidNotificationTag :: Maybe Text -- ^ Identifier to replace existing notifications in the notification drawer. If empty, each request creates a new notification.  If you specify a tag, and a notification with the same tag is already being shown, the new notification replaces the existing one in the notification drawer.  
  , sendPushRequestAllOfCustomPayloadAndroidMessageAndroidNotificationColor :: Maybe Text -- ^ The notification's icon color in `#rrggbb` format.
  , sendPushRequestAllOfCustomPayloadAndroidMessageAndroidNotificationClickUnderscoreaction :: Maybe Text -- ^ The action that occurs when a user taps on the notification. Launches an activity with a matching intent filter when a person taps the notification.
  , sendPushRequestAllOfCustomPayloadAndroidMessageAndroidNotificationBodyUnderscorelocUnderscorekey :: Maybe Text -- ^ The key to the body string in the app's string resources that you want to use to localize the body text to the user's current localization. See [String Resources](https://developer.android.com/guide/topics/resources/string-resource/) for more information.
  , sendPushRequestAllOfCustomPayloadAndroidMessageAndroidNotificationBodyUnderscorelocUnderscorearg :: Maybe Text -- ^ Variable string values used in place of the format specifiers in `body_loc_key` to localize the body text to the user's current localization. See Formatting and Styling for more information.
  , sendPushRequestAllOfCustomPayloadAndroidMessageAndroidNotificationTitleUnderscorelocUnderscorekey :: Maybe Text -- ^ The key to the title string in the app's string resources that you want to use to localize the title text to the user's current localization. See [String Resources](https://developer.android.com/guide/topics/resources/string-resource/) for more information.
  , sendPushRequestAllOfCustomPayloadAndroidMessageAndroidNotificationTitleUnderscorelocUnderscorearg :: Maybe Text -- ^ Variable string values used in place of the format specifiers in `title_loc_key` to localize the title text to the user's current localization. See Formatting and Styling for more information.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SendPushRequestAllOfCustomPayloadAndroidMessageAndroidNotification where
  parseJSON = genericParseJSON optionsSendPushRequestAllOfCustomPayloadAndroidMessageAndroidNotification
instance ToJSON SendPushRequestAllOfCustomPayloadAndroidMessageAndroidNotification where
  toJSON = genericToJSON optionsSendPushRequestAllOfCustomPayloadAndroidMessageAndroidNotification

optionsSendPushRequestAllOfCustomPayloadAndroidMessageAndroidNotification :: Options
optionsSendPushRequestAllOfCustomPayloadAndroidMessageAndroidNotification =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sendPushRequestAllOfCustomPayloadAndroidMessageAndroidNotificationIcon", "icon")
      , ("sendPushRequestAllOfCustomPayloadAndroidMessageAndroidNotificationSound", "sound")
      , ("sendPushRequestAllOfCustomPayloadAndroidMessageAndroidNotificationTag", "tag")
      , ("sendPushRequestAllOfCustomPayloadAndroidMessageAndroidNotificationColor", "color")
      , ("sendPushRequestAllOfCustomPayloadAndroidMessageAndroidNotificationClickUnderscoreaction", "click_action")
      , ("sendPushRequestAllOfCustomPayloadAndroidMessageAndroidNotificationBodyUnderscorelocUnderscorekey", "body_loc_key")
      , ("sendPushRequestAllOfCustomPayloadAndroidMessageAndroidNotificationBodyUnderscorelocUnderscorearg", "body_loc_arg")
      , ("sendPushRequestAllOfCustomPayloadAndroidMessageAndroidNotificationTitleUnderscorelocUnderscorekey", "title_loc_key")
      , ("sendPushRequestAllOfCustomPayloadAndroidMessageAndroidNotificationTitleUnderscorelocUnderscorearg", "title_loc_arg")
      ]


-- | Contains the push body and title.
data SendPushRequestAllOfCustomPayloadAndroidMessageNotification = SendPushRequestAllOfCustomPayloadAndroidMessageNotification
  { sendPushRequestAllOfCustomPayloadAndroidMessageNotificationTitle :: Maybe Text -- ^ The title of your push notification.
  , sendPushRequestAllOfCustomPayloadAndroidMessageNotificationBody :: Maybe Text -- ^ The body of your push notification.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SendPushRequestAllOfCustomPayloadAndroidMessageNotification where
  parseJSON = genericParseJSON optionsSendPushRequestAllOfCustomPayloadAndroidMessageNotification
instance ToJSON SendPushRequestAllOfCustomPayloadAndroidMessageNotification where
  toJSON = genericToJSON optionsSendPushRequestAllOfCustomPayloadAndroidMessageNotification

optionsSendPushRequestAllOfCustomPayloadAndroidMessageNotification :: Options
optionsSendPushRequestAllOfCustomPayloadAndroidMessageNotification =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sendPushRequestAllOfCustomPayloadAndroidMessageNotificationTitle", "title")
      , ("sendPushRequestAllOfCustomPayloadAndroidMessageNotificationBody", "body")
      ]


-- | Your payload changes depending on whether you send to iOS devices through Google&#39;s Firebase Cloud Messaging (FCM) or Apple&#39;s Push Notification service (APNs).
data SendPushRequestAllOfCustomPayloadIos = SendPushRequestAllOfCustomPayloadIos
  { sendPushRequestAllOfCustomPayloadIosMessage :: FCMMessage -- ^ 
  , sendPushRequestAllOfCustomPayloadIosCIO :: Maybe APNSCIO -- ^ 
  , sendPushRequestAllOfCustomPayloadIosAps :: Maybe FCMMessageApnsPayloadAps -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SendPushRequestAllOfCustomPayloadIos where
  parseJSON = genericParseJSON optionsSendPushRequestAllOfCustomPayloadIos
instance ToJSON SendPushRequestAllOfCustomPayloadIos where
  toJSON = genericToJSON optionsSendPushRequestAllOfCustomPayloadIos

optionsSendPushRequestAllOfCustomPayloadIos :: Options
optionsSendPushRequestAllOfCustomPayloadIos =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sendPushRequestAllOfCustomPayloadIosMessage", "message")
      , ("sendPushRequestAllOfCustomPayloadIosCIO", "CIO")
      , ("sendPushRequestAllOfCustomPayloadIosAps", "aps")
      ]


-- | The payload of a transactional message.
data Sendemail = Sendemail
  { sendemailTransactionalUnderscoremessageUnderscoreid :: SendpushAllOfTransactionalMessageId -- ^ 
  , sendemailBody :: Text -- ^ The body of your message.
  , sendemailBodyUnderscoreamp :: Maybe Text -- ^ If your message is an email, this is the AMP-enabled body of your message. If your recipient's email client doesn't support AMP, the `body` represents your fallback message.
  , sendemailBodyUnderscoreplain :: Maybe Text -- ^ By default, we generate a plaintext version of your message body for each delivery. Use this key to override the default plain text body.
  , sendemailSubject :: Text -- ^ The subject line for your message.
  , sendemailFrom :: Text -- ^ The address that your email is from. This address must be verified by Customer.io. You can include a display/friendly name in your from address in the format `Person <person@example.com>`.
  , sendemailLanguage :: Maybe Text -- ^ Overrides language preferences for the person you want to send your transactional message to. Use one of our [supported two- or four-letter language codes](/localization-getting-started/#supported-languages).
  , sendemailIdentifiers :: SendpushAllOfIdentifiers -- ^ 
  , sendemailMessageUnderscoredata :: Maybe (Map.Map String Value) -- ^ An object containing the key-value pairs referenced using liquid in your message.
  , sendemailSendUnderscoreat :: Maybe Int -- ^ A unix timestamp (seconds since epoch) determining when the message will be sent. The timestamp can be up to 90 days in the future. If this value is in the past, your message is sent immediately.
  , sendemailDisableUnderscoremessageUnderscoreretention :: Maybe Bool -- ^ If true, the message body is not retained in delivery history. Setting this value overrides the value set in the settings of your `transactional_message_id`.
  , sendemailSendUnderscoretoUnderscoreunsubscribed :: Maybe Bool -- ^ If false, your message is not sent to unsubscribed recipients. Setting this value overrides the value set in the settings of your `transactional_message_id`.
  , sendemailQueueUnderscoredraft :: Maybe Bool -- ^ If true, your transactional message is held as a draft in Customer.io and not sent directly to your audience. You must go to the Deliveries and Drafts page to send your message.
  , sendemailTo :: Text -- ^ The message recipient(s). Supports multiple addresses separated by commas. Your request can contain up to 15 total recipients between the `to` and `bcc` keys.  You can include a display or \"friendly\" name in \"to\" address, but we recommend that you use quotation marks around the friendly name to avoid potential issues with special characters, e.g. `\\\"Person\\\" <person@example.com>`.             
  , sendemailBcc :: Maybe Text -- ^ Blind copy message recipients. Supports multiple addresses separated by commas. Your request can contain up to 15 total recipients between the `to` and `bcc` keys.
  , sendemailFakeUnderscorebcc :: Maybe Bool -- ^ If true, rather than sending true copies to BCC addresses, Customer.io sends a copy of the message with the subject line containing the recipient address(es). 
  , sendemailReplyUnderscoreto :: Maybe Text -- ^ The address that recipients can reply to, if different from the `from` address.
  , sendemailPreheader :: Maybe Text -- ^ Also known as \"preview text\", this is the block block of text that users see next to, or underneath, the subject line in their inbox.
  , sendemailAttachments :: Maybe WithTemplateAllOfAttachments -- ^ 
  , sendemailHeaders :: Maybe (Map.Map String Text) -- ^ An object containing headers, where the key is the header name and the value is the header value. Header names and values must be strings and cannot contain any non-ASCII characters or empty spaces. Some headers are reserved and cannot be overwritten.
  , sendemailDisableUnderscorecssUnderscorepreprocessing :: Maybe Bool -- ^ Set to `true` to disable CSS preprocessing. This setting overrides the CSS preprocessing setting on the `transactional_message_id` as set in the user interface. Transactional emails have CSS preprocessing enabled by default.
  , sendemailTracked :: Maybe Bool -- ^ If true, Customer.io tracks opens and link clicks in your message.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Sendemail where
  parseJSON = genericParseJSON optionsSendemail
instance ToJSON Sendemail where
  toJSON = genericToJSON optionsSendemail

optionsSendemail :: Options
optionsSendemail =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sendemailTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("sendemailBody", "body")
      , ("sendemailBodyUnderscoreamp", "body_amp")
      , ("sendemailBodyUnderscoreplain", "body_plain")
      , ("sendemailSubject", "subject")
      , ("sendemailFrom", "from")
      , ("sendemailLanguage", "language")
      , ("sendemailIdentifiers", "identifiers")
      , ("sendemailMessageUnderscoredata", "message_data")
      , ("sendemailSendUnderscoreat", "send_at")
      , ("sendemailDisableUnderscoremessageUnderscoreretention", "disable_message_retention")
      , ("sendemailSendUnderscoretoUnderscoreunsubscribed", "send_to_unsubscribed")
      , ("sendemailQueueUnderscoredraft", "queue_draft")
      , ("sendemailTo", "to")
      , ("sendemailBcc", "bcc")
      , ("sendemailFakeUnderscorebcc", "fake_bcc")
      , ("sendemailReplyUnderscoreto", "reply_to")
      , ("sendemailPreheader", "preheader")
      , ("sendemailAttachments", "attachments")
      , ("sendemailHeaders", "headers")
      , ("sendemailDisableUnderscorecssUnderscorepreprocessing", "disable_css_preprocessing")
      , ("sendemailTracked", "tracked")
      ]


-- | Information about a sender.
data SenderIdentityObject = SenderIdentityObject
  { senderIdentityObjectId :: Maybe Int -- ^ The identifier of a sender.
  , senderIdentityObjectDeduplicateUnderscoreid :: Maybe Text -- ^ An identifier in the format `id:timestamp` where the id is the id of the object you are working with (Campaigns, Deliveries, Exports, Identities, Newsletters, Segments, and Templates), and the timestamp is the last time the object was updated.
  , senderIdentityObjectName :: Maybe Text -- ^ The name of the sender.
  , senderIdentityObjectEmail :: Maybe Text -- ^ The email address of the sender.
  , senderIdentityObjectAddress :: Maybe Text -- ^ The sender name and email address in the format `name <name@example.com>`.
  , senderIdentityObjectTemplateUnderscoretype :: Maybe Text -- ^ The type of sender.
  , senderIdentityObjectAutoUnderscoregenerated :: Maybe Bool -- ^ If true, the sender is automatically generated by Customer.io.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SenderIdentityObject where
  parseJSON = genericParseJSON optionsSenderIdentityObject
instance ToJSON SenderIdentityObject where
  toJSON = genericToJSON optionsSenderIdentityObject

optionsSenderIdentityObject :: Options
optionsSenderIdentityObject =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("senderIdentityObjectId", "id")
      , ("senderIdentityObjectDeduplicateUnderscoreid", "deduplicate_id")
      , ("senderIdentityObjectName", "name")
      , ("senderIdentityObjectEmail", "email")
      , ("senderIdentityObjectAddress", "address")
      , ("senderIdentityObjectTemplateUnderscoretype", "template_type")
      , ("senderIdentityObjectAutoUnderscoregenerated", "auto_generated")
      ]


-- | Determines the sending behavior for the action. &#x60;automatic&#x60; sends the action automatically when triggered; &#x60;draft&#x60; queues drafts when the action is triggered; or &#x60;off&#x60; to disable the action.
data SendingState = SendingState
  { 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SendingState where
  parseJSON = genericParseJSON optionsSendingState
instance ToJSON SendingState where
  toJSON = genericToJSON optionsSendingState

optionsSendingState :: Options
optionsSendingState =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ 
      ]


-- | The payload of a transactional push message.
data Sendpush = Sendpush
  { sendpushTransactionalUnderscoremessageUnderscoreid :: SendpushAllOfTransactionalMessageId -- ^ 
  , sendpushTo :: Text -- ^ The person's device(s) you want to send this push to. One of `all`, `last_used`, or a custom device token which belongs to the profile from the Identifiers block. Defaults to 'all'. This overrides To from the transactional template (referenced by `transactional_message_id`).
  , sendpushTitle :: Maybe Text -- ^ The title for your notification. This overrides the title of the transactional template (referenced by `transactional_message_id`).
  , sendpushMessage :: Maybe Text -- ^ The message body for your notification. This overrides the notification body of the transactional template (referenced by `transactional_message_id`).
  , sendpushImageUnderscoreurl :: Maybe Text -- ^ An image URL to show in the push. This overrides Image from the transactional template (referenced by `transactional_message_id`).
  , sendpushLink :: Maybe Text -- ^ A deep link to open when the push is tapped. This overrides Link from the transactional template (referenced by `transactional_message_id`).
  , sendpushSound :: Maybe Text -- ^ **For iOS Only**: your notification can alert users with the device's default notification sound or play no sound at all.  
  , sendpushCustomUnderscoredata :: Maybe Value -- ^ An optional list of key/value pairs to attach to the push payload. Due to a Firebase limitation we only support sending string key value pairs. This overrides Custom Data from the transactional template (referenced by `transactional_message_id`).
  , sendpushCustomUnderscoredevice :: Maybe SendpushAllOfCustomDevice -- ^ 
  , sendpushCustomUnderscorepayload :: Maybe SendpushAllOfCustomPayload -- ^ 
  , sendpushLanguage :: Maybe Text -- ^ Overrides language preferences for the person you want to send your transactional message to. Use one of our [supported two- or four-letter language codes](/localization-getting-started/#supported-languages).
  , sendpushIdentifiers :: SendpushAllOfIdentifiers -- ^ 
  , sendpushMessageUnderscoredata :: Maybe (Map.Map String Value) -- ^ An object containing the key-value pairs referenced using liquid in your message.
  , sendpushSendUnderscoreat :: Maybe Int -- ^ A unix timestamp (seconds since epoch) determining when the message will be sent. The timestamp can be up to 90 days in the future. If this value is in the past, your message is sent immediately.
  , sendpushDisableUnderscoremessageUnderscoreretention :: Maybe Bool -- ^ If true, the message body is not retained in delivery history. Setting this value overrides the value set in the settings of your `transactional_message_id`.
  , sendpushSendUnderscoretoUnderscoreunsubscribed :: Maybe Bool -- ^ If false, your message is not sent to unsubscribed recipients. Setting this value overrides the value set in the settings of your `transactional_message_id`.
  , sendpushQueueUnderscoredraft :: Maybe Bool -- ^ If true, your transactional message is held as a draft in Customer.io and not sent directly to your audience. You must go to the Deliveries and Drafts page to send your message.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Sendpush where
  parseJSON = genericParseJSON optionsSendpush
instance ToJSON Sendpush where
  toJSON = genericToJSON optionsSendpush

optionsSendpush :: Options
optionsSendpush =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sendpushTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("sendpushTo", "to")
      , ("sendpushTitle", "title")
      , ("sendpushMessage", "message")
      , ("sendpushImageUnderscoreurl", "image_url")
      , ("sendpushLink", "link")
      , ("sendpushSound", "sound")
      , ("sendpushCustomUnderscoredata", "custom_data")
      , ("sendpushCustomUnderscoredevice", "custom_device")
      , ("sendpushCustomUnderscorepayload", "custom_payload")
      , ("sendpushLanguage", "language")
      , ("sendpushIdentifiers", "identifiers")
      , ("sendpushMessageUnderscoredata", "message_data")
      , ("sendpushSendUnderscoreat", "send_at")
      , ("sendpushDisableUnderscoremessageUnderscoreretention", "disable_message_retention")
      , ("sendpushSendUnderscoretoUnderscoreunsubscribed", "send_to_unsubscribed")
      , ("sendpushQueueUnderscoredraft", "queue_draft")
      ]


-- | A device to perform an upsert operation at the time of send. The device will be added/updated on the profile from the Identifiers block.
data SendpushAllOfCustomDevice = SendpushAllOfCustomDevice
  { sendpushAllOfCustomDeviceToken :: Text -- ^ The device token.
  , sendpushAllOfCustomDeviceLastUnderscoreused :: Maybe Int -- ^ The `timestamp` when you last identified this device. If you don't pass a timestamp when you add or update a device, we use the time of the request itself. Our SDKs identify a device when a person launches their app.
  , sendpushAllOfCustomDevicePlatform :: Text -- ^ The device/messaging platform.
  , sendpushAllOfCustomDeviceAttributes :: Maybe SendPushRequestAllOfCustomDeviceAllOfAttributes -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SendpushAllOfCustomDevice where
  parseJSON = genericParseJSON optionsSendpushAllOfCustomDevice
instance ToJSON SendpushAllOfCustomDevice where
  toJSON = genericToJSON optionsSendpushAllOfCustomDevice

optionsSendpushAllOfCustomDevice :: Options
optionsSendpushAllOfCustomDevice =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sendpushAllOfCustomDeviceToken", "token")
      , ("sendpushAllOfCustomDeviceLastUnderscoreused", "last_used")
      , ("sendpushAllOfCustomDevicePlatform", "platform")
      , ("sendpushAllOfCustomDeviceAttributes", "attributes")
      ]


-- | An optional list of key/value pairs to attach to the push payload. Due to a Firebase limitation we only support sending string key value pairs. This overrides every other parameter, including any Custom Payload from the transactional template (referenced by &#x60;transactional_message_id&#x60;).
data SendpushAllOfCustomPayload = SendpushAllOfCustomPayload
  { sendpushAllOfCustomPayloadIos :: Maybe SendpushAllOfCustomPayloadIos -- ^ 
  , sendpushAllOfCustomPayloadAndroid :: Maybe SendPushRequestAllOfCustomPayloadAndroid -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SendpushAllOfCustomPayload where
  parseJSON = genericParseJSON optionsSendpushAllOfCustomPayload
instance ToJSON SendpushAllOfCustomPayload where
  toJSON = genericToJSON optionsSendpushAllOfCustomPayload

optionsSendpushAllOfCustomPayload :: Options
optionsSendpushAllOfCustomPayload =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sendpushAllOfCustomPayloadIos", "ios")
      , ("sendpushAllOfCustomPayloadAndroid", "android")
      ]


-- | Your payload changes depending on whether you send to iOS devices through Google&#39;s Firebase Cloud Messaging (FCM) or Apple&#39;s Push Notification service (APNs).
data SendpushAllOfCustomPayloadIos = SendpushAllOfCustomPayloadIos
  { sendpushAllOfCustomPayloadIosMessage :: FCMMessage -- ^ 
  , sendpushAllOfCustomPayloadIosCIO :: Maybe APNSCIO -- ^ 
  , sendpushAllOfCustomPayloadIosAps :: Maybe FCMMessageApnsPayloadAps -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SendpushAllOfCustomPayloadIos where
  parseJSON = genericParseJSON optionsSendpushAllOfCustomPayloadIos
instance ToJSON SendpushAllOfCustomPayloadIos where
  toJSON = genericToJSON optionsSendpushAllOfCustomPayloadIos

optionsSendpushAllOfCustomPayloadIos :: Options
optionsSendpushAllOfCustomPayloadIos =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sendpushAllOfCustomPayloadIosMessage", "message")
      , ("sendpushAllOfCustomPayloadIosCIO", "CIO")
      , ("sendpushAllOfCustomPayloadIosAps", "aps")
      ]


-- | Identifies the person represented by your transactional message by one of, and only one of, &#x60;id&#x60;, &#x60;email&#x60;, or &#x60;cio_id&#x60;.
data SendpushAllOfIdentifiers = SendpushAllOfIdentifiers
  { sendpushAllOfIdentifiersId :: Text -- ^ The identifier for the person represented by the transactional message. **NOTE**: If your workspace identifies people by email, use the `email` identifier instead. 
  , sendpushAllOfIdentifiersEmail :: Text -- ^ The identifier for the person represented by the transactional message. Use this option if your workspace identifies people by email rather than by `id`.
  , sendpushAllOfIdentifiersCioUnderscoreid :: Text -- ^ A unique, immutable identifier for a person, set by Customer.io when you add a person.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SendpushAllOfIdentifiers where
  parseJSON = genericParseJSON optionsSendpushAllOfIdentifiers
instance ToJSON SendpushAllOfIdentifiers where
  toJSON = genericToJSON optionsSendpushAllOfIdentifiers

optionsSendpushAllOfIdentifiers :: Options
optionsSendpushAllOfIdentifiers =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sendpushAllOfIdentifiersId", "id")
      , ("sendpushAllOfIdentifiersEmail", "email")
      , ("sendpushAllOfIdentifiersCioUnderscoreid", "cio_id")
      ]


-- | The transactional message template that you want to use for your message. You can call the template by its numerical ID or by the *Trigger Name* that you assigned the template (case insensitive).
data SendpushAllOfTransactionalMessageId = SendpushAllOfTransactionalMessageId
  { 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SendpushAllOfTransactionalMessageId where
  parseJSON = genericParseJSON optionsSendpushAllOfTransactionalMessageId
instance ToJSON SendpushAllOfTransactionalMessageId where
  toJSON = genericToJSON optionsSendpushAllOfTransactionalMessageId

optionsSendpushAllOfTransactionalMessageId :: Options
optionsSendpushAllOfTransactionalMessageId =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ 
      ]


-- | 
data Sent = Sent
  { sentEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , sentObjectUnderscoretype :: Text -- ^ The event relates to an email action.
  , sentTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , sentMetric :: Text -- ^ A message was successfully sent. If you enabled the *Body Content* option with your webhook, the payload includes the `content` of your message.
  , sentData :: SentAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Sent where
  parseJSON = genericParseJSON optionsSent
instance ToJSON Sent where
  toJSON = genericToJSON optionsSent

optionsSent :: Options
optionsSent =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sentEventUnderscoreid", "event_id")
      , ("sentObjectUnderscoretype", "object_type")
      , ("sentTimestamp", "timestamp")
      , ("sentMetric", "metric")
      , ("sentData", "data")
      ]


-- | 
data Sent1 = Sent1
  { sent1EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , sent1ObjectUnderscoretype :: Text -- ^ The event relates to an push notification.
  , sent1Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , sent1Metric :: Text -- ^ A push notification was sent to a recipient. If you enabled the *Body Content* option with your webhook, the payload includes the `content` of your message.
  , sent1Data :: Sent1AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Sent1 where
  parseJSON = genericParseJSON optionsSent1
instance ToJSON Sent1 where
  toJSON = genericToJSON optionsSent1

optionsSent1 :: Options
optionsSent1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sent1EventUnderscoreid", "event_id")
      , ("sent1ObjectUnderscoretype", "object_type")
      , ("sent1Timestamp", "timestamp")
      , ("sent1Metric", "metric")
      , ("sent1Data", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data Sent1AllOfData = Sent1AllOfData
  { sent1AllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , sent1AllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , sent1AllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , sent1AllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , sent1AllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , sent1AllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , sent1AllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , sent1AllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , sent1AllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , sent1AllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , sent1AllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , sent1AllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , sent1AllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , sent1AllOfDataContent :: Maybe Text -- ^ The stringified payload for your push notification. This key only appears if you enabled the *Body Content* option when setting up your webhook.
  , sent1AllOfDataRecipients :: [Sent1AllOfDataAllOfRecipientsInner] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Sent1AllOfData where
  parseJSON = genericParseJSON optionsSent1AllOfData
instance ToJSON Sent1AllOfData where
  toJSON = genericToJSON optionsSent1AllOfData

optionsSent1AllOfData :: Options
optionsSent1AllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sent1AllOfDataTriggerUnderscoreid", "trigger_id")
      , ("sent1AllOfDataCustomerUnderscoreid", "customer_id")
      , ("sent1AllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("sent1AllOfDataActionUnderscoreid", "action_id")
      , ("sent1AllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("sent1AllOfDataJourneyUnderscoreid", "journey_id")
      , ("sent1AllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("sent1AllOfDataIdentifiers", "identifiers")
      , ("sent1AllOfDataCampaignUnderscoreid", "campaign_id")
      , ("sent1AllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("sent1AllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("sent1AllOfDataContentUnderscoreid", "content_id")
      , ("sent1AllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("sent1AllOfDataContent", "content")
      , ("sent1AllOfDataRecipients", "recipients")
      ]


-- | The person&#39;s devices that the push was sent to. Each object in the array represents a device.
data Sent1AllOfDataAllOfRecipientsInner = Sent1AllOfDataAllOfRecipientsInner
  { sent1AllOfDataAllOfRecipientsInnerDeviceUnderscoreid :: Text -- ^ The device identifier/token.
  , sent1AllOfDataAllOfRecipientsInnerDeviceUnderscoreplatform :: Maybe Text -- ^ The device platform—ios or android.
  , sent1AllOfDataAllOfRecipientsInnerFailureUnderscoremessage :: Maybe Text -- ^ If push failed for the device, we'll the list reason it failed.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Sent1AllOfDataAllOfRecipientsInner where
  parseJSON = genericParseJSON optionsSent1AllOfDataAllOfRecipientsInner
instance ToJSON Sent1AllOfDataAllOfRecipientsInner where
  toJSON = genericToJSON optionsSent1AllOfDataAllOfRecipientsInner

optionsSent1AllOfDataAllOfRecipientsInner :: Options
optionsSent1AllOfDataAllOfRecipientsInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sent1AllOfDataAllOfRecipientsInnerDeviceUnderscoreid", "device_id")
      , ("sent1AllOfDataAllOfRecipientsInnerDeviceUnderscoreplatform", "device_platform")
      , ("sent1AllOfDataAllOfRecipientsInnerFailureUnderscoremessage", "failure_message")
      ]


-- | 
data Sent2 = Sent2
  { sent2EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , sent2ObjectUnderscoretype :: Text -- ^ The event relates to an in-app message.
  , sent2Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , sent2Metric :: Text -- ^ An in-app message was sent from Customer.io. Because in-app messages are only delivered when a person's app is open, there may be a significant delay between when a message is sent and when it's \"opened\". If you enabled the *Body Content* option with your webhook, the payload includes the `content` of your message.
  , sent2Data :: Sent2AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Sent2 where
  parseJSON = genericParseJSON optionsSent2
instance ToJSON Sent2 where
  toJSON = genericToJSON optionsSent2

optionsSent2 :: Options
optionsSent2 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sent2EventUnderscoreid", "event_id")
      , ("sent2ObjectUnderscoretype", "object_type")
      , ("sent2Timestamp", "timestamp")
      , ("sent2Metric", "metric")
      , ("sent2Data", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data Sent2AllOfData = Sent2AllOfData
  { sent2AllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , sent2AllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , sent2AllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , sent2AllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , sent2AllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , sent2AllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , sent2AllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , sent2AllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , sent2AllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , sent2AllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , sent2AllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , sent2AllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , sent2AllOfDataContent :: Maybe Text -- ^ The body of your message. This key only appears if you enabled the *Body Content* option when setting up your webhook.
  , sent2AllOfDataRecipient :: Text -- ^ The ID or email address of the person the message was sent to. This identifier is determined by the settings in your message and the value you use to identify your app's users.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Sent2AllOfData where
  parseJSON = genericParseJSON optionsSent2AllOfData
instance ToJSON Sent2AllOfData where
  toJSON = genericToJSON optionsSent2AllOfData

optionsSent2AllOfData :: Options
optionsSent2AllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sent2AllOfDataTriggerUnderscoreid", "trigger_id")
      , ("sent2AllOfDataCustomerUnderscoreid", "customer_id")
      , ("sent2AllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("sent2AllOfDataActionUnderscoreid", "action_id")
      , ("sent2AllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("sent2AllOfDataJourneyUnderscoreid", "journey_id")
      , ("sent2AllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("sent2AllOfDataIdentifiers", "identifiers")
      , ("sent2AllOfDataCampaignUnderscoreid", "campaign_id")
      , ("sent2AllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("sent2AllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("sent2AllOfDataContentUnderscoreid", "content_id")
      , ("sent2AllOfDataContent", "content")
      , ("sent2AllOfDataRecipient", "recipient")
      ]


-- | 
data Sent3 = Sent3
  { sent3EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , sent3ObjectUnderscoretype :: Text -- ^ The event relates to an SMS message.
  , sent3Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , sent3Metric :: Text -- ^ An SMS notification was sent. If you enabled the *Body Content* option with your webhook, the payload includes the `content` of your message.
  , sent3Data :: Sent3AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Sent3 where
  parseJSON = genericParseJSON optionsSent3
instance ToJSON Sent3 where
  toJSON = genericToJSON optionsSent3

optionsSent3 :: Options
optionsSent3 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sent3EventUnderscoreid", "event_id")
      , ("sent3ObjectUnderscoretype", "object_type")
      , ("sent3Timestamp", "timestamp")
      , ("sent3Metric", "metric")
      , ("sent3Data", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data Sent3AllOfData = Sent3AllOfData
  { sent3AllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , sent3AllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , sent3AllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , sent3AllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , sent3AllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , sent3AllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , sent3AllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , sent3AllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , sent3AllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , sent3AllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , sent3AllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , sent3AllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , sent3AllOfDataContent :: Maybe Text -- ^ The body of your message. This key only appears if you enabled the *Body Content* option when setting up your webhook.
  , sent3AllOfDataRecipient :: Text -- ^ The MSISDN (phone number) of the SMS recipient.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Sent3AllOfData where
  parseJSON = genericParseJSON optionsSent3AllOfData
instance ToJSON Sent3AllOfData where
  toJSON = genericToJSON optionsSent3AllOfData

optionsSent3AllOfData :: Options
optionsSent3AllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sent3AllOfDataTriggerUnderscoreid", "trigger_id")
      , ("sent3AllOfDataCustomerUnderscoreid", "customer_id")
      , ("sent3AllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("sent3AllOfDataActionUnderscoreid", "action_id")
      , ("sent3AllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("sent3AllOfDataJourneyUnderscoreid", "journey_id")
      , ("sent3AllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("sent3AllOfDataIdentifiers", "identifiers")
      , ("sent3AllOfDataCampaignUnderscoreid", "campaign_id")
      , ("sent3AllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("sent3AllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("sent3AllOfDataContentUnderscoreid", "content_id")
      , ("sent3AllOfDataContent", "content")
      , ("sent3AllOfDataRecipient", "recipient")
      ]


-- | 
data Sent4 = Sent4
  { sent4EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , sent4ObjectUnderscoretype :: Text -- ^ The event relates to a Slack message.
  , sent4Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , sent4Metric :: Text -- ^ A slack message was sent. If you enabled the *Body Content* option with your webhook, the payload includes the `content` of your message.
  , sent4Data :: Sent4AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Sent4 where
  parseJSON = genericParseJSON optionsSent4
instance ToJSON Sent4 where
  toJSON = genericToJSON optionsSent4

optionsSent4 :: Options
optionsSent4 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sent4EventUnderscoreid", "event_id")
      , ("sent4ObjectUnderscoretype", "object_type")
      , ("sent4Timestamp", "timestamp")
      , ("sent4Metric", "metric")
      , ("sent4Data", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data Sent4AllOfData = Sent4AllOfData
  { sent4AllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , sent4AllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , sent4AllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , sent4AllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , sent4AllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , sent4AllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , sent4AllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , sent4AllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , sent4AllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , sent4AllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , sent4AllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , sent4AllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , sent4AllOfDataContent :: Maybe Text -- ^ The of your slack message. This key only appears if you enabled the *Body Content* option when setting up your webhook.
  , sent4AllOfDataRecipient :: Text -- ^ The channel or person that received the message, i.e. `#general`.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Sent4AllOfData where
  parseJSON = genericParseJSON optionsSent4AllOfData
instance ToJSON Sent4AllOfData where
  toJSON = genericToJSON optionsSent4AllOfData

optionsSent4AllOfData :: Options
optionsSent4AllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sent4AllOfDataTriggerUnderscoreid", "trigger_id")
      , ("sent4AllOfDataCustomerUnderscoreid", "customer_id")
      , ("sent4AllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("sent4AllOfDataActionUnderscoreid", "action_id")
      , ("sent4AllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("sent4AllOfDataJourneyUnderscoreid", "journey_id")
      , ("sent4AllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("sent4AllOfDataIdentifiers", "identifiers")
      , ("sent4AllOfDataCampaignUnderscoreid", "campaign_id")
      , ("sent4AllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("sent4AllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("sent4AllOfDataContentUnderscoreid", "content_id")
      , ("sent4AllOfDataContent", "content")
      , ("sent4AllOfDataRecipient", "recipient")
      ]


-- | 
data Sent5 = Sent5
  { sent5EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , sent5ObjectUnderscoretype :: Text -- ^ The event relates to a webhook.
  , sent5Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , sent5Metric :: Text -- ^ A webhook was sent from Customer.io. If you enabled the *Body Content* option with your webhook, the payload includes the `content` of your webhook.
  , sent5Data :: Sent5AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Sent5 where
  parseJSON = genericParseJSON optionsSent5
instance ToJSON Sent5 where
  toJSON = genericToJSON optionsSent5

optionsSent5 :: Options
optionsSent5 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sent5EventUnderscoreid", "event_id")
      , ("sent5ObjectUnderscoretype", "object_type")
      , ("sent5Timestamp", "timestamp")
      , ("sent5Metric", "metric")
      , ("sent5Data", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data Sent5AllOfData = Sent5AllOfData
  { sent5AllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , sent5AllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , sent5AllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , sent5AllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , sent5AllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , sent5AllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , sent5AllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , sent5AllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , sent5AllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , sent5AllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , sent5AllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , sent5AllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , sent5AllOfDataContent :: Maybe Text -- ^ The stringified payload sent to your webhook address. This key only appears if you enabled the *Body Content* option when setting up your webhook.
  , sent5AllOfDataRecipient :: Text -- ^ The URL the webhook was sent to.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Sent5AllOfData where
  parseJSON = genericParseJSON optionsSent5AllOfData
instance ToJSON Sent5AllOfData where
  toJSON = genericToJSON optionsSent5AllOfData

optionsSent5AllOfData :: Options
optionsSent5AllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sent5AllOfDataTriggerUnderscoreid", "trigger_id")
      , ("sent5AllOfDataCustomerUnderscoreid", "customer_id")
      , ("sent5AllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("sent5AllOfDataActionUnderscoreid", "action_id")
      , ("sent5AllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("sent5AllOfDataJourneyUnderscoreid", "journey_id")
      , ("sent5AllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("sent5AllOfDataIdentifiers", "identifiers")
      , ("sent5AllOfDataCampaignUnderscoreid", "campaign_id")
      , ("sent5AllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("sent5AllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("sent5AllOfDataContentUnderscoreid", "content_id")
      , ("sent5AllOfDataContent", "content")
      , ("sent5AllOfDataRecipient", "recipient")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data SentAllOfData = SentAllOfData
  { sentAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , sentAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , sentAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , sentAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , sentAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , sentAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , sentAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , sentAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , sentAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , sentAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , sentAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , sentAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , sentAllOfDataTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  , sentAllOfDataContent :: Maybe Text -- ^ The body content of your email. This key only appears if you enabled the *Body Content* option when setting up your webhook.
  , sentAllOfDataSubject :: Text -- ^ The subject of the email.
  , sentAllOfDataRecipient :: Text -- ^ The recipient address for an action.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SentAllOfData where
  parseJSON = genericParseJSON optionsSentAllOfData
instance ToJSON SentAllOfData where
  toJSON = genericToJSON optionsSentAllOfData

optionsSentAllOfData :: Options
optionsSentAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("sentAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("sentAllOfDataCustomerUnderscoreid", "customer_id")
      , ("sentAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("sentAllOfDataActionUnderscoreid", "action_id")
      , ("sentAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("sentAllOfDataJourneyUnderscoreid", "journey_id")
      , ("sentAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("sentAllOfDataIdentifiers", "identifiers")
      , ("sentAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("sentAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("sentAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("sentAllOfDataContentUnderscoreid", "content_id")
      , ("sentAllOfDataTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("sentAllOfDataContent", "content")
      , ("sentAllOfDataSubject", "subject")
      , ("sentAllOfDataRecipient", "recipient")
      ]


-- | 
data SimpleAudienceFilter = SimpleAudienceFilter
  { simpleAudienceFilterSegment :: Maybe Segment -- ^ 
  , simpleAudienceFilterAttribute :: Maybe Attribute -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SimpleAudienceFilter where
  parseJSON = genericParseJSON optionsSimpleAudienceFilter
instance ToJSON SimpleAudienceFilter where
  toJSON = genericToJSON optionsSimpleAudienceFilter

optionsSimpleAudienceFilter :: Options
optionsSimpleAudienceFilter =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("simpleAudienceFilterSegment", "segment")
      , ("simpleAudienceFilterAttribute", "attribute")
      ]


-- | Events pertaining to Slack messages.
data Slack = Slack
  { slackEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , slackObjectUnderscoretype :: Text -- ^ The event relates to a Slack message.
  , slackTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , slackMetric :: Text -- ^ A message was undeliverable. Undeliverable messages are messages that have either hit a message limit, come from a newsletter that was cancelled or deleted, or an environment that has delivery disabled (which is something you might do if you’re testing an integration). If you’re not using message limits, you probably won’t see this event.
  , slackData :: Attempted2AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Slack where
  parseJSON = genericParseJSON optionsSlack
instance ToJSON Slack where
  toJSON = genericToJSON optionsSlack

optionsSlack :: Options
optionsSlack =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("slackEventUnderscoreid", "event_id")
      , ("slackObjectUnderscoretype", "object_type")
      , ("slackTimestamp", "timestamp")
      , ("slackMetric", "metric")
      , ("slackData", "data")
      ]


-- | 
data SlackAttempted = SlackAttempted
  { slackAttemptedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , slackAttemptedObjectUnderscoretype :: Text -- ^ The event relates to a Slack message.
  , slackAttemptedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , slackAttemptedMetric :: Text -- ^ A slack message failed and will be retried.
  , slackAttemptedData :: SlackAttemptedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SlackAttempted where
  parseJSON = genericParseJSON optionsSlackAttempted
instance ToJSON SlackAttempted where
  toJSON = genericToJSON optionsSlackAttempted

optionsSlackAttempted :: Options
optionsSlackAttempted =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("slackAttemptedEventUnderscoreid", "event_id")
      , ("slackAttemptedObjectUnderscoretype", "object_type")
      , ("slackAttemptedTimestamp", "timestamp")
      , ("slackAttemptedMetric", "metric")
      , ("slackAttemptedData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data SlackAttemptedAllOfData = SlackAttemptedAllOfData
  { slackAttemptedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , slackAttemptedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , slackAttemptedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , slackAttemptedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , slackAttemptedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , slackAttemptedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , slackAttemptedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , slackAttemptedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , slackAttemptedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , slackAttemptedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , slackAttemptedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , slackAttemptedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , slackAttemptedAllOfDataFailureUnderscoremessage :: Text -- ^ Indicates the reason that an attempted message failed.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SlackAttemptedAllOfData where
  parseJSON = genericParseJSON optionsSlackAttemptedAllOfData
instance ToJSON SlackAttemptedAllOfData where
  toJSON = genericToJSON optionsSlackAttemptedAllOfData

optionsSlackAttemptedAllOfData :: Options
optionsSlackAttemptedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("slackAttemptedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("slackAttemptedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("slackAttemptedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("slackAttemptedAllOfDataActionUnderscoreid", "action_id")
      , ("slackAttemptedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("slackAttemptedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("slackAttemptedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("slackAttemptedAllOfDataIdentifiers", "identifiers")
      , ("slackAttemptedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("slackAttemptedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("slackAttemptedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("slackAttemptedAllOfDataContentUnderscoreid", "content_id")
      , ("slackAttemptedAllOfDataFailureUnderscoremessage", "failure_message")
      ]


-- | 
data SlackClicked = SlackClicked
  { slackClickedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , slackClickedObjectUnderscoretype :: Text -- ^ The event relates to a Slack message.
  , slackClickedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , slackClickedMetric :: Text -- ^ A person clicked a tracked link in a Slack message.
  , slackClickedData :: SlackClickedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SlackClicked where
  parseJSON = genericParseJSON optionsSlackClicked
instance ToJSON SlackClicked where
  toJSON = genericToJSON optionsSlackClicked

optionsSlackClicked :: Options
optionsSlackClicked =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("slackClickedEventUnderscoreid", "event_id")
      , ("slackClickedObjectUnderscoretype", "object_type")
      , ("slackClickedTimestamp", "timestamp")
      , ("slackClickedMetric", "metric")
      , ("slackClickedData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data SlackClickedAllOfData = SlackClickedAllOfData
  { slackClickedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , slackClickedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , slackClickedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , slackClickedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , slackClickedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , slackClickedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , slackClickedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , slackClickedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , slackClickedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , slackClickedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , slackClickedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , slackClickedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , slackClickedAllOfDataRecipient :: Text -- ^ The channel or person that received the message, i.e. `#general`.
  , slackClickedAllOfDataHref :: Text -- ^ The URL of the link that a person clicked.
  , slackClickedAllOfDataLinkUnderscoreid :: Int -- ^ The identifier for the tracked link that a person clicked or tapped.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SlackClickedAllOfData where
  parseJSON = genericParseJSON optionsSlackClickedAllOfData
instance ToJSON SlackClickedAllOfData where
  toJSON = genericToJSON optionsSlackClickedAllOfData

optionsSlackClickedAllOfData :: Options
optionsSlackClickedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("slackClickedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("slackClickedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("slackClickedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("slackClickedAllOfDataActionUnderscoreid", "action_id")
      , ("slackClickedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("slackClickedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("slackClickedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("slackClickedAllOfDataIdentifiers", "identifiers")
      , ("slackClickedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("slackClickedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("slackClickedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("slackClickedAllOfDataContentUnderscoreid", "content_id")
      , ("slackClickedAllOfDataRecipient", "recipient")
      , ("slackClickedAllOfDataHref", "href")
      , ("slackClickedAllOfDataLinkUnderscoreid", "link_id")
      ]


-- | 
data SlackDrafted = SlackDrafted
  { slackDraftedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , slackDraftedObjectUnderscoretype :: Text -- ^ The event relates to a Slack message.
  , slackDraftedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , slackDraftedMetric :: Text -- ^ A slack message was drafted.
  , slackDraftedData :: SlackDraftedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SlackDrafted where
  parseJSON = genericParseJSON optionsSlackDrafted
instance ToJSON SlackDrafted where
  toJSON = genericToJSON optionsSlackDrafted

optionsSlackDrafted :: Options
optionsSlackDrafted =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("slackDraftedEventUnderscoreid", "event_id")
      , ("slackDraftedObjectUnderscoretype", "object_type")
      , ("slackDraftedTimestamp", "timestamp")
      , ("slackDraftedMetric", "metric")
      , ("slackDraftedData", "data")
      ]


-- | 
data SlackDraftedAllOfData = SlackDraftedAllOfData
  { slackDraftedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , slackDraftedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , slackDraftedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , slackDraftedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , slackDraftedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , slackDraftedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , slackDraftedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , slackDraftedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , slackDraftedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , slackDraftedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , slackDraftedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , slackDraftedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SlackDraftedAllOfData where
  parseJSON = genericParseJSON optionsSlackDraftedAllOfData
instance ToJSON SlackDraftedAllOfData where
  toJSON = genericToJSON optionsSlackDraftedAllOfData

optionsSlackDraftedAllOfData :: Options
optionsSlackDraftedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("slackDraftedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("slackDraftedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("slackDraftedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("slackDraftedAllOfDataActionUnderscoreid", "action_id")
      , ("slackDraftedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("slackDraftedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("slackDraftedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("slackDraftedAllOfDataIdentifiers", "identifiers")
      , ("slackDraftedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("slackDraftedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("slackDraftedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("slackDraftedAllOfDataContentUnderscoreid", "content_id")
      ]


-- | Events pertaining to Slack messages.
data SlackEvent = SlackEvent
  { slackEventEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , slackEventObjectUnderscoretype :: Text -- ^ The event relates to a Slack message.
  , slackEventTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , slackEventMetric :: Text -- ^ A message was undeliverable. Undeliverable messages are messages that have either hit a message limit, come from a newsletter that was cancelled or deleted, or an environment that has delivery disabled (which is something you might do if you’re testing an integration). If you’re not using message limits, you probably won’t see this event.
  , slackEventData :: SmsUndeliverableAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SlackEvent where
  parseJSON = genericParseJSON optionsSlackEvent
instance ToJSON SlackEvent where
  toJSON = genericToJSON optionsSlackEvent

optionsSlackEvent :: Options
optionsSlackEvent =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("slackEventEventUnderscoreid", "event_id")
      , ("slackEventObjectUnderscoretype", "object_type")
      , ("slackEventTimestamp", "timestamp")
      , ("slackEventMetric", "metric")
      , ("slackEventData", "data")
      ]


-- | 
data SlackEventCommon = SlackEventCommon
  { slackEventCommonEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , slackEventCommonObjectUnderscoretype :: Text -- ^ The event relates to a Slack message.
  , slackEventCommonTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SlackEventCommon where
  parseJSON = genericParseJSON optionsSlackEventCommon
instance ToJSON SlackEventCommon where
  toJSON = genericToJSON optionsSlackEventCommon

optionsSlackEventCommon :: Options
optionsSlackEventCommon =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("slackEventCommonEventUnderscoreid", "event_id")
      , ("slackEventCommonObjectUnderscoretype", "object_type")
      , ("slackEventCommonTimestamp", "timestamp")
      ]


-- | Describes the slack events reported from Customer.io to a webhook.
data SlackEvents = SlackEvents
  { slackEventsSlackUnderscoreattempted :: Maybe Bool -- ^ Reports when a message could not be sent to the delivery provider will retry. Set to true to report this event type.
  , slackEventsSlackUnderscoreclicked :: Maybe Bool -- ^ Reports when a person clicks a tracked link in a message. Set to true to report this event type.
  , slackEventsSlackUnderscoreconverted :: Maybe Bool -- ^ Reports when a person matches a conversion goal attributed to a a message. Set to true to report this event type.
  , slackEventsSlackUnderscoredrafted :: Maybe Bool -- ^ Reports when a message draft is created. Set to true to report this event type.
  , slackEventsSlackUnderscorefailed :: Maybe Bool -- ^ Reports when a message couldn't be sent to the delivery provider. Set to true to report this event type.
  , slackEventsSlackUnderscoresent :: Maybe Bool -- ^ Reports when a message is sent from Customer.io to the delivery provider. Set to true to report this event type.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SlackEvents where
  parseJSON = genericParseJSON optionsSlackEvents
instance ToJSON SlackEvents where
  toJSON = genericToJSON optionsSlackEvents

optionsSlackEvents :: Options
optionsSlackEvents =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("slackEventsSlackUnderscoreattempted", "slack_attempted")
      , ("slackEventsSlackUnderscoreclicked", "slack_clicked")
      , ("slackEventsSlackUnderscoreconverted", "slack_converted")
      , ("slackEventsSlackUnderscoredrafted", "slack_drafted")
      , ("slackEventsSlackUnderscorefailed", "slack_failed")
      , ("slackEventsSlackUnderscoresent", "slack_sent")
      ]


-- | 
data SlackFailed = SlackFailed
  { slackFailedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , slackFailedObjectUnderscoretype :: Text -- ^ The event relates to a Slack message.
  , slackFailedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , slackFailedMetric :: Text -- ^ A slack message failed.
  , slackFailedData :: SlackFailedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SlackFailed where
  parseJSON = genericParseJSON optionsSlackFailed
instance ToJSON SlackFailed where
  toJSON = genericToJSON optionsSlackFailed

optionsSlackFailed :: Options
optionsSlackFailed =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("slackFailedEventUnderscoreid", "event_id")
      , ("slackFailedObjectUnderscoretype", "object_type")
      , ("slackFailedTimestamp", "timestamp")
      , ("slackFailedMetric", "metric")
      , ("slackFailedData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data SlackFailedAllOfData = SlackFailedAllOfData
  { slackFailedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , slackFailedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , slackFailedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , slackFailedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , slackFailedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , slackFailedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , slackFailedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , slackFailedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , slackFailedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , slackFailedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , slackFailedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , slackFailedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , slackFailedAllOfDataFailureUnderscoremessage :: Text -- ^ Indicates the reason that an attempted message failed.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SlackFailedAllOfData where
  parseJSON = genericParseJSON optionsSlackFailedAllOfData
instance ToJSON SlackFailedAllOfData where
  toJSON = genericToJSON optionsSlackFailedAllOfData

optionsSlackFailedAllOfData :: Options
optionsSlackFailedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("slackFailedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("slackFailedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("slackFailedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("slackFailedAllOfDataActionUnderscoreid", "action_id")
      , ("slackFailedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("slackFailedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("slackFailedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("slackFailedAllOfDataIdentifiers", "identifiers")
      , ("slackFailedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("slackFailedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("slackFailedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("slackFailedAllOfDataContentUnderscoreid", "content_id")
      , ("slackFailedAllOfDataFailureUnderscoremessage", "failure_message")
      ]


-- | 
data SlackSent = SlackSent
  { slackSentEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , slackSentObjectUnderscoretype :: Text -- ^ The event relates to a Slack message.
  , slackSentTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , slackSentMetric :: Text -- ^ A slack message was sent. If you enabled the *Body Content* option with your webhook, the payload includes the `content` of your message.
  , slackSentData :: SlackSentAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SlackSent where
  parseJSON = genericParseJSON optionsSlackSent
instance ToJSON SlackSent where
  toJSON = genericToJSON optionsSlackSent

optionsSlackSent :: Options
optionsSlackSent =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("slackSentEventUnderscoreid", "event_id")
      , ("slackSentObjectUnderscoretype", "object_type")
      , ("slackSentTimestamp", "timestamp")
      , ("slackSentMetric", "metric")
      , ("slackSentData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data SlackSentAllOfData = SlackSentAllOfData
  { slackSentAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , slackSentAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , slackSentAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , slackSentAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , slackSentAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , slackSentAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , slackSentAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , slackSentAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , slackSentAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , slackSentAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , slackSentAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , slackSentAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , slackSentAllOfDataContent :: Maybe Text -- ^ The of your slack message. This key only appears if you enabled the *Body Content* option when setting up your webhook.
  , slackSentAllOfDataRecipient :: Text -- ^ The channel or person that received the message, i.e. `#general`.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SlackSentAllOfData where
  parseJSON = genericParseJSON optionsSlackSentAllOfData
instance ToJSON SlackSentAllOfData where
  toJSON = genericToJSON optionsSlackSentAllOfData

optionsSlackSentAllOfData :: Options
optionsSlackSentAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("slackSentAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("slackSentAllOfDataCustomerUnderscoreid", "customer_id")
      , ("slackSentAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("slackSentAllOfDataActionUnderscoreid", "action_id")
      , ("slackSentAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("slackSentAllOfDataJourneyUnderscoreid", "journey_id")
      , ("slackSentAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("slackSentAllOfDataIdentifiers", "identifiers")
      , ("slackSentAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("slackSentAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("slackSentAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("slackSentAllOfDataContentUnderscoreid", "content_id")
      , ("slackSentAllOfDataContent", "content")
      , ("slackSentAllOfDataRecipient", "recipient")
      ]


-- | 
data SlackUndeliverable = SlackUndeliverable
  { slackUndeliverableEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , slackUndeliverableObjectUnderscoretype :: Text -- ^ The event relates to a Slack message.
  , slackUndeliverableTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , slackUndeliverableMetric :: Text -- ^ A message was undeliverable. Undeliverable messages are messages that have either hit a message limit, come from a newsletter that was cancelled or deleted, or an environment that has delivery disabled (which is something you might do if you’re testing an integration). If you’re not using message limits, you probably won’t see this event.
  , slackUndeliverableData :: SlackUndeliverableAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SlackUndeliverable where
  parseJSON = genericParseJSON optionsSlackUndeliverable
instance ToJSON SlackUndeliverable where
  toJSON = genericToJSON optionsSlackUndeliverable

optionsSlackUndeliverable :: Options
optionsSlackUndeliverable =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("slackUndeliverableEventUnderscoreid", "event_id")
      , ("slackUndeliverableObjectUnderscoretype", "object_type")
      , ("slackUndeliverableTimestamp", "timestamp")
      , ("slackUndeliverableMetric", "metric")
      , ("slackUndeliverableData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data SlackUndeliverableAllOfData = SlackUndeliverableAllOfData
  { slackUndeliverableAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , slackUndeliverableAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , slackUndeliverableAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , slackUndeliverableAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , slackUndeliverableAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , slackUndeliverableAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , slackUndeliverableAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , slackUndeliverableAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , slackUndeliverableAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , slackUndeliverableAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , slackUndeliverableAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , slackUndeliverableAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , slackUndeliverableAllOfDataFailureUnderscoremessage :: Text -- ^ Indicates the reason that an attempted message failed.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SlackUndeliverableAllOfData where
  parseJSON = genericParseJSON optionsSlackUndeliverableAllOfData
instance ToJSON SlackUndeliverableAllOfData where
  toJSON = genericToJSON optionsSlackUndeliverableAllOfData

optionsSlackUndeliverableAllOfData :: Options
optionsSlackUndeliverableAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("slackUndeliverableAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("slackUndeliverableAllOfDataCustomerUnderscoreid", "customer_id")
      , ("slackUndeliverableAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("slackUndeliverableAllOfDataActionUnderscoreid", "action_id")
      , ("slackUndeliverableAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("slackUndeliverableAllOfDataJourneyUnderscoreid", "journey_id")
      , ("slackUndeliverableAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("slackUndeliverableAllOfDataIdentifiers", "identifiers")
      , ("slackUndeliverableAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("slackUndeliverableAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("slackUndeliverableAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("slackUndeliverableAllOfDataContentUnderscoreid", "content_id")
      , ("slackUndeliverableAllOfDataFailureUnderscoremessage", "failure_message")
      ]


-- | 
data SmsActionObject = SmsActionObject
  { smsActionObjectDeduplicateUnderscoreid :: Maybe Text -- ^ An identifier in the format `id:timestamp` where the id is the id of the object you are working with (Campaigns, Deliveries, Exports, Identities, Newsletters, Segments, and Templates), and the timestamp is the last time the object was updated.
  , smsActionObjectName :: Maybe Text -- ^ The name of the action.
  , smsActionObjectLayout :: Maybe Text -- ^ The layout used for the action, if it exists.
  , smsActionObjectCreated :: Maybe Int -- ^ The date time when the referenced ID was created.
  , smsActionObjectUpdated :: Maybe Int -- ^ The date time when the referenced ID was last updated.
  , smsActionObjectBody :: Maybe Text -- ^ The body of your SMS message.
  , smsActionObjectLanguage :: Maybe Text -- ^ The language variant for your message. If you don't use our [localization feature](/localization), or this is the default message, this value is an empty string.
  , smsActionObjectType :: Maybe Text -- ^ For SMS/MMS messages, the `type` is always `twilio`.
  , smsActionObjectImageUnderscoreurl :: Maybe Text -- ^ The URL of the image in your SMS (MMS) message.
  , smsActionObjectSendingUnderscorestate :: Maybe Text -- ^ Determines the sending behavior for the action. `automatic` sends the action automatically when triggered; `draft` queues drafts when the action is triggered; or `off` to disable the action.
  , smsActionObjectRecipient :: Maybe Text -- ^ The recipient value. In general, your recipient is an attribute that you reference using liquid, like `{{customer.phone}}`, instead of a hard-coded value. If you set this field to a liquid statement like `{{customer.phone}}`, the field returns blank in `GET` requests because we populate the recipient from your liquid statement at send time.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SmsActionObject where
  parseJSON = genericParseJSON optionsSmsActionObject
instance ToJSON SmsActionObject where
  toJSON = genericToJSON optionsSmsActionObject

optionsSmsActionObject :: Options
optionsSmsActionObject =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("smsActionObjectDeduplicateUnderscoreid", "deduplicate_id")
      , ("smsActionObjectName", "name")
      , ("smsActionObjectLayout", "layout")
      , ("smsActionObjectCreated", "created")
      , ("smsActionObjectUpdated", "updated")
      , ("smsActionObjectBody", "body")
      , ("smsActionObjectLanguage", "language")
      , ("smsActionObjectType", "type")
      , ("smsActionObjectImageUnderscoreurl", "image_url")
      , ("smsActionObjectSendingUnderscorestate", "sending_state")
      , ("smsActionObjectRecipient", "recipient")
      ]


-- | 
data SmsAttempted = SmsAttempted
  { smsAttemptedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , smsAttemptedObjectUnderscoretype :: Text -- ^ The event relates to an SMS message.
  , smsAttemptedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , smsAttemptedMetric :: Text -- ^ An SMS could not be sent to the delivery provider, but will retry.
  , smsAttemptedData :: SmsAttemptedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SmsAttempted where
  parseJSON = genericParseJSON optionsSmsAttempted
instance ToJSON SmsAttempted where
  toJSON = genericToJSON optionsSmsAttempted

optionsSmsAttempted :: Options
optionsSmsAttempted =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("smsAttemptedEventUnderscoreid", "event_id")
      , ("smsAttemptedObjectUnderscoretype", "object_type")
      , ("smsAttemptedTimestamp", "timestamp")
      , ("smsAttemptedMetric", "metric")
      , ("smsAttemptedData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data SmsAttemptedAllOfData = SmsAttemptedAllOfData
  { smsAttemptedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , smsAttemptedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , smsAttemptedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , smsAttemptedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , smsAttemptedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , smsAttemptedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , smsAttemptedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , smsAttemptedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , smsAttemptedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , smsAttemptedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , smsAttemptedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , smsAttemptedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , smsAttemptedAllOfDataFailureUnderscoremessage :: Text -- ^ Indicates the reason that an attempted message failed.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SmsAttemptedAllOfData where
  parseJSON = genericParseJSON optionsSmsAttemptedAllOfData
instance ToJSON SmsAttemptedAllOfData where
  toJSON = genericToJSON optionsSmsAttemptedAllOfData

optionsSmsAttemptedAllOfData :: Options
optionsSmsAttemptedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("smsAttemptedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("smsAttemptedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("smsAttemptedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("smsAttemptedAllOfDataActionUnderscoreid", "action_id")
      , ("smsAttemptedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("smsAttemptedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("smsAttemptedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("smsAttemptedAllOfDataIdentifiers", "identifiers")
      , ("smsAttemptedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("smsAttemptedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("smsAttemptedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("smsAttemptedAllOfDataContentUnderscoreid", "content_id")
      , ("smsAttemptedAllOfDataFailureUnderscoremessage", "failure_message")
      ]


-- | 
data SmsBounced = SmsBounced
  { smsBouncedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , smsBouncedObjectUnderscoretype :: Text -- ^ The event relates to an SMS message.
  , smsBouncedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , smsBouncedMetric :: Text -- ^ The delivery provider was unable to deliver an SMS message.
  , smsBouncedData :: SmsBouncedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SmsBounced where
  parseJSON = genericParseJSON optionsSmsBounced
instance ToJSON SmsBounced where
  toJSON = genericToJSON optionsSmsBounced

optionsSmsBounced :: Options
optionsSmsBounced =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("smsBouncedEventUnderscoreid", "event_id")
      , ("smsBouncedObjectUnderscoretype", "object_type")
      , ("smsBouncedTimestamp", "timestamp")
      , ("smsBouncedMetric", "metric")
      , ("smsBouncedData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data SmsBouncedAllOfData = SmsBouncedAllOfData
  { smsBouncedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , smsBouncedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , smsBouncedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , smsBouncedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , smsBouncedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , smsBouncedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , smsBouncedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , smsBouncedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , smsBouncedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , smsBouncedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , smsBouncedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , smsBouncedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , smsBouncedAllOfDataFailureUnderscoremessage :: Text -- ^ Indicates the reason that an attempted message failed.
  , smsBouncedAllOfDataRecipient :: Text -- ^ The MSISDN (phone number) of the SMS recipient.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SmsBouncedAllOfData where
  parseJSON = genericParseJSON optionsSmsBouncedAllOfData
instance ToJSON SmsBouncedAllOfData where
  toJSON = genericToJSON optionsSmsBouncedAllOfData

optionsSmsBouncedAllOfData :: Options
optionsSmsBouncedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("smsBouncedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("smsBouncedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("smsBouncedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("smsBouncedAllOfDataActionUnderscoreid", "action_id")
      , ("smsBouncedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("smsBouncedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("smsBouncedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("smsBouncedAllOfDataIdentifiers", "identifiers")
      , ("smsBouncedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("smsBouncedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("smsBouncedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("smsBouncedAllOfDataContentUnderscoreid", "content_id")
      , ("smsBouncedAllOfDataFailureUnderscoremessage", "failure_message")
      , ("smsBouncedAllOfDataRecipient", "recipient")
      ]


-- | 
data SmsClicked = SmsClicked
  { smsClickedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , smsClickedObjectUnderscoretype :: Text -- ^ The event relates to an SMS message.
  , smsClickedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , smsClickedMetric :: Text -- ^ A recipient tapped a link in an SMS message they received.
  , smsClickedData :: SmsClickedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SmsClicked where
  parseJSON = genericParseJSON optionsSmsClicked
instance ToJSON SmsClicked where
  toJSON = genericToJSON optionsSmsClicked

optionsSmsClicked :: Options
optionsSmsClicked =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("smsClickedEventUnderscoreid", "event_id")
      , ("smsClickedObjectUnderscoretype", "object_type")
      , ("smsClickedTimestamp", "timestamp")
      , ("smsClickedMetric", "metric")
      , ("smsClickedData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data SmsClickedAllOfData = SmsClickedAllOfData
  { smsClickedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , smsClickedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , smsClickedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , smsClickedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , smsClickedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , smsClickedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , smsClickedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , smsClickedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , smsClickedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , smsClickedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , smsClickedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , smsClickedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , smsClickedAllOfDataRecipient :: Text -- ^ The MSISDN (phone number) of the SMS recipient.
  , smsClickedAllOfDataLinkUnderscoreid :: Int -- ^ The identifier for the tracked link that a person clicked or tapped.
  , smsClickedAllOfDataHref :: Text -- ^ The URL of the link that a person clicked.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SmsClickedAllOfData where
  parseJSON = genericParseJSON optionsSmsClickedAllOfData
instance ToJSON SmsClickedAllOfData where
  toJSON = genericToJSON optionsSmsClickedAllOfData

optionsSmsClickedAllOfData :: Options
optionsSmsClickedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("smsClickedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("smsClickedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("smsClickedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("smsClickedAllOfDataActionUnderscoreid", "action_id")
      , ("smsClickedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("smsClickedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("smsClickedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("smsClickedAllOfDataIdentifiers", "identifiers")
      , ("smsClickedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("smsClickedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("smsClickedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("smsClickedAllOfDataContentUnderscoreid", "content_id")
      , ("smsClickedAllOfDataRecipient", "recipient")
      , ("smsClickedAllOfDataLinkUnderscoreid", "link_id")
      , ("smsClickedAllOfDataHref", "href")
      ]


-- | 
data SmsConverted = SmsConverted
  { smsConvertedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , smsConvertedObjectUnderscoretype :: Text -- ^ The event relates to an SMS message.
  , smsConvertedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , smsConvertedMetric :: Text -- ^ A person matched a conversion goal attributed to an SMS.
  , smsConvertedData :: SmsConvertedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SmsConverted where
  parseJSON = genericParseJSON optionsSmsConverted
instance ToJSON SmsConverted where
  toJSON = genericToJSON optionsSmsConverted

optionsSmsConverted :: Options
optionsSmsConverted =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("smsConvertedEventUnderscoreid", "event_id")
      , ("smsConvertedObjectUnderscoretype", "object_type")
      , ("smsConvertedTimestamp", "timestamp")
      , ("smsConvertedMetric", "metric")
      , ("smsConvertedData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data SmsConvertedAllOfData = SmsConvertedAllOfData
  { smsConvertedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , smsConvertedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , smsConvertedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , smsConvertedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , smsConvertedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , smsConvertedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , smsConvertedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , smsConvertedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , smsConvertedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , smsConvertedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , smsConvertedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , smsConvertedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , smsConvertedAllOfDataRecipient :: Text -- ^ The MSISDN (phone number) of the SMS recipient.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SmsConvertedAllOfData where
  parseJSON = genericParseJSON optionsSmsConvertedAllOfData
instance ToJSON SmsConvertedAllOfData where
  toJSON = genericToJSON optionsSmsConvertedAllOfData

optionsSmsConvertedAllOfData :: Options
optionsSmsConvertedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("smsConvertedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("smsConvertedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("smsConvertedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("smsConvertedAllOfDataActionUnderscoreid", "action_id")
      , ("smsConvertedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("smsConvertedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("smsConvertedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("smsConvertedAllOfDataIdentifiers", "identifiers")
      , ("smsConvertedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("smsConvertedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("smsConvertedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("smsConvertedAllOfDataContentUnderscoreid", "content_id")
      , ("smsConvertedAllOfDataRecipient", "recipient")
      ]


-- | 
data SmsDelivered = SmsDelivered
  { smsDeliveredEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , smsDeliveredObjectUnderscoretype :: Text -- ^ The event relates to an SMS message.
  , smsDeliveredTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , smsDeliveredMetric :: Text -- ^ An SMS notification was delivered to a recipient.
  , smsDeliveredData :: SmsDeliveredAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SmsDelivered where
  parseJSON = genericParseJSON optionsSmsDelivered
instance ToJSON SmsDelivered where
  toJSON = genericToJSON optionsSmsDelivered

optionsSmsDelivered :: Options
optionsSmsDelivered =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("smsDeliveredEventUnderscoreid", "event_id")
      , ("smsDeliveredObjectUnderscoretype", "object_type")
      , ("smsDeliveredTimestamp", "timestamp")
      , ("smsDeliveredMetric", "metric")
      , ("smsDeliveredData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data SmsDeliveredAllOfData = SmsDeliveredAllOfData
  { smsDeliveredAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , smsDeliveredAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , smsDeliveredAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , smsDeliveredAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , smsDeliveredAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , smsDeliveredAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , smsDeliveredAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , smsDeliveredAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , smsDeliveredAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , smsDeliveredAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , smsDeliveredAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , smsDeliveredAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , smsDeliveredAllOfDataRecipient :: Text -- ^ The MSISDN (phone number) of the SMS recipient.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SmsDeliveredAllOfData where
  parseJSON = genericParseJSON optionsSmsDeliveredAllOfData
instance ToJSON SmsDeliveredAllOfData where
  toJSON = genericToJSON optionsSmsDeliveredAllOfData

optionsSmsDeliveredAllOfData :: Options
optionsSmsDeliveredAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("smsDeliveredAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("smsDeliveredAllOfDataCustomerUnderscoreid", "customer_id")
      , ("smsDeliveredAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("smsDeliveredAllOfDataActionUnderscoreid", "action_id")
      , ("smsDeliveredAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("smsDeliveredAllOfDataJourneyUnderscoreid", "journey_id")
      , ("smsDeliveredAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("smsDeliveredAllOfDataIdentifiers", "identifiers")
      , ("smsDeliveredAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("smsDeliveredAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("smsDeliveredAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("smsDeliveredAllOfDataContentUnderscoreid", "content_id")
      , ("smsDeliveredAllOfDataRecipient", "recipient")
      ]


-- | 
data SmsDrafted = SmsDrafted
  { smsDraftedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , smsDraftedObjectUnderscoretype :: Text -- ^ The event relates to an SMS message.
  , smsDraftedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , smsDraftedMetric :: Text -- ^ An SMS notification was drafted.
  , smsDraftedData :: SmsDraftedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SmsDrafted where
  parseJSON = genericParseJSON optionsSmsDrafted
instance ToJSON SmsDrafted where
  toJSON = genericToJSON optionsSmsDrafted

optionsSmsDrafted :: Options
optionsSmsDrafted =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("smsDraftedEventUnderscoreid", "event_id")
      , ("smsDraftedObjectUnderscoretype", "object_type")
      , ("smsDraftedTimestamp", "timestamp")
      , ("smsDraftedMetric", "metric")
      , ("smsDraftedData", "data")
      ]


-- | 
data SmsDraftedAllOfData = SmsDraftedAllOfData
  { smsDraftedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , smsDraftedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , smsDraftedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , smsDraftedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , smsDraftedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , smsDraftedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , smsDraftedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , smsDraftedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , smsDraftedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , smsDraftedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , smsDraftedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , smsDraftedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SmsDraftedAllOfData where
  parseJSON = genericParseJSON optionsSmsDraftedAllOfData
instance ToJSON SmsDraftedAllOfData where
  toJSON = genericToJSON optionsSmsDraftedAllOfData

optionsSmsDraftedAllOfData :: Options
optionsSmsDraftedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("smsDraftedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("smsDraftedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("smsDraftedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("smsDraftedAllOfDataActionUnderscoreid", "action_id")
      , ("smsDraftedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("smsDraftedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("smsDraftedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("smsDraftedAllOfDataIdentifiers", "identifiers")
      , ("smsDraftedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("smsDraftedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("smsDraftedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("smsDraftedAllOfDataContentUnderscoreid", "content_id")
      ]


-- | Events pertaining to SMS notifications.
data SmsEvent = SmsEvent
  { smsEventEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , smsEventObjectUnderscoretype :: Text -- ^ The event relates to an SMS message.
  , smsEventTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , smsEventMetric :: Text -- ^ An SMS couldn't be sent to the delivery provider.
  , smsEventData :: Attempted2AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SmsEvent where
  parseJSON = genericParseJSON optionsSmsEvent
instance ToJSON SmsEvent where
  toJSON = genericToJSON optionsSmsEvent

optionsSmsEvent :: Options
optionsSmsEvent =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("smsEventEventUnderscoreid", "event_id")
      , ("smsEventObjectUnderscoretype", "object_type")
      , ("smsEventTimestamp", "timestamp")
      , ("smsEventMetric", "metric")
      , ("smsEventData", "data")
      ]


-- | 
data SmsEventCommon = SmsEventCommon
  { smsEventCommonEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , smsEventCommonObjectUnderscoretype :: Text -- ^ The event relates to an SMS message.
  , smsEventCommonTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SmsEventCommon where
  parseJSON = genericParseJSON optionsSmsEventCommon
instance ToJSON SmsEventCommon where
  toJSON = genericToJSON optionsSmsEventCommon

optionsSmsEventCommon :: Options
optionsSmsEventCommon =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("smsEventCommonEventUnderscoreid", "event_id")
      , ("smsEventCommonObjectUnderscoretype", "object_type")
      , ("smsEventCommonTimestamp", "timestamp")
      ]


-- | Describes the SMS events reported from Customer.io to a webhook.
data SmsEvents = SmsEvents
  { smsEventsSmsUnderscoreattempted :: Maybe Bool -- ^ Reports when a push notification could not be sent to the delivery provider will retry. Set to true to report this event type.
  , smsEventsSmsUnderscorebounced :: Maybe Bool -- ^ Reports when the delivery provider is unable to deliver a message to the recipient. Set to true to report this event type.
  , smsEventsSmsUnderscoreclicked :: Maybe Bool -- ^ Reports when a person clicks a tracked link in a message. Set to true to report this event type.
  , smsEventsSmsUnderscoreconverted :: Maybe Bool -- ^ Reports when a person matches a conversion goal attributed to a a message. Set to true to report this event type.
  , smsEventsSmsUnderscoredelivered :: Maybe Bool -- ^ The delivery provider reports that the message is delivered. Set to true to report this event type.
  , smsEventsSmsUnderscoredrafted :: Maybe Bool -- ^ Reports when a message draft is created. Set to true to report this event type.
  , smsEventsSmsUnderscorefailed :: Maybe Bool -- ^ Reports when a message couldn't be sent to the delivery provider. Set to true to report this event type.
  , smsEventsSmsUnderscoresent :: Maybe Bool -- ^ Reports when a message is sent from Customer.io to the delivery provider. Set to true to report this event type.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SmsEvents where
  parseJSON = genericParseJSON optionsSmsEvents
instance ToJSON SmsEvents where
  toJSON = genericToJSON optionsSmsEvents

optionsSmsEvents :: Options
optionsSmsEvents =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("smsEventsSmsUnderscoreattempted", "sms_attempted")
      , ("smsEventsSmsUnderscorebounced", "sms_bounced")
      , ("smsEventsSmsUnderscoreclicked", "sms_clicked")
      , ("smsEventsSmsUnderscoreconverted", "sms_converted")
      , ("smsEventsSmsUnderscoredelivered", "sms_delivered")
      , ("smsEventsSmsUnderscoredrafted", "sms_drafted")
      , ("smsEventsSmsUnderscorefailed", "sms_failed")
      , ("smsEventsSmsUnderscoresent", "sms_sent")
      ]


-- | 
data SmsFailed = SmsFailed
  { smsFailedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , smsFailedObjectUnderscoretype :: Text -- ^ The event relates to an SMS message.
  , smsFailedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , smsFailedMetric :: Text -- ^ An SMS couldn't be sent to the delivery provider.
  , smsFailedData :: SmsFailedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SmsFailed where
  parseJSON = genericParseJSON optionsSmsFailed
instance ToJSON SmsFailed where
  toJSON = genericToJSON optionsSmsFailed

optionsSmsFailed :: Options
optionsSmsFailed =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("smsFailedEventUnderscoreid", "event_id")
      , ("smsFailedObjectUnderscoretype", "object_type")
      , ("smsFailedTimestamp", "timestamp")
      , ("smsFailedMetric", "metric")
      , ("smsFailedData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data SmsFailedAllOfData = SmsFailedAllOfData
  { smsFailedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , smsFailedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , smsFailedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , smsFailedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , smsFailedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , smsFailedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , smsFailedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , smsFailedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , smsFailedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , smsFailedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , smsFailedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , smsFailedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , smsFailedAllOfDataFailureUnderscoremessage :: Text -- ^ Indicates the reason that an attempted message failed.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SmsFailedAllOfData where
  parseJSON = genericParseJSON optionsSmsFailedAllOfData
instance ToJSON SmsFailedAllOfData where
  toJSON = genericToJSON optionsSmsFailedAllOfData

optionsSmsFailedAllOfData :: Options
optionsSmsFailedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("smsFailedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("smsFailedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("smsFailedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("smsFailedAllOfDataActionUnderscoreid", "action_id")
      , ("smsFailedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("smsFailedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("smsFailedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("smsFailedAllOfDataIdentifiers", "identifiers")
      , ("smsFailedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("smsFailedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("smsFailedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("smsFailedAllOfDataContentUnderscoreid", "content_id")
      , ("smsFailedAllOfDataFailureUnderscoremessage", "failure_message")
      ]


-- | 
data SmsSent = SmsSent
  { smsSentEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , smsSentObjectUnderscoretype :: Text -- ^ The event relates to an SMS message.
  , smsSentTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , smsSentMetric :: Text -- ^ An SMS notification was sent. If you enabled the *Body Content* option with your webhook, the payload includes the `content` of your message.
  , smsSentData :: SmsSentAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SmsSent where
  parseJSON = genericParseJSON optionsSmsSent
instance ToJSON SmsSent where
  toJSON = genericToJSON optionsSmsSent

optionsSmsSent :: Options
optionsSmsSent =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("smsSentEventUnderscoreid", "event_id")
      , ("smsSentObjectUnderscoretype", "object_type")
      , ("smsSentTimestamp", "timestamp")
      , ("smsSentMetric", "metric")
      , ("smsSentData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data SmsSentAllOfData = SmsSentAllOfData
  { smsSentAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , smsSentAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , smsSentAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , smsSentAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , smsSentAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , smsSentAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , smsSentAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , smsSentAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , smsSentAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , smsSentAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , smsSentAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , smsSentAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , smsSentAllOfDataContent :: Maybe Text -- ^ The body of your message. This key only appears if you enabled the *Body Content* option when setting up your webhook.
  , smsSentAllOfDataRecipient :: Text -- ^ The MSISDN (phone number) of the SMS recipient.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SmsSentAllOfData where
  parseJSON = genericParseJSON optionsSmsSentAllOfData
instance ToJSON SmsSentAllOfData where
  toJSON = genericToJSON optionsSmsSentAllOfData

optionsSmsSentAllOfData :: Options
optionsSmsSentAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("smsSentAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("smsSentAllOfDataCustomerUnderscoreid", "customer_id")
      , ("smsSentAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("smsSentAllOfDataActionUnderscoreid", "action_id")
      , ("smsSentAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("smsSentAllOfDataJourneyUnderscoreid", "journey_id")
      , ("smsSentAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("smsSentAllOfDataIdentifiers", "identifiers")
      , ("smsSentAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("smsSentAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("smsSentAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("smsSentAllOfDataContentUnderscoreid", "content_id")
      , ("smsSentAllOfDataContent", "content")
      , ("smsSentAllOfDataRecipient", "recipient")
      ]


-- | 
data SmsUndeliverable = SmsUndeliverable
  { smsUndeliverableEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , smsUndeliverableObjectUnderscoretype :: Text -- ^ The event relates to an SMS message.
  , smsUndeliverableTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , smsUndeliverableMetric :: Text -- ^ A message was undeliverable. Undeliverable messages are messages that have either hit a message limit, come from a newsletter that was cancelled or deleted, or an environment that has delivery disabled (which is something you might do if you’re testing an integration). If you’re not using message limits, you probably won’t see this event.
  , smsUndeliverableData :: SmsUndeliverableAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SmsUndeliverable where
  parseJSON = genericParseJSON optionsSmsUndeliverable
instance ToJSON SmsUndeliverable where
  toJSON = genericToJSON optionsSmsUndeliverable

optionsSmsUndeliverable :: Options
optionsSmsUndeliverable =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("smsUndeliverableEventUnderscoreid", "event_id")
      , ("smsUndeliverableObjectUnderscoretype", "object_type")
      , ("smsUndeliverableTimestamp", "timestamp")
      , ("smsUndeliverableMetric", "metric")
      , ("smsUndeliverableData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data SmsUndeliverableAllOfData = SmsUndeliverableAllOfData
  { smsUndeliverableAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , smsUndeliverableAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , smsUndeliverableAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , smsUndeliverableAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , smsUndeliverableAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , smsUndeliverableAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , smsUndeliverableAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , smsUndeliverableAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , smsUndeliverableAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , smsUndeliverableAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , smsUndeliverableAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , smsUndeliverableAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , smsUndeliverableAllOfDataFailureUnderscoremessage :: Text -- ^ Indicates the reason that an attempted message failed.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SmsUndeliverableAllOfData where
  parseJSON = genericParseJSON optionsSmsUndeliverableAllOfData
instance ToJSON SmsUndeliverableAllOfData where
  toJSON = genericToJSON optionsSmsUndeliverableAllOfData

optionsSmsUndeliverableAllOfData :: Options
optionsSmsUndeliverableAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("smsUndeliverableAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("smsUndeliverableAllOfDataCustomerUnderscoreid", "customer_id")
      , ("smsUndeliverableAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("smsUndeliverableAllOfDataActionUnderscoreid", "action_id")
      , ("smsUndeliverableAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("smsUndeliverableAllOfDataJourneyUnderscoreid", "journey_id")
      , ("smsUndeliverableAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("smsUndeliverableAllOfDataIdentifiers", "identifiers")
      , ("smsUndeliverableAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("smsUndeliverableAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("smsUndeliverableAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("smsUndeliverableAllOfDataContentUnderscoreid", "content_id")
      , ("smsUndeliverableAllOfDataFailureUnderscoremessage", "failure_message")
      ]


-- | describes a piece of reusable content. You must provide a name for the snippet and the &#x60;value&#x60;—the content that appears in messages that use the snippet.
data Snippet = Snippet
  { snippetName :: Text -- ^ The name of the snippet, must be unique.
  , snippetValue :: Text -- ^ The contents of the snippet.
  , snippetUpdatedUnderscoreat :: Maybe Int -- ^ The last date-time the snippet was updated.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Snippet where
  parseJSON = genericParseJSON optionsSnippet
instance ToJSON Snippet where
  toJSON = genericToJSON optionsSnippet

optionsSnippet :: Options
optionsSnippet =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("snippetName", "name")
      , ("snippetValue", "value")
      , ("snippetUpdatedUnderscoreat", "updated_at")
      ]


-- | 
data Spammed = Spammed
  { spammedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , spammedObjectUnderscoretype :: Text -- ^ The event relates to an email action.
  , spammedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , spammedMetric :: Text -- ^ A recipient marked an email as spam.
  , spammedData :: DraftedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Spammed where
  parseJSON = genericParseJSON optionsSpammed
instance ToJSON Spammed where
  toJSON = genericToJSON optionsSpammed

optionsSpammed :: Options
optionsSpammed =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("spammedEventUnderscoreid", "event_id")
      , ("spammedObjectUnderscoretype", "object_type")
      , ("spammedTimestamp", "timestamp")
      , ("spammedMetric", "metric")
      , ("spammedData", "data")
      ]


-- | 
data StandardAnonymousEvent = StandardAnonymousEvent
  { standardAnonymousEventAnonymousUnderscoreid :: Maybe Text -- ^ An identifier for an anonymous event, like a cookie. If set as an attribute on a person, any events bearing the same anonymous value are associated with this person. This value must be unique and is not reusable.
  , standardAnonymousEventName :: Text -- ^ The name of the event. This is how you'll reference the event in campaigns or segments.
  , standardAnonymousEventId :: Maybe Text -- ^ An identifier used to deduplicate events. This value must be a [ULID](https://github.com/ulid/spec). If an event has the same value as an event we previously received, we won't show or process the duplicate. Note - our Python and Ruby libraries do not pass this id.
  , standardAnonymousEventType :: Maybe Text -- ^ Sets the event type. If your event isn't a `page` or `screen` type event, we automatically set this property to `event`.
  , standardAnonymousEventTimestamp :: Maybe Int -- ^ The unix timestamp when the event took place. If you don't provide this value, we use the date-time when we receive the event. 
  , standardAnonymousEventData :: Maybe StandardAnonymousEventData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON StandardAnonymousEvent where
  parseJSON = genericParseJSON optionsStandardAnonymousEvent
instance ToJSON StandardAnonymousEvent where
  toJSON = genericToJSON optionsStandardAnonymousEvent

optionsStandardAnonymousEvent :: Options
optionsStandardAnonymousEvent =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("standardAnonymousEventAnonymousUnderscoreid", "anonymous_id")
      , ("standardAnonymousEventName", "name")
      , ("standardAnonymousEventId", "id")
      , ("standardAnonymousEventType", "type")
      , ("standardAnonymousEventTimestamp", "timestamp")
      , ("standardAnonymousEventData", "data")
      ]


-- | Additional information that you might want to reference in a message using liquid or use to set attributes on your customer (referenced by &#x60;customer_id&#x60;). You can include &#x60;from_address&#x60; and &#x60;reply_to&#x60;, but the event can only trigger a campaign if it is associated with a person within 72 hours of its timestamp.
newtype StandardAnonymousEventData = StandardAnonymousEventData { unStandardAnonymousEventData :: (Map.Map Text Value) }
  deriving (Show, Eq, FromJSON, ToJSON, Generic, Data)

-- | 
data StandardEvent = StandardEvent
  { standardEventName :: Text -- ^ The name of the event. This is how you'll reference the event in campaigns or segments.
  , standardEventId :: Maybe Text -- ^ An identifier used to deduplicate events. This value must be a [ULID](https://github.com/ulid/spec). If an event has the same value as an event we previously received, we won't show or process the duplicate. Note - our Python and Ruby libraries do not pass this id.
  , standardEventType :: Maybe Text -- ^ Sets the event type. If your event isn't a `page` or `screen` type event, we automatically set this property to `event`.
  , standardEventTimestamp :: Maybe Int -- ^ The unix timestamp when the event took place. If you don't provide this value, we use the date-time when we receive the event.  **NOTE**: Events with a timestamp in the past 72 hours can trigger campaigns. 
  , standardEventData :: Maybe StandardEventData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON StandardEvent where
  parseJSON = genericParseJSON optionsStandardEvent
instance ToJSON StandardEvent where
  toJSON = genericToJSON optionsStandardEvent

optionsStandardEvent :: Options
optionsStandardEvent =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("standardEventName", "name")
      , ("standardEventId", "id")
      , ("standardEventType", "type")
      , ("standardEventTimestamp", "timestamp")
      , ("standardEventData", "data")
      ]


-- | Additional information that you might want to reference in a message using liquid or use to set attributes on your customer (referenced by &#x60;customer_id&#x60;).
newtype StandardEventData = StandardEventData { unStandardEventData :: (Map.Map Text Value) }
  deriving (Show, Eq, FromJSON, ToJSON, Generic, Data)

-- | The status of the campaign.
data State = State
  { 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON State where
  parseJSON = genericParseJSON optionsState
instance ToJSON State where
  toJSON = genericToJSON optionsState

optionsState :: Options
optionsState =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ 
      ]


-- | A person subscribed to messages from you—their &#x60;unsubscribed&#x60; attribute was set to &#x60;false&#x60;.
data Subscribed = Subscribed
  { subscribedMetric :: Text -- ^ The metric recorded by the event. For `customer` events, this is whether the customer explicitly subscribed or unsubscribed.
  , subscribedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , subscribedObjectUnderscoretype :: Text -- ^ The event represents a customer subscribing, unsubscribing, or changing their subscription preferences.
  , subscribedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , subscribedData :: SubscribedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Subscribed where
  parseJSON = genericParseJSON optionsSubscribed
instance ToJSON Subscribed where
  toJSON = genericToJSON optionsSubscribed

optionsSubscribed :: Options
optionsSubscribed =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("subscribedMetric", "metric")
      , ("subscribedEventUnderscoreid", "event_id")
      , ("subscribedObjectUnderscoretype", "object_type")
      , ("subscribedTimestamp", "timestamp")
      , ("subscribedData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data SubscribedAllOfData = SubscribedAllOfData
  { subscribedAllOfDataCustomerUnderscoreid :: Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , subscribedAllOfDataEmailUnderscoreaddress :: Text -- ^ The email address of the customer.
  , subscribedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SubscribedAllOfData where
  parseJSON = genericParseJSON optionsSubscribedAllOfData
instance ToJSON SubscribedAllOfData where
  toJSON = genericToJSON optionsSubscribedAllOfData

optionsSubscribedAllOfData :: Options
optionsSubscribedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("subscribedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("subscribedAllOfDataEmailUnderscoreaddress", "email_address")
      , ("subscribedAllOfDataIdentifiers", "identifiers")
      ]


-- | The person the event represents. This object contains all of the identifiers available to people in your workspace, even if they aren&#39;t set. If your workspace supports multiple identifiers (email and ID), this object contains &#x60;id&#x60;, &#x60;email&#x60; (either of which can be null), and &#x60;cio_id&#x60;.   Otherwise, if your workspace only supports ID, this object just contains the &#x60;id&#x60; of the person the event represents. 
data SubscribedAllOfDataIdentifiers = SubscribedAllOfDataIdentifiers
  { subscribedAllOfDataIdentifiersId :: Text -- ^ The ID of a customer profile, analogous to a \"person\" in the UI. If your workspace supports multiple identifiers (email and ID), this value can be null.
  , subscribedAllOfDataIdentifiersEmail :: Maybe Text -- ^ The email address of the customer.
  , subscribedAllOfDataIdentifiersCioUnderscoreid :: Maybe Text -- ^ The canonical identifier for a person, present only if your workspace supports multiple identifiers (email and ID). This value exists to keep a record of a person in your workspace across changes to their other identifiers.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON SubscribedAllOfDataIdentifiers where
  parseJSON = genericParseJSON optionsSubscribedAllOfDataIdentifiers
instance ToJSON SubscribedAllOfDataIdentifiers where
  toJSON = genericToJSON optionsSubscribedAllOfDataIdentifiers

optionsSubscribedAllOfDataIdentifiers :: Options
optionsSubscribedAllOfDataIdentifiers =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("subscribedAllOfDataIdentifiersId", "id")
      , ("subscribedAllOfDataIdentifiersEmail", "email")
      , ("subscribedAllOfDataIdentifiersCioUnderscoreid", "cio_id")
      ]


-- | Suppress a person&#39;s identifier(s) in Customer.io, so that you can&#39;t message a person or add their identifiers back to your workspace. This is separate from suppressions performed by your email provider.
data Suppress = Suppress
  { suppressType :: Text -- ^ The operation modifies a person in Customer.io
  , suppressIdentifiers :: Identify1AllOfIdentifiers -- ^ 
  , suppressAction :: Text -- ^ Suppress a person's identifier(s) in Customer.io, so that you can't message a person or add their identifiers back to your workspace. This is separate from suppressions performed by your email provider.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Suppress where
  parseJSON = genericParseJSON optionsSuppress
instance ToJSON Suppress where
  toJSON = genericToJSON optionsSuppress

optionsSuppress :: Options
optionsSuppress =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("suppressType", "type")
      , ("suppressIdentifiers", "identifiers")
      , ("suppressAction", "action")
      ]


-- | Displays text in your message.
data TextWidget = TextWidget
  { textWidgetType :: Text -- ^ Defines the widget type.
  , textWidgetText :: Text -- ^ The text you want to display.
  , textWidgetStyle :: Maybe Text -- ^ The style of text you want to display. You can only set values here that are defined under [**Content** > **In-App Messages**](https://fly.customer.io/env/last/in-app-messages).
  , textWidgetColor :: Maybe Text -- ^ The color you want to use for this content. You can only set values here that are defined under [**Content** > **In-App Messages**](https://fly.customer.io/env/last/in-app-messages).
  , textWidgetTextAlign :: Maybe Text -- ^ How you want to align this text.
  , textWidgetMaxLines :: Maybe Int -- ^ The maximum lines of text you want to display. Text over this limit is controlled by the `overflow` property. If unset, the message displays an unlimited number of lines.
  , textWidgetOverflow :: Maybe Text -- ^ Determines how to handle text that overflows the `maxLines` limit (if set). By default, we cut off overflowing text with ellipsis (`...`).
  } deriving (Show, Eq, Generic, Data)

instance FromJSON TextWidget where
  parseJSON = genericParseJSON optionsTextWidget
instance ToJSON TextWidget where
  toJSON = genericToJSON optionsTextWidget

optionsTextWidget :: Options
optionsTextWidget =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("textWidgetType", "type")
      , ("textWidgetText", "text")
      , ("textWidgetStyle", "style")
      , ("textWidgetColor", "color")
      , ("textWidgetTextAlign", "textAlign")
      , ("textWidgetMaxLines", "maxLines")
      , ("textWidgetOverflow", "overflow")
      ]


-- | The base properties shared across multiple metric types.
data TrackMetrics = TrackMetrics
  { trackMetricsDeliveryUnderscoreid :: Text -- ^ The CIO-Delivery-ID from the notification that you want to associate the `event` with.
  , trackMetricsTimestamp :: Maybe Int -- ^ The unix timestamp when the event occurred.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON TrackMetrics where
  parseJSON = genericParseJSON optionsTrackMetrics
instance ToJSON TrackMetrics where
  toJSON = genericToJSON optionsTrackMetrics

optionsTrackMetrics :: Options
optionsTrackMetrics =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("trackMetricsDeliveryUnderscoreid", "delivery_id")
      , ("trackMetricsTimestamp", "timestamp")
      ]


-- | 
data TransactionalActionObject = TransactionalActionObject
  { transactionalActionObjectId :: Maybe Int -- ^ The identifier for an action.
  , transactionalActionObjectName :: Maybe Text -- ^ The name of the transactional message.
  , transactionalActionObjectCreated :: Maybe Int -- ^ The date time when the referenced ID was created.
  , transactionalActionObjectUpdated :: Maybe Int -- ^ The date time when the referenced ID was last updated.
  , transactionalActionObjectBody :: Maybe Text -- ^ The body of the transactional message. You cannot modify the body if you created it with our drag-and-drop editor.
  , transactionalActionObjectLanguage :: Maybe Text -- ^ The language variant for your message. If you don't use our [localization feature](/localization), or this is the default message, this value is an empty string.
  , transactionalActionObjectType :: Maybe Text -- ^ The type of message.
  , transactionalActionObjectFrom :: Maybe Text -- ^ The address that the message is from, relevant if the action `type` is `email`.
  , transactionalActionObjectFromUnderscoreid :: Maybe Int -- ^ The identifier of the `from` address, commonly known as the \"sender\". You can [list your sender identities](#operation/listSenders) to match the ID to a specific address.
  , transactionalActionObjectReplyUnderscoreto :: Maybe Text -- ^ The address that receives replies for the message, if applicable.
  , transactionalActionObjectReplyUnderscoretoUnderscoreid :: Maybe Int -- ^ The identifier for the `reply_to` address, if applicable. You can [list your sender identities](#operation/listSenders) to match the ID to a specific address.
  , transactionalActionObjectPreprocessor :: Maybe Text -- ^ By default, we process CSS before emails leave Customer.io using Premailer. If your message included CSS and pre-processing is not disabled, this key indicates the pre-processor.
  , transactionalActionObjectRecipient :: Maybe Text -- ^ The recipient address for an action.
  , transactionalActionObjectSubject :: Maybe Text -- ^ The subject line for an `email` action.
  , transactionalActionObjectBcc :: Maybe Text -- ^ The blind-copy address(es) for this action.
  , transactionalActionObjectFakeUnderscorebcc :: Maybe Bool -- ^ If true, rather than sending true copies to BCC addresses, Customer.io sends a copy of the message with the subject line containing the recipient address(es). 
  , transactionalActionObjectPreheaderUnderscoretext :: Maybe Text -- ^ Also known as \"preview text\", this specifies the small block of text shown in an end-user's email inbox, next to, or underneath, the subject line.
  , transactionalActionObjectHeaders :: Maybe (Map.Map String Text) -- ^ An object containing headers, where the key is the header name and the value is the header value. Header names and values must be strings and cannot contain any non-ASCII characters or empty spaces. Some headers are reserved and cannot be overwritten.
  , transactionalActionObjectBodyUnderscoreamp :: Maybe Text -- ^ If your message is an email, this is the AMP-enabled body of your message. If your recipient's email client doesn't support AMP, the `body` represents your fallback message.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON TransactionalActionObject where
  parseJSON = genericParseJSON optionsTransactionalActionObject
instance ToJSON TransactionalActionObject where
  toJSON = genericToJSON optionsTransactionalActionObject

optionsTransactionalActionObject :: Options
optionsTransactionalActionObject =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("transactionalActionObjectId", "id")
      , ("transactionalActionObjectName", "name")
      , ("transactionalActionObjectCreated", "created")
      , ("transactionalActionObjectUpdated", "updated")
      , ("transactionalActionObjectBody", "body")
      , ("transactionalActionObjectLanguage", "language")
      , ("transactionalActionObjectType", "type")
      , ("transactionalActionObjectFrom", "from")
      , ("transactionalActionObjectFromUnderscoreid", "from_id")
      , ("transactionalActionObjectReplyUnderscoreto", "reply_to")
      , ("transactionalActionObjectReplyUnderscoretoUnderscoreid", "reply_to_id")
      , ("transactionalActionObjectPreprocessor", "preprocessor")
      , ("transactionalActionObjectRecipient", "recipient")
      , ("transactionalActionObjectSubject", "subject")
      , ("transactionalActionObjectBcc", "bcc")
      , ("transactionalActionObjectFakeUnderscorebcc", "fake_bcc")
      , ("transactionalActionObjectPreheaderUnderscoretext", "preheader_text")
      , ("transactionalActionObjectHeaders", "headers")
      , ("transactionalActionObjectBodyUnderscoreamp", "body_amp")
      ]


-- | 
data TransactionalMessage = TransactionalMessage
  { transactionalMessageCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , transactionalMessageDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , transactionalMessageIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , transactionalMessageTransactionalUnderscoremessageUnderscoreid :: Value -- ^ The transactional message template you used for your message.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON TransactionalMessage where
  parseJSON = genericParseJSON optionsTransactionalMessage
instance ToJSON TransactionalMessage where
  toJSON = genericToJSON optionsTransactionalMessage

optionsTransactionalMessage :: Options
optionsTransactionalMessage =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("transactionalMessageCustomerUnderscoreid", "customer_id")
      , ("transactionalMessageDeliveryUnderscoreid", "delivery_id")
      , ("transactionalMessageIdentifiers", "identifiers")
      , ("transactionalMessageTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      ]


-- | 
data TransactionalMessages200Response = TransactionalMessages200Response
  { transactionalMessages200ResponseMessages :: Maybe [BroadcastMessages200ResponseMessagesInner] -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON TransactionalMessages200Response where
  parseJSON = genericParseJSON optionsTransactionalMessages200Response
instance ToJSON TransactionalMessages200Response where
  toJSON = genericToJSON optionsTransactionalMessages200Response

optionsTransactionalMessages200Response :: Options
optionsTransactionalMessages200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("transactionalMessages200ResponseMessages", "messages")
      ]


-- | 
data TransactionalMetrics200Response = TransactionalMetrics200Response
  { transactionalMetrics200ResponseMetric :: Maybe TransactionalMetrics200ResponseMetric -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON TransactionalMetrics200Response where
  parseJSON = genericParseJSON optionsTransactionalMetrics200Response
instance ToJSON TransactionalMetrics200Response where
  toJSON = genericToJSON optionsTransactionalMetrics200Response

optionsTransactionalMetrics200Response :: Options
optionsTransactionalMetrics200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("transactionalMetrics200ResponseMetric", "metric")
      ]


-- | 
data TransactionalMetrics200ResponseMetric = TransactionalMetrics200ResponseMetric
  { transactionalMetrics200ResponseMetricSeries :: Maybe TransactionalMetrics200ResponseMetricSeries -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON TransactionalMetrics200ResponseMetric where
  parseJSON = genericParseJSON optionsTransactionalMetrics200ResponseMetric
instance ToJSON TransactionalMetrics200ResponseMetric where
  toJSON = genericToJSON optionsTransactionalMetrics200ResponseMetric

optionsTransactionalMetrics200ResponseMetric :: Options
optionsTransactionalMetrics200ResponseMetric =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("transactionalMetrics200ResponseMetricSeries", "series")
      ]


-- | Returns metrics in accordance with the resolution you requested. Each property in this object is an array and each entry in the array represents a metric period, i.e. if your &#x60;res&#x60; is days &#x60;[0, 1]&#x60; would represent 0 metrics for the first day, 1 for the second, etc.
data TransactionalMetrics200ResponseMetricSeries = TransactionalMetrics200ResponseMetricSeries
  { transactionalMetrics200ResponseMetricSeriesAttempted :: Maybe [Int] -- ^ The number of `attempted` messages.
  , transactionalMetrics200ResponseMetricSeriesBounced :: Maybe [Int] -- ^ The number of `bounced` messages.
  , transactionalMetrics200ResponseMetricSeriesClicked :: Maybe [Int] -- ^ The number of `clicked` messages.
  , transactionalMetrics200ResponseMetricSeriesHumanUnderscoreclicked :: Maybe [Int] -- ^ The number of `clicked` emails excluding machine clicks. This metric is reliable starting April 20, 2025. [Learn more](/journeys/analytics/#delivery-metrics).
  , transactionalMetrics200ResponseMetricSeriesPrefetchUnderscoreclicked :: Maybe [Int] -- ^ The number of `clicked` emails attributed to machines. This metric is reliable starting April 20, 2025.
  , transactionalMetrics200ResponseMetricSeriesConverted :: Maybe [Int] -- ^ The number of `converted` messages.
  , transactionalMetrics200ResponseMetricSeriesCreated :: Maybe [Int] -- ^ The number of `created` messages.
  , transactionalMetrics200ResponseMetricSeriesDeferred :: Maybe [Int] -- ^ The number of `deferred` messages.
  , transactionalMetrics200ResponseMetricSeriesDelivered :: Maybe [Int] -- ^ The number of `delivered` messages.
  , transactionalMetrics200ResponseMetricSeriesDrafted :: Maybe [Int] -- ^ The number of `drafted` messages.
  , transactionalMetrics200ResponseMetricSeriesFailed :: Maybe [Int] -- ^ The number of `failed` messages.
  , transactionalMetrics200ResponseMetricSeriesOpened :: Maybe [Int] -- ^ The number of `opened` messages.
  , transactionalMetrics200ResponseMetricSeriesHumanUnderscoreopened :: Maybe [Int] -- ^ The number of `opened` emails excluding machine opens. This metric is reliable starting March 20, 2025. [Learn more](/journeys/analytics/#delivery-metrics).
  , transactionalMetrics200ResponseMetricSeriesPrefetchUnderscoreopened :: Maybe [Int] -- ^ The number of `opened` emails attributed to machines. This metric is reliable starting March 20, 2025.
  , transactionalMetrics200ResponseMetricSeriesSent :: Maybe [Int] -- ^ The number of sent messages.
  , transactionalMetrics200ResponseMetricSeriesSpammed :: Maybe [Int] -- ^ The number of spam complaints.
  , transactionalMetrics200ResponseMetricSeriesSuppressed :: Maybe [Int] -- ^ The number of `suppressed` messages.
  , transactionalMetrics200ResponseMetricSeriesUndeliverable :: Maybe [Int] -- ^ The number of `undeliverable` messages.
  , transactionalMetrics200ResponseMetricSeriesTopicUnderscoreunsubscribed :: Maybe [Int] -- ^ The number of topic unsubscribes in a given period.
  , transactionalMetrics200ResponseMetricSeriesUnsubscribed :: Maybe [Int] -- ^ The number of unsubscribes attributed to the campaign or message.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON TransactionalMetrics200ResponseMetricSeries where
  parseJSON = genericParseJSON optionsTransactionalMetrics200ResponseMetricSeries
instance ToJSON TransactionalMetrics200ResponseMetricSeries where
  toJSON = genericToJSON optionsTransactionalMetrics200ResponseMetricSeries

optionsTransactionalMetrics200ResponseMetricSeries :: Options
optionsTransactionalMetrics200ResponseMetricSeries =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("transactionalMetrics200ResponseMetricSeriesAttempted", "attempted")
      , ("transactionalMetrics200ResponseMetricSeriesBounced", "bounced")
      , ("transactionalMetrics200ResponseMetricSeriesClicked", "clicked")
      , ("transactionalMetrics200ResponseMetricSeriesHumanUnderscoreclicked", "human_clicked")
      , ("transactionalMetrics200ResponseMetricSeriesPrefetchUnderscoreclicked", "prefetch_clicked")
      , ("transactionalMetrics200ResponseMetricSeriesConverted", "converted")
      , ("transactionalMetrics200ResponseMetricSeriesCreated", "created")
      , ("transactionalMetrics200ResponseMetricSeriesDeferred", "deferred")
      , ("transactionalMetrics200ResponseMetricSeriesDelivered", "delivered")
      , ("transactionalMetrics200ResponseMetricSeriesDrafted", "drafted")
      , ("transactionalMetrics200ResponseMetricSeriesFailed", "failed")
      , ("transactionalMetrics200ResponseMetricSeriesOpened", "opened")
      , ("transactionalMetrics200ResponseMetricSeriesHumanUnderscoreopened", "human_opened")
      , ("transactionalMetrics200ResponseMetricSeriesPrefetchUnderscoreopened", "prefetch_opened")
      , ("transactionalMetrics200ResponseMetricSeriesSent", "sent")
      , ("transactionalMetrics200ResponseMetricSeriesSpammed", "spammed")
      , ("transactionalMetrics200ResponseMetricSeriesSuppressed", "suppressed")
      , ("transactionalMetrics200ResponseMetricSeriesUndeliverable", "undeliverable")
      , ("transactionalMetrics200ResponseMetricSeriesTopicUnderscoreunsubscribed", "topic_unsubscribed")
      , ("transactionalMetrics200ResponseMetricSeriesUnsubscribed", "unsubscribed")
      ]


-- | Contains information about a transactional message.
data TransactionalObject = TransactionalObject
  { transactionalObjectId :: Maybe Int -- ^ The identifier Customer.io assigned to the transactional message
  , transactionalObjectName :: Maybe Text -- ^ The name you set for the transactional message.
  , transactionalObjectDescription :: Maybe Text -- ^ A description of the transactional message.
  , transactionalObjectSendUnderscoretoUnderscoreunsubscribed :: Maybe Bool -- ^ If true, people with an `unsubscribed` attribute set to `true` can trigger the message.
  , transactionalObjectLinkUnderscoretracking :: Maybe Bool -- ^ If true, link tracking is enabled for this message.
  , transactionalObjectOpenUnderscoretracking :: Maybe Bool -- ^ If true, open-tracking is enabled for this message.
  , transactionalObjectHideUnderscoremessageUnderscorebody :: Maybe Bool -- ^ If true, message contents are not retained in delivery history—you cannot recall the exact contents of the message.
  , transactionalObjectQueueUnderscoredrafts :: Maybe Bool -- ^ If true, messages do not send automatically, and queue as drafts instead. You must send drafts through the *Deliveries & Drafts* page in the user interface.
  , transactionalObjectCreatedUnderscoreat :: Maybe Int -- ^ The date time when the referenced ID was created.
  , transactionalObjectUpdatedUnderscoreat :: Maybe Int -- ^ The date time when the referenced ID was last updated.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON TransactionalObject where
  parseJSON = genericParseJSON optionsTransactionalObject
instance ToJSON TransactionalObject where
  toJSON = genericToJSON optionsTransactionalObject

optionsTransactionalObject :: Options
optionsTransactionalObject =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("transactionalObjectId", "id")
      , ("transactionalObjectName", "name")
      , ("transactionalObjectDescription", "description")
      , ("transactionalObjectSendUnderscoretoUnderscoreunsubscribed", "send_to_unsubscribed")
      , ("transactionalObjectLinkUnderscoretracking", "link_tracking")
      , ("transactionalObjectOpenUnderscoretracking", "open_tracking")
      , ("transactionalObjectHideUnderscoremessageUnderscorebody", "hide_message_body")
      , ("transactionalObjectQueueUnderscoredrafts", "queue_drafts")
      , ("transactionalObjectCreatedUnderscoreat", "created_at")
      , ("transactionalObjectUpdatedUnderscoreat", "updated_at")
      ]


-- | 
data TransactionalSharedEmailObject = TransactionalSharedEmailObject
  { transactionalSharedEmailObjectTo :: Maybe Text -- ^ The message recipient(s). Supports multiple addresses separated by commas. Your request can contain up to 15 total recipients between the `to` and `bcc` keys.  You can include a display or \"friendly\" name in \"to\" address, but we recommend that you use quotation marks around the friendly name to avoid potential issues with special characters, e.g. `\\\"Person\\\" <person@example.com>`.             
  , transactionalSharedEmailObjectBcc :: Maybe Text -- ^ Blind copy message recipients. Supports multiple addresses separated by commas. Your request can contain up to 15 total recipients between the `to` and `bcc` keys.
  , transactionalSharedEmailObjectFakeUnderscorebcc :: Maybe Bool -- ^ If true, rather than sending true copies to BCC addresses, Customer.io sends a copy of the message with the subject line containing the recipient address(es). 
  , transactionalSharedEmailObjectReplyUnderscoreto :: Maybe Text -- ^ The address that recipients can reply to, if different from the `from` address.
  , transactionalSharedEmailObjectPreheader :: Maybe Text -- ^ Also known as \"preview text\", this is the block block of text that users see next to, or underneath, the subject line in their inbox.
  , transactionalSharedEmailObjectBodyUnderscoreplain :: Maybe Text -- ^ By default, we generate a plaintext version of your message body for each delivery. Use this key to override the default plain text body.
  , transactionalSharedEmailObjectAttachments :: Maybe WithTemplateAllOfAttachments -- ^ 
  , transactionalSharedEmailObjectHeaders :: Maybe (Map.Map String Text) -- ^ An object containing headers, where the key is the header name and the value is the header value. Header names and values must be strings and cannot contain any non-ASCII characters or empty spaces. Some headers are reserved and cannot be overwritten.
  , transactionalSharedEmailObjectDisableUnderscorecssUnderscorepreprocessing :: Maybe Bool -- ^ Set to `true` to disable CSS preprocessing. This setting overrides the CSS preprocessing setting on the `transactional_message_id` as set in the user interface. Transactional emails have CSS preprocessing enabled by default.
  , transactionalSharedEmailObjectTracked :: Maybe Bool -- ^ If true, Customer.io tracks opens and link clicks in your message.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON TransactionalSharedEmailObject where
  parseJSON = genericParseJSON optionsTransactionalSharedEmailObject
instance ToJSON TransactionalSharedEmailObject where
  toJSON = genericToJSON optionsTransactionalSharedEmailObject

optionsTransactionalSharedEmailObject :: Options
optionsTransactionalSharedEmailObject =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("transactionalSharedEmailObjectTo", "to")
      , ("transactionalSharedEmailObjectBcc", "bcc")
      , ("transactionalSharedEmailObjectFakeUnderscorebcc", "fake_bcc")
      , ("transactionalSharedEmailObjectReplyUnderscoreto", "reply_to")
      , ("transactionalSharedEmailObjectPreheader", "preheader")
      , ("transactionalSharedEmailObjectBodyUnderscoreplain", "body_plain")
      , ("transactionalSharedEmailObjectAttachments", "attachments")
      , ("transactionalSharedEmailObjectHeaders", "headers")
      , ("transactionalSharedEmailObjectDisableUnderscorecssUnderscorepreprocessing", "disable_css_preprocessing")
      , ("transactionalSharedEmailObjectTracked", "tracked")
      ]


-- | 
data TransactionalSharedObject = TransactionalSharedObject
  { transactionalSharedObjectIdentifiers :: WithTemplateAllOfIdentifiers -- ^ 
  , transactionalSharedObjectMessageUnderscoredata :: Maybe (Map.Map String Value) -- ^ An object containing the key-value pairs referenced using liquid in your message.
  , transactionalSharedObjectSendUnderscoreat :: Maybe Int -- ^ A unix timestamp (seconds since epoch) determining when the message will be sent. The timestamp can be up to 90 days in the future. If this value is in the past, your message is sent immediately.
  , transactionalSharedObjectDisableUnderscoremessageUnderscoreretention :: Maybe Bool -- ^ If true, the message body is not retained in delivery history. Setting this value overrides the value set in the settings of your `transactional_message_id`.
  , transactionalSharedObjectSendUnderscoretoUnderscoreunsubscribed :: Maybe Bool -- ^ If false, your message is not sent to unsubscribed recipients. Setting this value overrides the value set in the settings of your `transactional_message_id`.
  , transactionalSharedObjectQueueUnderscoredraft :: Maybe Bool -- ^ If true, your transactional message is held as a draft in Customer.io and not sent directly to your audience. You must go to the Deliveries and Drafts page to send your message.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON TransactionalSharedObject where
  parseJSON = genericParseJSON optionsTransactionalSharedObject
instance ToJSON TransactionalSharedObject where
  toJSON = genericToJSON optionsTransactionalSharedObject

optionsTransactionalSharedObject :: Options
optionsTransactionalSharedObject =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("transactionalSharedObjectIdentifiers", "identifiers")
      , ("transactionalSharedObjectMessageUnderscoredata", "message_data")
      , ("transactionalSharedObjectSendUnderscoreat", "send_at")
      , ("transactionalSharedObjectDisableUnderscoremessageUnderscoreretention", "disable_message_retention")
      , ("transactionalSharedObjectSendUnderscoretoUnderscoreunsubscribed", "send_to_unsubscribed")
      , ("transactionalSharedObjectQueueUnderscoredraft", "queue_draft")
      ]


-- | 
data TransactionalSharedPushObject = TransactionalSharedPushObject
  { transactionalSharedPushObjectTo :: Maybe Text -- ^ The person's device(s) you want to send this push to. One of `all`, `last_used`, or a custom device token which belongs to the profile from the Identifiers block. Defaults to 'all'. This overrides To from the transactional template (referenced by `transactional_message_id`).
  , transactionalSharedPushObjectTitle :: Maybe Text -- ^ The title for your notification. This overrides the title of the transactional template (referenced by `transactional_message_id`).
  , transactionalSharedPushObjectMessage :: Maybe Text -- ^ The message body for your notification. This overrides the notification body of the transactional template (referenced by `transactional_message_id`).
  , transactionalSharedPushObjectImageUnderscoreurl :: Maybe Text -- ^ An image URL to show in the push. This overrides Image from the transactional template (referenced by `transactional_message_id`).
  , transactionalSharedPushObjectLink :: Maybe Text -- ^ A deep link to open when the push is tapped. This overrides Link from the transactional template (referenced by `transactional_message_id`).
  , transactionalSharedPushObjectSound :: Maybe Text -- ^ **For iOS Only**: your notification can alert users with the device's default notification sound or play no sound at all.  
  , transactionalSharedPushObjectCustomUnderscoredata :: Maybe Value -- ^ An optional list of key/value pairs to attach to the push payload. Due to a Firebase limitation we only support sending string key value pairs. This overrides Custom Data from the transactional template (referenced by `transactional_message_id`).
  , transactionalSharedPushObjectCustomUnderscoredevice :: Maybe SendPushRequestAllOfCustomDevice -- ^ 
  , transactionalSharedPushObjectCustomUnderscorepayload :: Maybe SendPushRequestAllOfCustomPayload -- ^ 
  , transactionalSharedPushObjectLanguage :: Maybe Text -- ^ Overrides language preferences for the person you want to send your transactional message to. Use one of our [supported two- or four-letter language codes](/localization-getting-started/#supported-languages).
  } deriving (Show, Eq, Generic, Data)

instance FromJSON TransactionalSharedPushObject where
  parseJSON = genericParseJSON optionsTransactionalSharedPushObject
instance ToJSON TransactionalSharedPushObject where
  toJSON = genericToJSON optionsTransactionalSharedPushObject

optionsTransactionalSharedPushObject :: Options
optionsTransactionalSharedPushObject =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("transactionalSharedPushObjectTo", "to")
      , ("transactionalSharedPushObjectTitle", "title")
      , ("transactionalSharedPushObjectMessage", "message")
      , ("transactionalSharedPushObjectImageUnderscoreurl", "image_url")
      , ("transactionalSharedPushObjectLink", "link")
      , ("transactionalSharedPushObjectSound", "sound")
      , ("transactionalSharedPushObjectCustomUnderscoredata", "custom_data")
      , ("transactionalSharedPushObjectCustomUnderscoredevice", "custom_device")
      , ("transactionalSharedPushObjectCustomUnderscorepayload", "custom_payload")
      , ("transactionalSharedPushObjectLanguage", "language")
      ]


-- | 
data TriggerBroadcast200Response = TriggerBroadcast200Response
  { triggerBroadcast200ResponseId :: Maybe Int -- ^ The `trigger_id` for this operation. You can use this ID to get the status of your broadcast or [check for errors](#operation/broadcastErrors).
  } deriving (Show, Eq, Generic, Data)

instance FromJSON TriggerBroadcast200Response where
  parseJSON = genericParseJSON optionsTriggerBroadcast200Response
instance ToJSON TriggerBroadcast200Response where
  toJSON = genericToJSON optionsTriggerBroadcast200Response

optionsTriggerBroadcast200Response :: Options
optionsTriggerBroadcast200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("triggerBroadcast200ResponseId", "id")
      ]


-- | 
data TriggerBroadcast422Response = TriggerBroadcast422Response
  { triggerBroadcast422ResponseErrors :: Maybe [TriggerBroadcast422ResponseErrorsInner] -- ^ Contains one or more validation errors found in your request payload.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON TriggerBroadcast422Response where
  parseJSON = genericParseJSON optionsTriggerBroadcast422Response
instance ToJSON TriggerBroadcast422Response where
  toJSON = genericToJSON optionsTriggerBroadcast422Response

optionsTriggerBroadcast422Response :: Options
optionsTriggerBroadcast422Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("triggerBroadcast422ResponseErrors", "errors")
      ]


-- | 
data TriggerBroadcast422ResponseErrorsInner = TriggerBroadcast422ResponseErrorsInner
  { triggerBroadcast422ResponseErrorsInnerDetail :: Maybe Text -- ^ Describes the error and provides the trigger ID you can use to look up more information.
  , triggerBroadcast422ResponseErrorsInnerSource :: Maybe TriggerBroadcast422ResponseErrorsInnerSource -- ^ 
  , triggerBroadcast422ResponseErrorsInnerStatus :: Maybe Text -- ^ The error code.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON TriggerBroadcast422ResponseErrorsInner where
  parseJSON = genericParseJSON optionsTriggerBroadcast422ResponseErrorsInner
instance ToJSON TriggerBroadcast422ResponseErrorsInner where
  toJSON = genericToJSON optionsTriggerBroadcast422ResponseErrorsInner

optionsTriggerBroadcast422ResponseErrorsInner :: Options
optionsTriggerBroadcast422ResponseErrorsInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("triggerBroadcast422ResponseErrorsInnerDetail", "detail")
      , ("triggerBroadcast422ResponseErrorsInnerSource", "source")
      , ("triggerBroadcast422ResponseErrorsInnerStatus", "status")
      ]


-- | 
data TriggerBroadcast422ResponseErrorsInnerSource = TriggerBroadcast422ResponseErrorsInnerSource
  { triggerBroadcast422ResponseErrorsInnerSourcePointer :: Maybe Text -- ^ Points to the key in your payload that contained validation errors.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON TriggerBroadcast422ResponseErrorsInnerSource where
  parseJSON = genericParseJSON optionsTriggerBroadcast422ResponseErrorsInnerSource
instance ToJSON TriggerBroadcast422ResponseErrorsInnerSource where
  toJSON = genericToJSON optionsTriggerBroadcast422ResponseErrorsInnerSource

optionsTriggerBroadcast422ResponseErrorsInnerSource :: Options
optionsTriggerBroadcast422ResponseErrorsInnerSource =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("triggerBroadcast422ResponseErrorsInnerSourcePointer", "pointer")
      ]


-- | 
data TriggerBroadcastRequest = TriggerBroadcastRequest
  { triggerBroadcastRequestData :: Maybe (Map.Map String Value) -- ^ Contains information you want to use to populate your broadcast.
  , triggerBroadcastRequestEmailUnderscoreaddUnderscoreduplicates :: Maybe Bool -- ^ an email address associated with more than one profile id is an error.
  , triggerBroadcastRequestEmailUnderscoreignoreUnderscoremissing :: Maybe Bool -- ^ If false a missing email address is an error.
  , triggerBroadcastRequestIdUnderscoreignoreUnderscoremissing :: Maybe Bool -- ^ If false, a missing customer ID is an error.
  , triggerBroadcastRequestRecipients :: AudienceFilter -- ^ 
  , triggerBroadcastRequestEmails :: [Text] -- ^ An array of email addresses you want to send the broadcast to. These addresses must already exist; your request cannot create a new person.
  , triggerBroadcastRequestIds :: [Text] -- ^ An array of IDs you want to send a broadcast to. **NOTE**: If your workspace identifies people by `email`, don't use this option. Identify your audience by `emails` instead. 
  , triggerBroadcastRequestPerUnderscoreuserUnderscoredata :: [UserMapsAllOfPerUserDataInner] -- ^ An array of people you want to send a broadcast to and custom data for each person. Each object in the array represents a person, with additional data you want to use to personalize their message. **When you trigger a broadcast, the people in your request must already exist in your workspace.** Requests to trigger a broadcast cannot create new people. 
  , triggerBroadcastRequestDataUnderscorefileUnderscoreurl :: Text -- ^ The URL of a data file containing per-user data. Each line is a single object representing a person: either a json map of `id` and `data` or `email` and `data` keys. For example, `{\"email\":\"road@runner.net\",\"data\":{\"voucher_code\": \"coyote\"}}`.  The IDs or emails in your data file must already exist in your workspace. Your broadcast cannot add new people to your workspace and won't send messages for IDs or email addresses that don't match a person in your workspace. 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON TriggerBroadcastRequest where
  parseJSON = genericParseJSON optionsTriggerBroadcastRequest
instance ToJSON TriggerBroadcastRequest where
  toJSON = genericToJSON optionsTriggerBroadcastRequest

optionsTriggerBroadcastRequest :: Options
optionsTriggerBroadcastRequest =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("triggerBroadcastRequestData", "data")
      , ("triggerBroadcastRequestEmailUnderscoreaddUnderscoreduplicates", "email_add_duplicates")
      , ("triggerBroadcastRequestEmailUnderscoreignoreUnderscoremissing", "email_ignore_missing")
      , ("triggerBroadcastRequestIdUnderscoreignoreUnderscoremissing", "id_ignore_missing")
      , ("triggerBroadcastRequestRecipients", "recipients")
      , ("triggerBroadcastRequestEmails", "emails")
      , ("triggerBroadcastRequestIds", "ids")
      , ("triggerBroadcastRequestPerUnderscoreuserUnderscoredata", "per_user_data")
      , ("triggerBroadcastRequestDataUnderscorefileUnderscoreurl", "data_file_url")
      ]


-- | 
data Undeliverable = Undeliverable
  { undeliverableEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , undeliverableObjectUnderscoretype :: Text -- ^ The event relates to an in-app message.
  , undeliverableTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , undeliverableMetric :: Text -- ^ A message was undeliverable. Undeliverable messages are messages that have either hit a message limit, come from a newsletter that was cancelled or deleted, or an environment that has delivery disabled (which is something you might do if you’re testing an integration). If you’re not using message limits, you probably won’t see this event.
  , undeliverableData :: Attempted2AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Undeliverable where
  parseJSON = genericParseJSON optionsUndeliverable
instance ToJSON Undeliverable where
  toJSON = genericToJSON optionsUndeliverable

optionsUndeliverable :: Options
optionsUndeliverable =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("undeliverableEventUnderscoreid", "event_id")
      , ("undeliverableObjectUnderscoretype", "object_type")
      , ("undeliverableTimestamp", "timestamp")
      , ("undeliverableMetric", "metric")
      , ("undeliverableData", "data")
      ]


-- | 
data Undeliverable1 = Undeliverable1
  { undeliverable1EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , undeliverable1ObjectUnderscoretype :: Text -- ^ The event relates to an in-app message.
  , undeliverable1Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , undeliverable1Metric :: Text -- ^ A message was undeliverable. Undeliverable messages are messages that have either hit a message limit, come from a newsletter that was cancelled or deleted, or an environment that has delivery disabled (which is something you might do if you’re testing an integration). If you’re not using message limits, you probably won’t see this event.
  , undeliverable1Data :: WebhookUndeliverableAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Undeliverable1 where
  parseJSON = genericParseJSON optionsUndeliverable1
instance ToJSON Undeliverable1 where
  toJSON = genericToJSON optionsUndeliverable1

optionsUndeliverable1 :: Options
optionsUndeliverable1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("undeliverable1EventUnderscoreid", "event_id")
      , ("undeliverable1ObjectUnderscoretype", "object_type")
      , ("undeliverable1Timestamp", "timestamp")
      , ("undeliverable1Metric", "metric")
      , ("undeliverable1Data", "data")
      ]


-- | A person unsubscribed to messages from you—their &#x60;unsubscribed&#x60; attribute was set to &#x60;true&#x60;.
data Unsubscribed = Unsubscribed
  { unsubscribedMetric :: Text -- ^ The metric recorded by the event. For `customer` events, this is whether the customer explicitly subscribed or unsubscribed.
  , unsubscribedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , unsubscribedObjectUnderscoretype :: Text -- ^ The event represents a customer subscribing, unsubscribing, or changing their subscription preferences.
  , unsubscribedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , unsubscribedData :: SubscribedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Unsubscribed where
  parseJSON = genericParseJSON optionsUnsubscribed
instance ToJSON Unsubscribed where
  toJSON = genericToJSON optionsUnsubscribed

optionsUnsubscribed :: Options
optionsUnsubscribed =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("unsubscribedMetric", "metric")
      , ("unsubscribedEventUnderscoreid", "event_id")
      , ("unsubscribedObjectUnderscoretype", "object_type")
      , ("unsubscribedTimestamp", "timestamp")
      , ("unsubscribedData", "data")
      ]


-- | 
data Unsubscribed1 = Unsubscribed1
  { unsubscribed1EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , unsubscribed1ObjectUnderscoretype :: Text -- ^ The event relates to an email action.
  , unsubscribed1Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , unsubscribed1Metric :: Text -- ^ The recipient unsubscribed based on a particular message.
  , unsubscribed1Data :: DraftedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Unsubscribed1 where
  parseJSON = genericParseJSON optionsUnsubscribed1
instance ToJSON Unsubscribed1 where
  toJSON = genericToJSON optionsUnsubscribed1

optionsUnsubscribed1 :: Options
optionsUnsubscribed1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("unsubscribed1EventUnderscoreid", "event_id")
      , ("unsubscribed1ObjectUnderscoretype", "object_type")
      , ("unsubscribed1Timestamp", "timestamp")
      , ("unsubscribed1Metric", "metric")
      , ("unsubscribed1Data", "data")
      ]


-- | Unsuppress a person&#39;s identifier(s) in Customer.io, so that you can message a person or add their identifiers back to your workspace. This does not unsuppress addresses that were previously suppressed by your email provider.
data Unsuppress = Unsuppress
  { unsuppressType :: Text -- ^ The operation modifies a person in Customer.io
  , unsuppressIdentifiers :: Identify1AllOfIdentifiers -- ^ 
  , unsuppressAction :: Text -- ^ Unsuppress a person's identifier(s) in Customer.io, so that you can message a person or add their identifiers back to your workspace. This does not unsuppress addresses that were previously suppressed by your email provider.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Unsuppress where
  parseJSON = genericParseJSON optionsUnsuppress
instance ToJSON Unsuppress where
  toJSON = genericToJSON optionsUnsuppress

optionsUnsuppress :: Options
optionsUnsuppress =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("unsuppressType", "type")
      , ("unsuppressIdentifiers", "identifiers")
      , ("unsuppressAction", "action")
      ]


-- | 
data UpdateCollectionRequest = UpdateCollectionRequest
  { updateCollectionRequestName :: Maybe Text -- ^ The name of the collection. This is how you'll reference your collection in messages—`{{collection_name.data-property}}`.
  , updateCollectionRequestData :: Maybe [(Map.Map String Value)] -- ^ An array of data objects that you want to reference in this collection.
  , updateCollectionRequestUrl :: Maybe Text -- ^ The URL for your CSV or JSON data. If your URL does not return a `Content-Type`, we use the file extension; otherwise, Customer.io assumes your data is JSON. 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON UpdateCollectionRequest where
  parseJSON = genericParseJSON optionsUpdateCollectionRequest
instance ToJSON UpdateCollectionRequest where
  toJSON = genericToJSON optionsUpdateCollectionRequest

optionsUpdateCollectionRequest :: Options
optionsUpdateCollectionRequest =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("updateCollectionRequestName", "name")
      , ("updateCollectionRequestData", "data")
      , ("updateCollectionRequestUrl", "url")
      ]


-- | 
data UpdateSnippets200Response = UpdateSnippets200Response
  { updateSnippets200ResponseSnippet :: Maybe ListSnippets200ResponseSnippetsInner -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON UpdateSnippets200Response where
  parseJSON = genericParseJSON optionsUpdateSnippets200Response
instance ToJSON UpdateSnippets200Response where
  toJSON = genericToJSON optionsUpdateSnippets200Response

optionsUpdateSnippets200Response :: Options
optionsUpdateSnippets200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("updateSnippets200ResponseSnippet", "snippet")
      ]


-- | 
data UpdateTransactional200Response = UpdateTransactional200Response
  { updateTransactional200ResponseContent :: Maybe [ListTransactionalVariants200ResponseContentsInner] -- ^ The object includes the transactional message content and metadata.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON UpdateTransactional200Response where
  parseJSON = genericParseJSON optionsUpdateTransactional200Response
instance ToJSON UpdateTransactional200Response where
  toJSON = genericToJSON optionsUpdateTransactional200Response

optionsUpdateTransactional200Response :: Options
optionsUpdateTransactional200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("updateTransactional200ResponseContent", "content")
      ]


-- | 
data UpdateTransactionalVariant200Response = UpdateTransactionalVariant200Response
  { updateTransactionalVariant200ResponseContent :: Maybe [ListTransactionalVariants200ResponseContentsInner] -- ^ Each object represents one of the variants.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON UpdateTransactionalVariant200Response where
  parseJSON = genericParseJSON optionsUpdateTransactionalVariant200Response
instance ToJSON UpdateTransactionalVariant200Response where
  toJSON = genericToJSON optionsUpdateTransactionalVariant200Response

optionsUpdateTransactionalVariant200Response :: Options
optionsUpdateTransactionalVariant200Response =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("updateTransactionalVariant200ResponseContent", "content")
      ]


-- | An array of JSON objects containing &#x60;id&#x60; or &#x60;email&#x60; keys and a &#x60;data&#x60; key. Each object represents a person you want to send the broadcast to and data you want to personalize their message with using liquid.
data UserMaps = UserMaps
  { userMapsPerUnderscoreuserUnderscoredata :: [UserMapsAllOfPerUserDataInner] -- ^ An array of people you want to send a broadcast to and custom data for each person. Each object in the array represents a person, with additional data you want to use to personalize their message. **When you trigger a broadcast, the people in your request must already exist in your workspace.** Requests to trigger a broadcast cannot create new people. 
  , userMapsData :: Maybe (Map.Map String Value) -- ^ Contains information you want to use to populate your broadcast.
  , userMapsEmailUnderscoreaddUnderscoreduplicates :: Maybe Bool -- ^ an email address associated with more than one profile id is an error.
  , userMapsEmailUnderscoreignoreUnderscoremissing :: Maybe Bool -- ^ If false a missing email address is an error.
  , userMapsIdUnderscoreignoreUnderscoremissing :: Maybe Bool -- ^ If false, a missing customer ID is an error.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON UserMaps where
  parseJSON = genericParseJSON optionsUserMaps
instance ToJSON UserMaps where
  toJSON = genericToJSON optionsUserMaps

optionsUserMaps :: Options
optionsUserMaps =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("userMapsPerUnderscoreuserUnderscoredata", "per_user_data")
      , ("userMapsData", "data")
      , ("userMapsEmailUnderscoreaddUnderscoreduplicates", "email_add_duplicates")
      , ("userMapsEmailUnderscoreignoreUnderscoremissing", "email_ignore_missing")
      , ("userMapsIdUnderscoreignoreUnderscoremissing", "id_ignore_missing")
      ]


-- | 
data UserMapsAllOfPerUserDataInner = UserMapsAllOfPerUserDataInner
  { userMapsAllOfPerUserDataInnerId :: Text -- ^ The ID of the recipient.
  , userMapsAllOfPerUserDataInnerData :: Maybe (Map.Map String Value) -- ^ Merge data associated with the recipient.
  , userMapsAllOfPerUserDataInnerEmail :: Text -- ^ The email address of the recipient. This address must be unique in your workspace. If more than one person has the same `email` attribute, your request will produce an error.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON UserMapsAllOfPerUserDataInner where
  parseJSON = genericParseJSON optionsUserMapsAllOfPerUserDataInner
instance ToJSON UserMapsAllOfPerUserDataInner where
  toJSON = genericToJSON optionsUserMapsAllOfPerUserDataInner

optionsUserMapsAllOfPerUserDataInner :: Options
optionsUserMapsAllOfPerUserDataInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("userMapsAllOfPerUserDataInnerId", "id")
      , ("userMapsAllOfPerUserDataInnerData", "data")
      , ("userMapsAllOfPerUserDataInnerEmail", "email")
      ]


-- | Describes relationships to an entity—a non-person object in Customer.io, like a company, educational course, job board, etc.
data V1CioRelationships = V1CioRelationships
  { v1CioRelationshipsAction :: Maybe Text -- ^ This determines whether the `relationships` array adds relationships to a person or removes them from a person.
  , v1CioRelationshipsRelationships :: Maybe [V1CioRelationshipsRelationshipsInner] -- ^ Each object in the array represents a relationship you want to add to, or remove from, a person.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON V1CioRelationships where
  parseJSON = genericParseJSON optionsV1CioRelationships
instance ToJSON V1CioRelationships where
  toJSON = genericToJSON optionsV1CioRelationships

optionsV1CioRelationships :: Options
optionsV1CioRelationships =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("v1CioRelationshipsAction", "action")
      , ("v1CioRelationshipsRelationships", "relationships")
      ]


-- | 
data V1CioRelationshipsRelationshipsInner = V1CioRelationshipsRelationshipsInner
  { v1CioRelationshipsRelationshipsInnerIdentifiers :: Maybe ObjectCommonAllOfIdentifiers -- ^ 
  , v1CioRelationshipsRelationshipsInnerRelationshipUnderscoreattributes :: Maybe (Map.Map String Value) -- ^ The attributes associated with a relationship. Passing null or an empty string removes the attribute from the relationship. 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON V1CioRelationshipsRelationshipsInner where
  parseJSON = genericParseJSON optionsV1CioRelationshipsRelationshipsInner
instance ToJSON V1CioRelationshipsRelationshipsInner where
  toJSON = genericToJSON optionsV1CioRelationshipsRelationshipsInner

optionsV1CioRelationshipsRelationshipsInner :: Options
optionsV1CioRelationshipsRelationshipsInner =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("v1CioRelationshipsRelationshipsInnerIdentifiers", "identifiers")
      , ("v1CioRelationshipsRelationshipsInnerRelationshipUnderscoreattributes", "relationship_attributes")
      ]


-- | 
data Webhook = Webhook
  { webhookId :: Maybe Int -- ^ The identifier for an action.
  , webhookBroadcastUnderscoreid :: Maybe Int -- ^ The identifier for a broadcast.
  , webhookDeduplicateUnderscoreid :: Maybe Text -- ^ An identifier in the format `id:timestamp` where the id is the id of the object you are working with (Campaigns, Deliveries, Exports, Identities, Newsletters, Segments, and Templates), and the timestamp is the last time the object was updated.
  , webhookName :: Maybe Text -- ^ The name of the action, if it exists.
  , webhookLayout :: Maybe Text -- ^ The layout used for the action, if it exists.
  , webhookCreated :: Maybe Int -- ^ The date time when the referenced ID was created.
  , webhookUpdated :: Maybe Int -- ^ The date time when the referenced ID was last updated.
  , webhookBody :: Maybe Text -- ^ The body of the action. You cannot modify the body if you created it with our drag-and-drop editor.
  , webhookType :: Maybe Text -- ^ The type of action.
  , webhookUrl :: Maybe Text -- ^ The URL to send a webhook to, applies to `webhook` type actions.
  , webhookHeaders :: Maybe (Map.Map String Text) -- ^ An object containing headers, where the key is the header name and the value is the header value. Header names and values must be strings and cannot contain any non-ASCII characters or empty spaces. Some headers are reserved and cannot be overwritten.
  , webhookMethod :: Maybe Text -- ^ The HTTP method for your webhook.
  , webhookSendingUnderscorestate :: Maybe Text -- ^ Determines the sending behavior for the action. `automatic` sends the action automatically when triggered; `draft` queues drafts when the action is triggered; or `off` to disable the action.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Webhook where
  parseJSON = genericParseJSON optionsWebhook
instance ToJSON Webhook where
  toJSON = genericToJSON optionsWebhook

optionsWebhook :: Options
optionsWebhook =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("webhookId", "id")
      , ("webhookBroadcastUnderscoreid", "broadcast_id")
      , ("webhookDeduplicateUnderscoreid", "deduplicate_id")
      , ("webhookName", "name")
      , ("webhookLayout", "layout")
      , ("webhookCreated", "created")
      , ("webhookUpdated", "updated")
      , ("webhookBody", "body")
      , ("webhookType", "type")
      , ("webhookUrl", "url")
      , ("webhookHeaders", "headers")
      , ("webhookMethod", "method")
      , ("webhookSendingUnderscorestate", "sending_state")
      ]


-- | 
data Webhook1 = Webhook1
  { webhook1Id :: Maybe Int -- ^ The identifier for a campaign.
  , webhook1DeduplicateUnderscoreid :: Maybe Text -- ^ An identifier in the format `id:timestamp` where the id is the id of the object you are working with (Campaigns, Deliveries, Exports, Identities, Newsletters, Segments, and Templates), and the timestamp is the last time the object was updated.
  , webhook1Name :: Maybe Text -- ^ The name of the campaign.
  , webhook1Type :: Maybe Text -- ^ The type of campaign trigger. **Sunsetting on March 30, 2025**
  , webhook1Created :: Maybe Int -- ^ The date time when the referenced ID was created.
  , webhook1Updated :: Maybe Int -- ^ The date time when the referenced ID was last updated.
  , webhook1Active :: Maybe Bool -- ^ If true, the campaign is active and can still send messages.
  , webhook1State :: Maybe Text -- ^ The status of the campaign.
  , webhook1Actions :: Maybe [SegmentActionsInner] -- ^ An array of actions contained within the campaign.
  , webhook1FirstUnderscorestarted :: Maybe Int -- ^ The date and time when you first started the campaign and it first became eligible to be triggered.
  , webhook1Tags :: Maybe [Text] -- ^ An array of tags you set on this campaign.
  , webhook1WebhookUnderscoreid :: Maybe Int -- ^ The ID of the webhook trigger generated by Customer.io.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Webhook1 where
  parseJSON = genericParseJSON optionsWebhook1
instance ToJSON Webhook1 where
  toJSON = genericToJSON optionsWebhook1

optionsWebhook1 :: Options
optionsWebhook1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("webhook1Id", "id")
      , ("webhook1DeduplicateUnderscoreid", "deduplicate_id")
      , ("webhook1Name", "name")
      , ("webhook1Type", "type")
      , ("webhook1Created", "created")
      , ("webhook1Updated", "updated")
      , ("webhook1Active", "active")
      , ("webhook1State", "state")
      , ("webhook1Actions", "actions")
      , ("webhook1FirstUnderscorestarted", "first_started")
      , ("webhook1Tags", "tags")
      , ("webhook1WebhookUnderscoreid", "webhook_id")
      ]


-- | 
data Webhook2 = Webhook2
  { webhook2Id :: Maybe Int -- ^ The identifier for an action.
  , webhook2CampaignUnderscoreid :: Maybe Int -- ^ The identifier for a campaign.
  , webhook2ParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , webhook2DeduplicateUnderscoreid :: Maybe Text -- ^ An identifier in the format `id:timestamp` where the id is the id of the object you are working with (Campaigns, Deliveries, Exports, Identities, Newsletters, Segments, and Templates), and the timestamp is the last time the object was updated.
  , webhook2Name :: Maybe Text -- ^ The name of the action, if it exists.
  , webhook2Layout :: Maybe Text -- ^ The layout used for the action, if it exists.
  , webhook2Created :: Maybe Int -- ^ The date time when the referenced ID was created.
  , webhook2Updated :: Maybe Int -- ^ The date time when the referenced ID was last updated.
  , webhook2Body :: Maybe Text -- ^ The payload for your webhook.
  , webhook2Type :: Maybe Text -- ^ The type of action.
  , webhook2Url :: Maybe Text -- ^ The URL to send a webhook to, applies to `webhook` type actions.
  , webhook2Headers :: Maybe (Map.Map String Text) -- ^ An object containing headers, where the key is the header name and the value is the header value. Header names and values must be strings and cannot contain any non-ASCII characters or empty spaces. Some headers are reserved and cannot be overwritten.
  , webhook2Method :: Maybe Text -- ^ The HTTP method for your webhook.
  , webhook2SendingUnderscorestate :: Maybe Text -- ^ Determines the sending behavior for the action. `automatic` sends the action automatically when triggered; `draft` queues drafts when the action is triggered; or `off` to disable the action.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Webhook2 where
  parseJSON = genericParseJSON optionsWebhook2
instance ToJSON Webhook2 where
  toJSON = genericToJSON optionsWebhook2

optionsWebhook2 :: Options
optionsWebhook2 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("webhook2Id", "id")
      , ("webhook2CampaignUnderscoreid", "campaign_id")
      , ("webhook2ParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("webhook2DeduplicateUnderscoreid", "deduplicate_id")
      , ("webhook2Name", "name")
      , ("webhook2Layout", "layout")
      , ("webhook2Created", "created")
      , ("webhook2Updated", "updated")
      , ("webhook2Body", "body")
      , ("webhook2Type", "type")
      , ("webhook2Url", "url")
      , ("webhook2Headers", "headers")
      , ("webhook2Method", "method")
      , ("webhook2SendingUnderscorestate", "sending_state")
      ]


-- | Events pertaining to webhooks.
data Webhook3 = Webhook3
  { webhook3EventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , webhook3ObjectUnderscoretype :: Text -- ^ The event relates to a webhook.
  , webhook3Timestamp :: Int -- ^ The unix timestamp when the event occurred.
  , webhook3Metric :: Text -- ^ A webhook/message was undeliverable. Undeliverable messages are messages that have either hit a message limit, come from a newsletter that was cancelled or deleted, or an environment that has delivery disabled (which is something you might do if you’re testing an integration). If you’re not using message limits, you probably won’t see this event.
  , webhook3Data :: Attempted2AllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Webhook3 where
  parseJSON = genericParseJSON optionsWebhook3
instance ToJSON Webhook3 where
  toJSON = genericToJSON optionsWebhook3

optionsWebhook3 :: Options
optionsWebhook3 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("webhook3EventUnderscoreid", "event_id")
      , ("webhook3ObjectUnderscoretype", "object_type")
      , ("webhook3Timestamp", "timestamp")
      , ("webhook3Metric", "metric")
      , ("webhook3Data", "data")
      ]


-- | 
data WebhookAttempted = WebhookAttempted
  { webhookAttemptedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , webhookAttemptedObjectUnderscoretype :: Text -- ^ The event relates to a webhook.
  , webhookAttemptedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , webhookAttemptedMetric :: Text -- ^ A webhook failed to send, but will be retried.
  , webhookAttemptedData :: WebhookAttemptedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON WebhookAttempted where
  parseJSON = genericParseJSON optionsWebhookAttempted
instance ToJSON WebhookAttempted where
  toJSON = genericToJSON optionsWebhookAttempted

optionsWebhookAttempted :: Options
optionsWebhookAttempted =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("webhookAttemptedEventUnderscoreid", "event_id")
      , ("webhookAttemptedObjectUnderscoretype", "object_type")
      , ("webhookAttemptedTimestamp", "timestamp")
      , ("webhookAttemptedMetric", "metric")
      , ("webhookAttemptedData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data WebhookAttemptedAllOfData = WebhookAttemptedAllOfData
  { webhookAttemptedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , webhookAttemptedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , webhookAttemptedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , webhookAttemptedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , webhookAttemptedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , webhookAttemptedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , webhookAttemptedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , webhookAttemptedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , webhookAttemptedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , webhookAttemptedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , webhookAttemptedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , webhookAttemptedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , webhookAttemptedAllOfDataFailureUnderscoremessage :: Text -- ^ Indicates the reason that an attempted message failed.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON WebhookAttemptedAllOfData where
  parseJSON = genericParseJSON optionsWebhookAttemptedAllOfData
instance ToJSON WebhookAttemptedAllOfData where
  toJSON = genericToJSON optionsWebhookAttemptedAllOfData

optionsWebhookAttemptedAllOfData :: Options
optionsWebhookAttemptedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("webhookAttemptedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("webhookAttemptedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("webhookAttemptedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("webhookAttemptedAllOfDataActionUnderscoreid", "action_id")
      , ("webhookAttemptedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("webhookAttemptedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("webhookAttemptedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("webhookAttemptedAllOfDataIdentifiers", "identifiers")
      , ("webhookAttemptedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("webhookAttemptedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("webhookAttemptedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("webhookAttemptedAllOfDataContentUnderscoreid", "content_id")
      , ("webhookAttemptedAllOfDataFailureUnderscoremessage", "failure_message")
      ]


-- | 
data WebhookClicked = WebhookClicked
  { webhookClickedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , webhookClickedObjectUnderscoretype :: Text -- ^ The event relates to a webhook.
  , webhookClickedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , webhookClickedMetric :: Text -- ^ The webhook recipient opened a tracked link in the webhook payload.
  , webhookClickedData :: WebhookClickedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON WebhookClicked where
  parseJSON = genericParseJSON optionsWebhookClicked
instance ToJSON WebhookClicked where
  toJSON = genericToJSON optionsWebhookClicked

optionsWebhookClicked :: Options
optionsWebhookClicked =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("webhookClickedEventUnderscoreid", "event_id")
      , ("webhookClickedObjectUnderscoretype", "object_type")
      , ("webhookClickedTimestamp", "timestamp")
      , ("webhookClickedMetric", "metric")
      , ("webhookClickedData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data WebhookClickedAllOfData = WebhookClickedAllOfData
  { webhookClickedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , webhookClickedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , webhookClickedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , webhookClickedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , webhookClickedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , webhookClickedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , webhookClickedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , webhookClickedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , webhookClickedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , webhookClickedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , webhookClickedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , webhookClickedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , webhookClickedAllOfDataRecipient :: Text -- ^ The URL the webhook was sent to.
  , webhookClickedAllOfDataHref :: Text -- ^ The URL of the link that a person clicked.
  , webhookClickedAllOfDataLinkUnderscoreid :: Int -- ^ The identifier for the tracked link that a person clicked or tapped.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON WebhookClickedAllOfData where
  parseJSON = genericParseJSON optionsWebhookClickedAllOfData
instance ToJSON WebhookClickedAllOfData where
  toJSON = genericToJSON optionsWebhookClickedAllOfData

optionsWebhookClickedAllOfData :: Options
optionsWebhookClickedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("webhookClickedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("webhookClickedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("webhookClickedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("webhookClickedAllOfDataActionUnderscoreid", "action_id")
      , ("webhookClickedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("webhookClickedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("webhookClickedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("webhookClickedAllOfDataIdentifiers", "identifiers")
      , ("webhookClickedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("webhookClickedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("webhookClickedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("webhookClickedAllOfDataContentUnderscoreid", "content_id")
      , ("webhookClickedAllOfDataRecipient", "recipient")
      , ("webhookClickedAllOfDataHref", "href")
      , ("webhookClickedAllOfDataLinkUnderscoreid", "link_id")
      ]


-- | 
data WebhookDrafted = WebhookDrafted
  { webhookDraftedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , webhookDraftedObjectUnderscoretype :: Text -- ^ The event relates to a webhook.
  , webhookDraftedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , webhookDraftedMetric :: Text -- ^ A webhook draft was created.
  , webhookDraftedData :: WebhookDraftedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON WebhookDrafted where
  parseJSON = genericParseJSON optionsWebhookDrafted
instance ToJSON WebhookDrafted where
  toJSON = genericToJSON optionsWebhookDrafted

optionsWebhookDrafted :: Options
optionsWebhookDrafted =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("webhookDraftedEventUnderscoreid", "event_id")
      , ("webhookDraftedObjectUnderscoretype", "object_type")
      , ("webhookDraftedTimestamp", "timestamp")
      , ("webhookDraftedMetric", "metric")
      , ("webhookDraftedData", "data")
      ]


-- | 
data WebhookDraftedAllOfData = WebhookDraftedAllOfData
  { webhookDraftedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , webhookDraftedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , webhookDraftedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , webhookDraftedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , webhookDraftedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , webhookDraftedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , webhookDraftedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , webhookDraftedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , webhookDraftedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , webhookDraftedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , webhookDraftedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , webhookDraftedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON WebhookDraftedAllOfData where
  parseJSON = genericParseJSON optionsWebhookDraftedAllOfData
instance ToJSON WebhookDraftedAllOfData where
  toJSON = genericToJSON optionsWebhookDraftedAllOfData

optionsWebhookDraftedAllOfData :: Options
optionsWebhookDraftedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("webhookDraftedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("webhookDraftedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("webhookDraftedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("webhookDraftedAllOfDataActionUnderscoreid", "action_id")
      , ("webhookDraftedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("webhookDraftedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("webhookDraftedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("webhookDraftedAllOfDataIdentifiers", "identifiers")
      , ("webhookDraftedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("webhookDraftedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("webhookDraftedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("webhookDraftedAllOfDataContentUnderscoreid", "content_id")
      ]


-- | Events pertaining to webhooks.
data WebhookEvent = WebhookEvent
  { webhookEventEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , webhookEventObjectUnderscoretype :: Text -- ^ The event relates to a webhook.
  , webhookEventTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , webhookEventMetric :: Text -- ^ A webhook/message was undeliverable. Undeliverable messages are messages that have either hit a message limit, come from a newsletter that was cancelled or deleted, or an environment that has delivery disabled (which is something you might do if you’re testing an integration). If you’re not using message limits, you probably won’t see this event.
  , webhookEventData :: SlackUndeliverableAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON WebhookEvent where
  parseJSON = genericParseJSON optionsWebhookEvent
instance ToJSON WebhookEvent where
  toJSON = genericToJSON optionsWebhookEvent

optionsWebhookEvent :: Options
optionsWebhookEvent =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("webhookEventEventUnderscoreid", "event_id")
      , ("webhookEventObjectUnderscoretype", "object_type")
      , ("webhookEventTimestamp", "timestamp")
      , ("webhookEventMetric", "metric")
      , ("webhookEventData", "data")
      ]


-- | 
data WebhookEventCommon = WebhookEventCommon
  { webhookEventCommonEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , webhookEventCommonObjectUnderscoretype :: Text -- ^ The event relates to a webhook.
  , webhookEventCommonTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON WebhookEventCommon where
  parseJSON = genericParseJSON optionsWebhookEventCommon
instance ToJSON WebhookEventCommon where
  toJSON = genericToJSON optionsWebhookEventCommon

optionsWebhookEventCommon :: Options
optionsWebhookEventCommon =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("webhookEventCommonEventUnderscoreid", "event_id")
      , ("webhookEventCommonObjectUnderscoretype", "object_type")
      , ("webhookEventCommonTimestamp", "timestamp")
      ]


-- | Describes the webhook events reported from Customer.io to a webhook.
data WebhookEvents = WebhookEvents
  { webhookEventsWebhookUnderscoreattempted :: Maybe Bool -- ^ Reports when a webhook could not be sent and will retry. Set to true to report this event type.
  , webhookEventsWebhookUnderscoreclicked :: Maybe Bool -- ^ Reports when a tracked link in a webhook payload is opened. Set to true to report this event type.
  , webhookEventsWebhookUnderscoredrafted :: Maybe Bool -- ^ A webhook draft is created. Set to true to report this event type.
  , webhookEventsWebhookUnderscorefailed :: Maybe Bool -- ^ Reports when a webhook couldn't be sent to the webhook URL. Set to true to report this event type.
  , webhookEventsWebhookUnderscoresent :: Maybe Bool -- ^ Reports when a webhook is sent from Customer.io to the webhook URL. Set to true to report this event type.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON WebhookEvents where
  parseJSON = genericParseJSON optionsWebhookEvents
instance ToJSON WebhookEvents where
  toJSON = genericToJSON optionsWebhookEvents

optionsWebhookEvents :: Options
optionsWebhookEvents =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("webhookEventsWebhookUnderscoreattempted", "webhook_attempted")
      , ("webhookEventsWebhookUnderscoreclicked", "webhook_clicked")
      , ("webhookEventsWebhookUnderscoredrafted", "webhook_drafted")
      , ("webhookEventsWebhookUnderscorefailed", "webhook_failed")
      , ("webhookEventsWebhookUnderscoresent", "webhook_sent")
      ]


-- | 
data WebhookFailed = WebhookFailed
  { webhookFailedEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , webhookFailedObjectUnderscoretype :: Text -- ^ The event relates to a webhook.
  , webhookFailedTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , webhookFailedMetric :: Text -- ^ A webhook failed to send.
  , webhookFailedData :: WebhookFailedAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON WebhookFailed where
  parseJSON = genericParseJSON optionsWebhookFailed
instance ToJSON WebhookFailed where
  toJSON = genericToJSON optionsWebhookFailed

optionsWebhookFailed :: Options
optionsWebhookFailed =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("webhookFailedEventUnderscoreid", "event_id")
      , ("webhookFailedObjectUnderscoretype", "object_type")
      , ("webhookFailedTimestamp", "timestamp")
      , ("webhookFailedMetric", "metric")
      , ("webhookFailedData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data WebhookFailedAllOfData = WebhookFailedAllOfData
  { webhookFailedAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , webhookFailedAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , webhookFailedAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , webhookFailedAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , webhookFailedAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , webhookFailedAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , webhookFailedAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , webhookFailedAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , webhookFailedAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , webhookFailedAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , webhookFailedAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , webhookFailedAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , webhookFailedAllOfDataFailureUnderscoremessage :: Text -- ^ Indicates the reason that an attempted message failed.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON WebhookFailedAllOfData where
  parseJSON = genericParseJSON optionsWebhookFailedAllOfData
instance ToJSON WebhookFailedAllOfData where
  toJSON = genericToJSON optionsWebhookFailedAllOfData

optionsWebhookFailedAllOfData :: Options
optionsWebhookFailedAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("webhookFailedAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("webhookFailedAllOfDataCustomerUnderscoreid", "customer_id")
      , ("webhookFailedAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("webhookFailedAllOfDataActionUnderscoreid", "action_id")
      , ("webhookFailedAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("webhookFailedAllOfDataJourneyUnderscoreid", "journey_id")
      , ("webhookFailedAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("webhookFailedAllOfDataIdentifiers", "identifiers")
      , ("webhookFailedAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("webhookFailedAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("webhookFailedAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("webhookFailedAllOfDataContentUnderscoreid", "content_id")
      , ("webhookFailedAllOfDataFailureUnderscoremessage", "failure_message")
      ]


-- | The person the event represents. This object contains all of the identifiers available to people in your workspace, even if they aren&#39;t set. If your workspace supports multiple identifiers (email and ID), this object contains &#x60;id&#x60;, &#x60;email&#x60; (either of which can be null), and &#x60;cio_id&#x60;.   Otherwise, if your workspace only supports ID, this object just contains the &#x60;id&#x60; of the person the event represents. 
data WebhookIdentifiers = WebhookIdentifiers
  { webhookIdentifiersId :: Text -- ^ The ID of a customer profile, analogous to a \"person\" in the UI. If your workspace supports multiple identifiers (email and ID), this value can be null.
  , webhookIdentifiersEmail :: Maybe Text -- ^ The email address of the customer.
  , webhookIdentifiersCioUnderscoreid :: Maybe Text -- ^ The canonical identifier for a person, present only if your workspace supports multiple identifiers (email and ID). This value exists to keep a record of a person in your workspace across changes to their other identifiers.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON WebhookIdentifiers where
  parseJSON = genericParseJSON optionsWebhookIdentifiers
instance ToJSON WebhookIdentifiers where
  toJSON = genericToJSON optionsWebhookIdentifiers

optionsWebhookIdentifiers :: Options
optionsWebhookIdentifiers =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("webhookIdentifiersId", "id")
      , ("webhookIdentifiersEmail", "email")
      , ("webhookIdentifiersCioUnderscoreid", "cio_id")
      ]


-- | 
data WebhookMetrics = WebhookMetrics
  { webhookMetrics2xx :: Maybe Int -- ^ The number of 2xx responses.
  , webhookMetrics3xx :: Maybe Int -- ^ The number of 3xx responses.
  , webhookMetrics4xx :: Maybe Int -- ^ The number of 4xx responses.
  , webhookMetrics5xx :: Maybe Int -- ^ The number of 5xx responses.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON WebhookMetrics where
  parseJSON = genericParseJSON optionsWebhookMetrics
instance ToJSON WebhookMetrics where
  toJSON = genericToJSON optionsWebhookMetrics

optionsWebhookMetrics :: Options
optionsWebhookMetrics =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("webhookMetrics2xx", "2xx")
      , ("webhookMetrics3xx", "3xx")
      , ("webhookMetrics4xx", "4xx")
      , ("webhookMetrics5xx", "5xx")
      ]


-- | 
data WebhookSent = WebhookSent
  { webhookSentEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , webhookSentObjectUnderscoretype :: Text -- ^ The event relates to a webhook.
  , webhookSentTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , webhookSentMetric :: Text -- ^ A webhook was sent from Customer.io. If you enabled the *Body Content* option with your webhook, the payload includes the `content` of your webhook.
  , webhookSentData :: WebhookSentAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON WebhookSent where
  parseJSON = genericParseJSON optionsWebhookSent
instance ToJSON WebhookSent where
  toJSON = genericToJSON optionsWebhookSent

optionsWebhookSent :: Options
optionsWebhookSent =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("webhookSentEventUnderscoreid", "event_id")
      , ("webhookSentObjectUnderscoretype", "object_type")
      , ("webhookSentTimestamp", "timestamp")
      , ("webhookSentMetric", "metric")
      , ("webhookSentData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data WebhookSentAllOfData = WebhookSentAllOfData
  { webhookSentAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , webhookSentAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , webhookSentAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , webhookSentAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , webhookSentAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , webhookSentAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , webhookSentAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , webhookSentAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , webhookSentAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , webhookSentAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , webhookSentAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , webhookSentAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , webhookSentAllOfDataContent :: Maybe Text -- ^ The stringified payload sent to your webhook address. This key only appears if you enabled the *Body Content* option when setting up your webhook.
  , webhookSentAllOfDataRecipient :: Text -- ^ The URL the webhook was sent to.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON WebhookSentAllOfData where
  parseJSON = genericParseJSON optionsWebhookSentAllOfData
instance ToJSON WebhookSentAllOfData where
  toJSON = genericToJSON optionsWebhookSentAllOfData

optionsWebhookSentAllOfData :: Options
optionsWebhookSentAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("webhookSentAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("webhookSentAllOfDataCustomerUnderscoreid", "customer_id")
      , ("webhookSentAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("webhookSentAllOfDataActionUnderscoreid", "action_id")
      , ("webhookSentAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("webhookSentAllOfDataJourneyUnderscoreid", "journey_id")
      , ("webhookSentAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("webhookSentAllOfDataIdentifiers", "identifiers")
      , ("webhookSentAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("webhookSentAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("webhookSentAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("webhookSentAllOfDataContentUnderscoreid", "content_id")
      , ("webhookSentAllOfDataContent", "content")
      , ("webhookSentAllOfDataRecipient", "recipient")
      ]


-- | 
data WebhookUndeliverable = WebhookUndeliverable
  { webhookUndeliverableEventUnderscoreid :: Text -- ^ The unique ID of the reporting webhook event being sent.
  , webhookUndeliverableObjectUnderscoretype :: Text -- ^ The event relates to a webhook.
  , webhookUndeliverableTimestamp :: Int -- ^ The unix timestamp when the event occurred.
  , webhookUndeliverableMetric :: Text -- ^ A webhook/message was undeliverable. Undeliverable messages are messages that have either hit a message limit, come from a newsletter that was cancelled or deleted, or an environment that has delivery disabled (which is something you might do if you’re testing an integration). If you’re not using message limits, you probably won’t see this event.
  , webhookUndeliverableData :: WebhookUndeliverableAllOfData -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON WebhookUndeliverable where
  parseJSON = genericParseJSON optionsWebhookUndeliverable
instance ToJSON WebhookUndeliverable where
  toJSON = genericToJSON optionsWebhookUndeliverable

optionsWebhookUndeliverable :: Options
optionsWebhookUndeliverable =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("webhookUndeliverableEventUnderscoreid", "event_id")
      , ("webhookUndeliverableObjectUnderscoretype", "object_type")
      , ("webhookUndeliverableTimestamp", "timestamp")
      , ("webhookUndeliverableMetric", "metric")
      , ("webhookUndeliverableData", "data")
      ]


-- | Contains information about the event, specific to the &#x60;object_type&#x60; and &#x60;metric&#x60;.
data WebhookUndeliverableAllOfData = WebhookUndeliverableAllOfData
  { webhookUndeliverableAllOfDataTriggerUnderscoreid :: Int -- ^ The trigger ID returned by the [Trigger Broadcast API](/api/#operation/triggerBroadcast).
  , webhookUndeliverableAllOfDataCustomerUnderscoreid :: Maybe Text -- ^ The ID of the person the webhook event occurred to. Blank if the person in question has been deleted.  While webhooks may still contain this property, you should rely on the newer `identifiers` object wherever possible. 
  , webhookUndeliverableAllOfDataDeliveryUnderscoreid :: Text -- ^ The instance of a message sent to a person.
  , webhookUndeliverableAllOfDataActionUnderscoreid :: Int -- ^ The identifier for an action.
  , webhookUndeliverableAllOfDataBroadcastUnderscoreid :: Int -- ^ The identifier for a broadcast.
  , webhookUndeliverableAllOfDataJourneyUnderscoreid :: Maybe Text -- ^ The ID for the path a person went through in a Campaign or API Triggered Broadcast workflow.
  , webhookUndeliverableAllOfDataParentUnderscoreactionUnderscoreid :: Maybe Int -- ^ The ID of the parent action, if the action occurred within a campaign and has a parent (like a randomized split, etc).
  , webhookUndeliverableAllOfDataIdentifiers :: SubscribedAllOfDataIdentifiers -- ^ 
  , webhookUndeliverableAllOfDataCampaignUnderscoreid :: Int -- ^ The identifier for a campaign.
  , webhookUndeliverableAllOfDataTriggerUnderscoreeventUnderscoreid :: Maybe Text -- ^ The id of the event that triggered an event-triggered campaign (not an API-triggered broadcast).
  , webhookUndeliverableAllOfDataNewsletterUnderscoreid :: Int -- ^ The identifier for a newsletter.
  , webhookUndeliverableAllOfDataContentUnderscoreid :: Maybe Int -- ^ The identifier for a newsletter variant.
  , webhookUndeliverableAllOfDataFailureUnderscoremessage :: Text -- ^ Indicates the reason that an attempted message failed.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON WebhookUndeliverableAllOfData where
  parseJSON = genericParseJSON optionsWebhookUndeliverableAllOfData
instance ToJSON WebhookUndeliverableAllOfData where
  toJSON = genericToJSON optionsWebhookUndeliverableAllOfData

optionsWebhookUndeliverableAllOfData :: Options
optionsWebhookUndeliverableAllOfData =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("webhookUndeliverableAllOfDataTriggerUnderscoreid", "trigger_id")
      , ("webhookUndeliverableAllOfDataCustomerUnderscoreid", "customer_id")
      , ("webhookUndeliverableAllOfDataDeliveryUnderscoreid", "delivery_id")
      , ("webhookUndeliverableAllOfDataActionUnderscoreid", "action_id")
      , ("webhookUndeliverableAllOfDataBroadcastUnderscoreid", "broadcast_id")
      , ("webhookUndeliverableAllOfDataJourneyUnderscoreid", "journey_id")
      , ("webhookUndeliverableAllOfDataParentUnderscoreactionUnderscoreid", "parent_action_id")
      , ("webhookUndeliverableAllOfDataIdentifiers", "identifiers")
      , ("webhookUndeliverableAllOfDataCampaignUnderscoreid", "campaign_id")
      , ("webhookUndeliverableAllOfDataTriggerUnderscoreeventUnderscoreid", "trigger_event_id")
      , ("webhookUndeliverableAllOfDataNewsletterUnderscoreid", "newsletter_id")
      , ("webhookUndeliverableAllOfDataContentUnderscoreid", "content_id")
      , ("webhookUndeliverableAllOfDataFailureUnderscoremessage", "failure_message")
      ]


-- | The crossAxisAlignment property supports the following options
data WidgetCrossAxisAlignment = WidgetCrossAxisAlignment
  { 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON WidgetCrossAxisAlignment where
  parseJSON = genericParseJSON optionsWidgetCrossAxisAlignment
instance ToJSON WidgetCrossAxisAlignment where
  toJSON = genericToJSON optionsWidgetCrossAxisAlignment

optionsWidgetCrossAxisAlignment :: Options
optionsWidgetCrossAxisAlignment =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ 
      ]


-- | The mainAxisAlignment property supports the following options.
data WidgetMainAxisAlignment = WidgetMainAxisAlignment
  { 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON WidgetMainAxisAlignment where
  parseJSON = genericParseJSON optionsWidgetMainAxisAlignment
instance ToJSON WidgetMainAxisAlignment where
  toJSON = genericToJSON optionsWidgetMainAxisAlignment

optionsWidgetMainAxisAlignment :: Options
optionsWidgetMainAxisAlignment =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ 
      ]


-- | Send a transactional message using a template that you set up in Customer.io.
data WithTemplate = WithTemplate
  { withTemplateTransactionalUnderscoremessageUnderscoreid :: WithTemplateAllOfTransactionalMessageId -- ^ 
  , withTemplateBody :: Maybe Text -- ^ The HTML body of your message. This overrides the body of the transactional template (referenced by `transactional_message_id`). If you send an AMP-enabled email (with `body_amp`), and the recipient's email client doesn't support AMP, this is the fallback email.
  , withTemplateBodyUnderscoreamp :: Maybe Text -- ^ If your message is an email, this is the AMP-enabled body of your message. If your recipient's email client doesn't support AMP, the `body` represents your fallback message.
  , withTemplateBodyUnderscoreplain :: Maybe Text -- ^ By default, we generate a plaintext version of your message body for each delivery. Use this key to override the default plain text body.
  , withTemplateSubject :: Maybe Text -- ^ The subject line for your message. This overrides the subject of the transactional template (referenced by `transactional_message_id`).
  , withTemplateFrom :: Maybe Text -- ^ The address that your email is from. This address must be verified by Customer.io. This overrides the from address set within the transactional template (referenced by `transactional_message_id`). You can include a display/friendly name in your from address, but we recommend that you use quotation marks around the friendly name to avoid potential issues with special characters, e.g. `\\\"Person\\\" <person@example.com>`.
  , withTemplateLanguage :: Maybe Text -- ^ Overrides language preferences for the person you want to send your transactional message to. Use one of our [supported two- or four-letter language codes](/localization-getting-started/#supported-languages).
  , withTemplateIdentifiers :: WithTemplateAllOfIdentifiers -- ^ 
  , withTemplateMessageUnderscoredata :: Maybe (Map.Map String Value) -- ^ An object containing the key-value pairs referenced using liquid in your message.
  , withTemplateSendUnderscoreat :: Maybe Int -- ^ A unix timestamp (seconds since epoch) determining when the message will be sent. The timestamp can be up to 90 days in the future. If this value is in the past, your message is sent immediately.
  , withTemplateDisableUnderscoremessageUnderscoreretention :: Maybe Bool -- ^ If true, the message body is not retained in delivery history. Setting this value overrides the value set in the settings of your `transactional_message_id`.
  , withTemplateSendUnderscoretoUnderscoreunsubscribed :: Maybe Bool -- ^ If false, your message is not sent to unsubscribed recipients. Setting this value overrides the value set in the settings of your `transactional_message_id`.
  , withTemplateQueueUnderscoredraft :: Maybe Bool -- ^ If true, your transactional message is held as a draft in Customer.io and not sent directly to your audience. You must go to the Deliveries and Drafts page to send your message.
  , withTemplateTo :: Text -- ^ The message recipient(s). Supports multiple addresses separated by commas. Your request can contain up to 15 total recipients between the `to` and `bcc` keys.  You can include a display or \"friendly\" name in \"to\" address, but we recommend that you use quotation marks around the friendly name to avoid potential issues with special characters, e.g. `\\\"Person\\\" <person@example.com>`.             
  , withTemplateBcc :: Maybe Text -- ^ Blind copy message recipients. Supports multiple addresses separated by commas. Your request can contain up to 15 total recipients between the `to` and `bcc` keys.
  , withTemplateFakeUnderscorebcc :: Maybe Bool -- ^ If true, rather than sending true copies to BCC addresses, Customer.io sends a copy of the message with the subject line containing the recipient address(es). 
  , withTemplateReplyUnderscoreto :: Maybe Text -- ^ The address that recipients can reply to, if different from the `from` address.
  , withTemplatePreheader :: Maybe Text -- ^ Also known as \"preview text\", this is the block block of text that users see next to, or underneath, the subject line in their inbox.
  , withTemplateAttachments :: Maybe WithTemplateAllOfAttachments -- ^ 
  , withTemplateHeaders :: Maybe (Map.Map String Text) -- ^ An object containing headers, where the key is the header name and the value is the header value. Header names and values must be strings and cannot contain any non-ASCII characters or empty spaces. Some headers are reserved and cannot be overwritten.
  , withTemplateDisableUnderscorecssUnderscorepreprocessing :: Maybe Bool -- ^ Set to `true` to disable CSS preprocessing. This setting overrides the CSS preprocessing setting on the `transactional_message_id` as set in the user interface. Transactional emails have CSS preprocessing enabled by default.
  , withTemplateTracked :: Maybe Bool -- ^ If true, Customer.io tracks opens and link clicks in your message.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON WithTemplate where
  parseJSON = genericParseJSON optionsWithTemplate
instance ToJSON WithTemplate where
  toJSON = genericToJSON optionsWithTemplate

optionsWithTemplate :: Options
optionsWithTemplate =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("withTemplateTransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("withTemplateBody", "body")
      , ("withTemplateBodyUnderscoreamp", "body_amp")
      , ("withTemplateBodyUnderscoreplain", "body_plain")
      , ("withTemplateSubject", "subject")
      , ("withTemplateFrom", "from")
      , ("withTemplateLanguage", "language")
      , ("withTemplateIdentifiers", "identifiers")
      , ("withTemplateMessageUnderscoredata", "message_data")
      , ("withTemplateSendUnderscoreat", "send_at")
      , ("withTemplateDisableUnderscoremessageUnderscoreretention", "disable_message_retention")
      , ("withTemplateSendUnderscoretoUnderscoreunsubscribed", "send_to_unsubscribed")
      , ("withTemplateQueueUnderscoredraft", "queue_draft")
      , ("withTemplateTo", "to")
      , ("withTemplateBcc", "bcc")
      , ("withTemplateFakeUnderscorebcc", "fake_bcc")
      , ("withTemplateReplyUnderscoreto", "reply_to")
      , ("withTemplatePreheader", "preheader")
      , ("withTemplateAttachments", "attachments")
      , ("withTemplateHeaders", "headers")
      , ("withTemplateDisableUnderscorecssUnderscorepreprocessing", "disable_css_preprocessing")
      , ("withTemplateTracked", "tracked")
      ]


-- | Send a transactional message using a template that you set up in Customer.io.
data WithTemplate1 = WithTemplate1
  { withTemplate1TransactionalUnderscoremessageUnderscoreid :: SendpushAllOfTransactionalMessageId -- ^ 
  , withTemplate1Body :: Maybe Text -- ^ The HTML body of your message. This overrides the body of the transactional template (referenced by `transactional_message_id`). If you send an AMP-enabled email (with `body_amp`), and the recipient's email client doesn't support AMP, this is the fallback email.
  , withTemplate1BodyUnderscoreamp :: Maybe Text -- ^ If your message is an email, this is the AMP-enabled body of your message. If your recipient's email client doesn't support AMP, the `body` represents your fallback message.
  , withTemplate1BodyUnderscoreplain :: Maybe Text -- ^ By default, we generate a plaintext version of your message body for each delivery. Use this key to override the default plain text body.
  , withTemplate1Subject :: Maybe Text -- ^ The subject line for your message. This overrides the subject of the transactional template (referenced by `transactional_message_id`).
  , withTemplate1From :: Maybe Text -- ^ The address that your email is from. This address must be verified by Customer.io. This overrides the from address set within the transactional template (referenced by `transactional_message_id`). You can include a display/friendly name in your from address, but we recommend that you use quotation marks around the friendly name to avoid potential issues with special characters, e.g. `\\\"Person\\\" <person@example.com>`.
  , withTemplate1Language :: Maybe Text -- ^ Overrides language preferences for the person you want to send your transactional message to. Use one of our [supported two- or four-letter language codes](/localization-getting-started/#supported-languages).
  , withTemplate1Identifiers :: SendpushAllOfIdentifiers -- ^ 
  , withTemplate1MessageUnderscoredata :: Maybe (Map.Map String Value) -- ^ An object containing the key-value pairs referenced using liquid in your message.
  , withTemplate1SendUnderscoreat :: Maybe Int -- ^ A unix timestamp (seconds since epoch) determining when the message will be sent. The timestamp can be up to 90 days in the future. If this value is in the past, your message is sent immediately.
  , withTemplate1DisableUnderscoremessageUnderscoreretention :: Maybe Bool -- ^ If true, the message body is not retained in delivery history. Setting this value overrides the value set in the settings of your `transactional_message_id`.
  , withTemplate1SendUnderscoretoUnderscoreunsubscribed :: Maybe Bool -- ^ If false, your message is not sent to unsubscribed recipients. Setting this value overrides the value set in the settings of your `transactional_message_id`.
  , withTemplate1QueueUnderscoredraft :: Maybe Bool -- ^ If true, your transactional message is held as a draft in Customer.io and not sent directly to your audience. You must go to the Deliveries and Drafts page to send your message.
  , withTemplate1To :: Text -- ^ The message recipient(s). Supports multiple addresses separated by commas. Your request can contain up to 15 total recipients between the `to` and `bcc` keys.  You can include a display or \"friendly\" name in \"to\" address, but we recommend that you use quotation marks around the friendly name to avoid potential issues with special characters, e.g. `\\\"Person\\\" <person@example.com>`.             
  , withTemplate1Bcc :: Maybe Text -- ^ Blind copy message recipients. Supports multiple addresses separated by commas. Your request can contain up to 15 total recipients between the `to` and `bcc` keys.
  , withTemplate1FakeUnderscorebcc :: Maybe Bool -- ^ If true, rather than sending true copies to BCC addresses, Customer.io sends a copy of the message with the subject line containing the recipient address(es). 
  , withTemplate1ReplyUnderscoreto :: Maybe Text -- ^ The address that recipients can reply to, if different from the `from` address.
  , withTemplate1Preheader :: Maybe Text -- ^ Also known as \"preview text\", this is the block block of text that users see next to, or underneath, the subject line in their inbox.
  , withTemplate1Attachments :: Maybe WithTemplateAllOfAttachments -- ^ 
  , withTemplate1Headers :: Maybe (Map.Map String Text) -- ^ An object containing headers, where the key is the header name and the value is the header value. Header names and values must be strings and cannot contain any non-ASCII characters or empty spaces. Some headers are reserved and cannot be overwritten.
  , withTemplate1DisableUnderscorecssUnderscorepreprocessing :: Maybe Bool -- ^ Set to `true` to disable CSS preprocessing. This setting overrides the CSS preprocessing setting on the `transactional_message_id` as set in the user interface. Transactional emails have CSS preprocessing enabled by default.
  , withTemplate1Tracked :: Maybe Bool -- ^ If true, Customer.io tracks opens and link clicks in your message.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON WithTemplate1 where
  parseJSON = genericParseJSON optionsWithTemplate1
instance ToJSON WithTemplate1 where
  toJSON = genericToJSON optionsWithTemplate1

optionsWithTemplate1 :: Options
optionsWithTemplate1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("withTemplate1TransactionalUnderscoremessageUnderscoreid", "transactional_message_id")
      , ("withTemplate1Body", "body")
      , ("withTemplate1BodyUnderscoreamp", "body_amp")
      , ("withTemplate1BodyUnderscoreplain", "body_plain")
      , ("withTemplate1Subject", "subject")
      , ("withTemplate1From", "from")
      , ("withTemplate1Language", "language")
      , ("withTemplate1Identifiers", "identifiers")
      , ("withTemplate1MessageUnderscoredata", "message_data")
      , ("withTemplate1SendUnderscoreat", "send_at")
      , ("withTemplate1DisableUnderscoremessageUnderscoreretention", "disable_message_retention")
      , ("withTemplate1SendUnderscoretoUnderscoreunsubscribed", "send_to_unsubscribed")
      , ("withTemplate1QueueUnderscoredraft", "queue_draft")
      , ("withTemplate1To", "to")
      , ("withTemplate1Bcc", "bcc")
      , ("withTemplate1FakeUnderscorebcc", "fake_bcc")
      , ("withTemplate1ReplyUnderscoreto", "reply_to")
      , ("withTemplate1Preheader", "preheader")
      , ("withTemplate1Attachments", "attachments")
      , ("withTemplate1Headers", "headers")
      , ("withTemplate1DisableUnderscorecssUnderscorepreprocessing", "disable_css_preprocessing")
      , ("withTemplate1Tracked", "tracked")
      ]


-- | A dictionary of attachments where the filename is the key and the value is the base64-encoded contents. The filename must include the extension (i.e. &#x60;name.csv&#x60;). The total size of all attachments must be less than 2 MB.
data WithTemplateAllOfAttachments = WithTemplateAllOfAttachments
  { withTemplateAllOfAttachmentsLessThanfileDashnameGreaterThan :: Maybe Text -- ^ 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON WithTemplateAllOfAttachments where
  parseJSON = genericParseJSON optionsWithTemplateAllOfAttachments
instance ToJSON WithTemplateAllOfAttachments where
  toJSON = genericToJSON optionsWithTemplateAllOfAttachments

optionsWithTemplateAllOfAttachments :: Options
optionsWithTemplateAllOfAttachments =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("withTemplateAllOfAttachmentsLessThanfileDashnameGreaterThan", "<file-name>")
      ]


-- | Identifies the person represented by your transactional message by one of, and only one of, &#x60;id&#x60;, &#x60;email&#x60;, or &#x60;cio_id&#x60;.
data WithTemplateAllOfIdentifiers = WithTemplateAllOfIdentifiers
  { withTemplateAllOfIdentifiersId :: Text -- ^ The identifier for the person represented by the transactional message. **NOTE**: If your workspace identifies people by email, use the `email` identifier instead. 
  , withTemplateAllOfIdentifiersEmail :: Text -- ^ The identifier for the person represented by the transactional message. Use this option if your workspace identifies people by email rather than by `id`.
  , withTemplateAllOfIdentifiersCioUnderscoreid :: Text -- ^ A unique, immutable identifier for a person, set by Customer.io when you add a person.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON WithTemplateAllOfIdentifiers where
  parseJSON = genericParseJSON optionsWithTemplateAllOfIdentifiers
instance ToJSON WithTemplateAllOfIdentifiers where
  toJSON = genericToJSON optionsWithTemplateAllOfIdentifiers

optionsWithTemplateAllOfIdentifiers :: Options
optionsWithTemplateAllOfIdentifiers =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("withTemplateAllOfIdentifiersId", "id")
      , ("withTemplateAllOfIdentifiersEmail", "email")
      , ("withTemplateAllOfIdentifiersCioUnderscoreid", "cio_id")
      ]


-- | The transactional message template that you want to use for your message. You can call the template by its numerical ID or by the *Trigger Name* that you assigned the template (case insensitive).
data WithTemplateAllOfTransactionalMessageId = WithTemplateAllOfTransactionalMessageId
  { 
  } deriving (Show, Eq, Generic, Data)

instance FromJSON WithTemplateAllOfTransactionalMessageId where
  parseJSON = genericParseJSON optionsWithTemplateAllOfTransactionalMessageId
instance ToJSON WithTemplateAllOfTransactionalMessageId where
  toJSON = genericToJSON optionsWithTemplateAllOfTransactionalMessageId

optionsWithTemplateAllOfTransactionalMessageId :: Options
optionsWithTemplateAllOfTransactionalMessageId =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ 
      ]


-- | Create your own message from scratch.
data WithoutTemplate = WithoutTemplate
  { withoutTemplateBody :: Text -- ^ The body of your message.
  , withoutTemplateSubject :: Text -- ^ The subject line for your message.
  , withoutTemplateFrom :: Text -- ^ The address that your email is from. This address must be verified by Customer.io. You can include a display/friendly name in your from address in the format `Person <person@example.com>`.
  , withoutTemplateIdentifiers :: WithTemplateAllOfIdentifiers -- ^ 
  , withoutTemplateMessageUnderscoredata :: Maybe (Map.Map String Value) -- ^ An object containing the key-value pairs referenced using liquid in your message.
  , withoutTemplateSendUnderscoreat :: Maybe Int -- ^ A unix timestamp (seconds since epoch) determining when the message will be sent. The timestamp can be up to 90 days in the future. If this value is in the past, your message is sent immediately.
  , withoutTemplateDisableUnderscoremessageUnderscoreretention :: Maybe Bool -- ^ If true, the message body is not retained in delivery history. Setting this value overrides the value set in the settings of your `transactional_message_id`.
  , withoutTemplateSendUnderscoretoUnderscoreunsubscribed :: Maybe Bool -- ^ If false, your message is not sent to unsubscribed recipients. Setting this value overrides the value set in the settings of your `transactional_message_id`.
  , withoutTemplateQueueUnderscoredraft :: Maybe Bool -- ^ If true, your transactional message is held as a draft in Customer.io and not sent directly to your audience. You must go to the Deliveries and Drafts page to send your message.
  , withoutTemplateTo :: Text -- ^ The message recipient(s). Supports multiple addresses separated by commas. Your request can contain up to 15 total recipients between the `to` and `bcc` keys.  You can include a display or \"friendly\" name in \"to\" address, but we recommend that you use quotation marks around the friendly name to avoid potential issues with special characters, e.g. `\\\"Person\\\" <person@example.com>`.             
  , withoutTemplateBcc :: Maybe Text -- ^ Blind copy message recipients. Supports multiple addresses separated by commas. Your request can contain up to 15 total recipients between the `to` and `bcc` keys.
  , withoutTemplateFakeUnderscorebcc :: Maybe Bool -- ^ If true, rather than sending true copies to BCC addresses, Customer.io sends a copy of the message with the subject line containing the recipient address(es). 
  , withoutTemplateReplyUnderscoreto :: Maybe Text -- ^ The address that recipients can reply to, if different from the `from` address.
  , withoutTemplatePreheader :: Maybe Text -- ^ Also known as \"preview text\", this is the block block of text that users see next to, or underneath, the subject line in their inbox.
  , withoutTemplateBodyUnderscoreplain :: Maybe Text -- ^ By default, we generate a plaintext version of your message body for each delivery. Use this key to override the default plain text body.
  , withoutTemplateAttachments :: Maybe WithTemplateAllOfAttachments -- ^ 
  , withoutTemplateHeaders :: Maybe (Map.Map String Text) -- ^ An object containing headers, where the key is the header name and the value is the header value. Header names and values must be strings and cannot contain any non-ASCII characters or empty spaces. Some headers are reserved and cannot be overwritten.
  , withoutTemplateDisableUnderscorecssUnderscorepreprocessing :: Maybe Bool -- ^ Set to `true` to disable CSS preprocessing. This setting overrides the CSS preprocessing setting on the `transactional_message_id` as set in the user interface. Transactional emails have CSS preprocessing enabled by default.
  , withoutTemplateTracked :: Maybe Bool -- ^ If true, Customer.io tracks opens and link clicks in your message.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON WithoutTemplate where
  parseJSON = genericParseJSON optionsWithoutTemplate
instance ToJSON WithoutTemplate where
  toJSON = genericToJSON optionsWithoutTemplate

optionsWithoutTemplate :: Options
optionsWithoutTemplate =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("withoutTemplateBody", "body")
      , ("withoutTemplateSubject", "subject")
      , ("withoutTemplateFrom", "from")
      , ("withoutTemplateIdentifiers", "identifiers")
      , ("withoutTemplateMessageUnderscoredata", "message_data")
      , ("withoutTemplateSendUnderscoreat", "send_at")
      , ("withoutTemplateDisableUnderscoremessageUnderscoreretention", "disable_message_retention")
      , ("withoutTemplateSendUnderscoretoUnderscoreunsubscribed", "send_to_unsubscribed")
      , ("withoutTemplateQueueUnderscoredraft", "queue_draft")
      , ("withoutTemplateTo", "to")
      , ("withoutTemplateBcc", "bcc")
      , ("withoutTemplateFakeUnderscorebcc", "fake_bcc")
      , ("withoutTemplateReplyUnderscoreto", "reply_to")
      , ("withoutTemplatePreheader", "preheader")
      , ("withoutTemplateBodyUnderscoreplain", "body_plain")
      , ("withoutTemplateAttachments", "attachments")
      , ("withoutTemplateHeaders", "headers")
      , ("withoutTemplateDisableUnderscorecssUnderscorepreprocessing", "disable_css_preprocessing")
      , ("withoutTemplateTracked", "tracked")
      ]


-- | Create your own message from scratch.
data WithoutTemplate1 = WithoutTemplate1
  { withoutTemplate1Body :: Text -- ^ The body of your message.
  , withoutTemplate1Subject :: Text -- ^ The subject line for your message.
  , withoutTemplate1From :: Text -- ^ The address that your email is from. This address must be verified by Customer.io. You can include a display/friendly name in your from address in the format `Person <person@example.com>`.
  , withoutTemplate1Identifiers :: SendpushAllOfIdentifiers -- ^ 
  , withoutTemplate1MessageUnderscoredata :: Maybe (Map.Map String Value) -- ^ An object containing the key-value pairs referenced using liquid in your message.
  , withoutTemplate1SendUnderscoreat :: Maybe Int -- ^ A unix timestamp (seconds since epoch) determining when the message will be sent. The timestamp can be up to 90 days in the future. If this value is in the past, your message is sent immediately.
  , withoutTemplate1DisableUnderscoremessageUnderscoreretention :: Maybe Bool -- ^ If true, the message body is not retained in delivery history. Setting this value overrides the value set in the settings of your `transactional_message_id`.
  , withoutTemplate1SendUnderscoretoUnderscoreunsubscribed :: Maybe Bool -- ^ If false, your message is not sent to unsubscribed recipients. Setting this value overrides the value set in the settings of your `transactional_message_id`.
  , withoutTemplate1QueueUnderscoredraft :: Maybe Bool -- ^ If true, your transactional message is held as a draft in Customer.io and not sent directly to your audience. You must go to the Deliveries and Drafts page to send your message.
  , withoutTemplate1To :: Text -- ^ The message recipient(s). Supports multiple addresses separated by commas. Your request can contain up to 15 total recipients between the `to` and `bcc` keys.  You can include a display or \"friendly\" name in \"to\" address, but we recommend that you use quotation marks around the friendly name to avoid potential issues with special characters, e.g. `\\\"Person\\\" <person@example.com>`.             
  , withoutTemplate1Bcc :: Maybe Text -- ^ Blind copy message recipients. Supports multiple addresses separated by commas. Your request can contain up to 15 total recipients between the `to` and `bcc` keys.
  , withoutTemplate1FakeUnderscorebcc :: Maybe Bool -- ^ If true, rather than sending true copies to BCC addresses, Customer.io sends a copy of the message with the subject line containing the recipient address(es). 
  , withoutTemplate1ReplyUnderscoreto :: Maybe Text -- ^ The address that recipients can reply to, if different from the `from` address.
  , withoutTemplate1Preheader :: Maybe Text -- ^ Also known as \"preview text\", this is the block block of text that users see next to, or underneath, the subject line in their inbox.
  , withoutTemplate1BodyUnderscoreplain :: Maybe Text -- ^ By default, we generate a plaintext version of your message body for each delivery. Use this key to override the default plain text body.
  , withoutTemplate1Attachments :: Maybe WithTemplateAllOfAttachments -- ^ 
  , withoutTemplate1Headers :: Maybe (Map.Map String Text) -- ^ An object containing headers, where the key is the header name and the value is the header value. Header names and values must be strings and cannot contain any non-ASCII characters or empty spaces. Some headers are reserved and cannot be overwritten.
  , withoutTemplate1DisableUnderscorecssUnderscorepreprocessing :: Maybe Bool -- ^ Set to `true` to disable CSS preprocessing. This setting overrides the CSS preprocessing setting on the `transactional_message_id` as set in the user interface. Transactional emails have CSS preprocessing enabled by default.
  , withoutTemplate1Tracked :: Maybe Bool -- ^ If true, Customer.io tracks opens and link clicks in your message.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON WithoutTemplate1 where
  parseJSON = genericParseJSON optionsWithoutTemplate1
instance ToJSON WithoutTemplate1 where
  toJSON = genericToJSON optionsWithoutTemplate1

optionsWithoutTemplate1 :: Options
optionsWithoutTemplate1 =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("withoutTemplate1Body", "body")
      , ("withoutTemplate1Subject", "subject")
      , ("withoutTemplate1From", "from")
      , ("withoutTemplate1Identifiers", "identifiers")
      , ("withoutTemplate1MessageUnderscoredata", "message_data")
      , ("withoutTemplate1SendUnderscoreat", "send_at")
      , ("withoutTemplate1DisableUnderscoremessageUnderscoreretention", "disable_message_retention")
      , ("withoutTemplate1SendUnderscoretoUnderscoreunsubscribed", "send_to_unsubscribed")
      , ("withoutTemplate1QueueUnderscoredraft", "queue_draft")
      , ("withoutTemplate1To", "to")
      , ("withoutTemplate1Bcc", "bcc")
      , ("withoutTemplate1FakeUnderscorebcc", "fake_bcc")
      , ("withoutTemplate1ReplyUnderscoreto", "reply_to")
      , ("withoutTemplate1Preheader", "preheader")
      , ("withoutTemplate1BodyUnderscoreplain", "body_plain")
      , ("withoutTemplate1Attachments", "attachments")
      , ("withoutTemplate1Headers", "headers")
      , ("withoutTemplate1DisableUnderscorecssUnderscorepreprocessing", "disable_css_preprocessing")
      , ("withoutTemplate1Tracked", "tracked")
      ]


-- | Contains workspace properties including the count of messages, people, and objects. Customer.io caches these counts, so your data may be up to two hours old.
data Workspace = Workspace
  { workspaceId :: Maybe Int -- ^ The id of the workspace.
  , workspaceName :: Maybe Text -- ^ The name of the workspace.
  , workspaceMessagesUnderscoresent :: Maybe Int -- ^ The count of [messages sent](/journeys/message-statuses/#sent) via any channel (email, SMS, in-app, push, slack) in the current billing period.
  , workspaceBillableUnderscoremessagesUnderscoresent :: Maybe Int -- ^ The count of [emails sent](/journeys/message-statuses/#sent) that are considered for billing in your current billing period. Ultimately, we only bill for the overages on your plan.
  , workspacePeople :: Maybe Int -- ^ The current count of people profiles in the workspace. Updates roughly every hour.
  , workspaceObjectUnderscoretypes :: Maybe Int -- ^ The current count of object types in the workspace. Updates roughly every hour.
  , workspaceObjects :: Maybe Int -- ^ The current count of object profiles in the workspace. Updates roughly every hour.
  } deriving (Show, Eq, Generic, Data)

instance FromJSON Workspace where
  parseJSON = genericParseJSON optionsWorkspace
instance ToJSON Workspace where
  toJSON = genericToJSON optionsWorkspace

optionsWorkspace :: Options
optionsWorkspace =
  defaultOptions
    { omitNothingFields  = True
    , fieldLabelModifier = \s -> fromMaybe ("did not find JSON field name for " ++ show s) $ lookup s table
    }
  where
    table =
      [ ("workspaceId", "id")
      , ("workspaceName", "name")
      , ("workspaceMessagesUnderscoresent", "messages_sent")
      , ("workspaceBillableUnderscoremessagesUnderscoresent", "billable_messages_sent")
      , ("workspacePeople", "people")
      , ("workspaceObjectUnderscoretypes", "object_types")
      , ("workspaceObjects", "objects")
      ]

